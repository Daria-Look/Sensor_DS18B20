
CanSat_003.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005be4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08005d88  08005d88  00015d88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061dc  080061dc  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  080061dc  080061dc  000161dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061e4  080061e4  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061e4  080061e4  000161e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080061e8  080061e8  000161e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080061ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  200001e4  080063d0  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000350  080063d0  00020350  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afde  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017ce  00000000  00000000  0002b1f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a70  00000000  00000000  0002c9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  0002d430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016797  00000000  00000000  0002de08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf74  00000000  00000000  0004459f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d0db  00000000  00000000  00050513  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd5ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004014  00000000  00000000  000dd640  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000024  00000000  00000000  000e1654  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000003c  00000000  00000000  000e1678  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005d6c 	.word	0x08005d6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08005d6c 	.word	0x08005d6c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <DelayMicro>:
//---------------------------------------------------------------------------------------------------------------------
#include "ds18b20.h"
//---------------------------------------------------------------------------------------------------------------------
//	задержка с использованием таймера на указанное число микросекунд
//---------------------------------------------------------------------------------------------------------------------
void DelayMicro(int micros){
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	TIM10->CNT = 0;
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <DelayMicro+0x34>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24
	TIM10->CR1 = 1;
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <DelayMicro+0x34>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	601a      	str	r2, [r3, #0]
	while((TIM10->CNT) <= micros) {;}
 8000ed0:	bf00      	nop
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <DelayMicro+0x34>)
 8000ed4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d9fa      	bls.n	8000ed2 <DelayMicro+0x16>
	TIM10->CR1 = 0;
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <DelayMicro+0x34>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	40014400 	.word	0x40014400

08000ef4 <ds18b20_Reset>:
//---------------------------------------------------------------------------------------------------------------------
//	иниициализация датчика
//---------------------------------------------------------------------------------------------------------------------
void ds18b20_Reset(){
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);//низкий уровень
 8000ef8:	2200      	movs	r2, #0
 8000efa:	2102      	movs	r1, #2
 8000efc:	4808      	ldr	r0, [pc, #32]	; (8000f20 <ds18b20_Reset+0x2c>)
 8000efe:	f000 fee3 	bl	8001cc8 <HAL_GPIO_WritePin>
	DelayMicro(500);
 8000f02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f06:	f7ff ffd9 	bl	8000ebc <DelayMicro>
  	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);  //высокий уровень
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	2102      	movs	r1, #2
 8000f0e:	4804      	ldr	r0, [pc, #16]	; (8000f20 <ds18b20_Reset+0x2c>)
 8000f10:	f000 feda 	bl	8001cc8 <HAL_GPIO_WritePin>
  	DelayMicro(1000);
 8000f14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f18:	f7ff ffd0 	bl	8000ebc <DelayMicro>
}
 8000f1c:	bf00      	nop
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40020000 	.word	0x40020000

08000f24 <ds18b20_WriteBit>:
//---------------------------------------------------------------------------------------------------------------------
//	запись бита
//---------------------------------------------------------------------------------------------------------------------
void ds18b20_WriteBit(int bit){
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);//низкий уровень
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	2102      	movs	r1, #2
 8000f30:	480e      	ldr	r0, [pc, #56]	; (8000f6c <ds18b20_WriteBit+0x48>)
 8000f32:	f000 fec9 	bl	8001cc8 <HAL_GPIO_WritePin>
	DelayMicro(bit ? 3 : 65);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <ds18b20_WriteBit+0x1c>
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e000      	b.n	8000f42 <ds18b20_WriteBit+0x1e>
 8000f40:	2341      	movs	r3, #65	; 0x41
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff ffba 	bl	8000ebc <DelayMicro>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);  //высокий уровень
 8000f48:	2201      	movs	r2, #1
 8000f4a:	2102      	movs	r1, #2
 8000f4c:	4807      	ldr	r0, [pc, #28]	; (8000f6c <ds18b20_WriteBit+0x48>)
 8000f4e:	f000 febb 	bl	8001cc8 <HAL_GPIO_WritePin>
	DelayMicro(bit ? 65 : 3);
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <ds18b20_WriteBit+0x38>
 8000f58:	2341      	movs	r3, #65	; 0x41
 8000f5a:	e000      	b.n	8000f5e <ds18b20_WriteBit+0x3a>
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f7ff ffac 	bl	8000ebc <DelayMicro>
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40020000 	.word	0x40020000

08000f70 <ds18b20_WriteByte>:
//---------------------------------------------------------------------------------------------------------------------
//	запись байта
//---------------------------------------------------------------------------------------------------------------------
void ds18b20_WriteByte(int dt){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i < 8; i++){
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]
 8000f7c:	e00e      	b.n	8000f9c <ds18b20_WriteByte+0x2c>
		ds18b20_WriteBit(dt >> i & 1);
 8000f7e:	7bfb      	ldrb	r3, [r7, #15]
 8000f80:	687a      	ldr	r2, [r7, #4]
 8000f82:	fa42 f303 	asr.w	r3, r2, r3
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ffca 	bl	8000f24 <ds18b20_WriteBit>
		DelayMicro(5);
 8000f90:	2005      	movs	r0, #5
 8000f92:	f7ff ff93 	bl	8000ebc <DelayMicro>
	for (uint8_t i = 0; i < 8; i++){
 8000f96:	7bfb      	ldrb	r3, [r7, #15]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	73fb      	strb	r3, [r7, #15]
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	2b07      	cmp	r3, #7
 8000fa0:	d9ed      	bls.n	8000f7e <ds18b20_WriteByte+0xe>
	}
}
 8000fa2:	bf00      	nop
 8000fa4:	bf00      	nop
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <ds18b20_ReadBit>:
//---------------------------------------------------------------------------------------------------------------------
//	чтение бита
//---------------------------------------------------------------------------------------------------------------------
int ds18b20_ReadBit(void){
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
	int bit = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);//низкий уровень
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	2102      	movs	r1, #2
 8000fba:	480e      	ldr	r0, [pc, #56]	; (8000ff4 <ds18b20_ReadBit+0x48>)
 8000fbc:	f000 fe84 	bl	8001cc8 <HAL_GPIO_WritePin>
	DelayMicro(2);
 8000fc0:	2002      	movs	r0, #2
 8000fc2:	f7ff ff7b 	bl	8000ebc <DelayMicro>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);//высокий уровень
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2102      	movs	r1, #2
 8000fca:	480a      	ldr	r0, [pc, #40]	; (8000ff4 <ds18b20_ReadBit+0x48>)
 8000fcc:	f000 fe7c 	bl	8001cc8 <HAL_GPIO_WritePin>
	DelayMicro(12);
 8000fd0:	200c      	movs	r0, #12
 8000fd2:	f7ff ff73 	bl	8000ebc <DelayMicro>

	bit = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8000fd6:	2102      	movs	r1, #2
 8000fd8:	4806      	ldr	r0, [pc, #24]	; (8000ff4 <ds18b20_ReadBit+0x48>)
 8000fda:	f000 fe5d 	bl	8001c98 <HAL_GPIO_ReadPin>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	607b      	str	r3, [r7, #4]
	DelayMicro(45);
 8000fe2:	202d      	movs	r0, #45	; 0x2d
 8000fe4:	f7ff ff6a 	bl	8000ebc <DelayMicro>

	return bit;
 8000fe8:	687b      	ldr	r3, [r7, #4]
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40020000 	.word	0x40020000

08000ff8 <ds18b20_ReadByte>:
//---------------------------------------------------------------------------------------------------------------------
//	чтение байта
//---------------------------------------------------------------------------------------------------------------------
int ds18b20_ReadByte(void){
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
	int data = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 8; i++)
 8001002:	2300      	movs	r3, #0
 8001004:	603b      	str	r3, [r7, #0]
 8001006:	e00b      	b.n	8001020 <ds18b20_ReadByte+0x28>
		data += ds18b20_ReadBit() << i;
 8001008:	f7ff ffd0 	bl	8000fac <ds18b20_ReadBit>
 800100c:	4602      	mov	r2, r0
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	4413      	add	r3, r2
 8001018:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 8; i++)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	3301      	adds	r3, #1
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	2b07      	cmp	r3, #7
 8001024:	ddf0      	ble.n	8001008 <ds18b20_ReadByte+0x10>

	return data;
 8001026:	687b      	ldr	r3, [r7, #4]
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <ds18b20_ReadScratchpad>:
//---------------------------------------------------------------------------------------------------------------------
//	чтение Sctratchpad
//---------------------------------------------------------------------------------------------------------------------
void ds18b20_ReadScratchpad(int *Data){
 8001030:	b590      	push	{r4, r7, lr}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	ds18b20_Reset();
 8001038:	f7ff ff5c 	bl	8000ef4 <ds18b20_Reset>
    ds18b20_WriteByte(0xCC);//SKIP ROM
 800103c:	20cc      	movs	r0, #204	; 0xcc
 800103e:	f7ff ff97 	bl	8000f70 <ds18b20_WriteByte>
	ds18b20_WriteByte(0xBE);//READ SCRATCHPAD
 8001042:	20be      	movs	r0, #190	; 0xbe
 8001044:	f7ff ff94 	bl	8000f70 <ds18b20_WriteByte>

	for(int i=0; i<8; i++){
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	e00a      	b.n	8001064 <ds18b20_ReadScratchpad+0x34>
		Data[i] = ds18b20_ReadByte();
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	009b      	lsls	r3, r3, #2
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	18d4      	adds	r4, r2, r3
 8001056:	f7ff ffcf 	bl	8000ff8 <ds18b20_ReadByte>
 800105a:	4603      	mov	r3, r0
 800105c:	6023      	str	r3, [r4, #0]
	for(int i=0; i<8; i++){
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	3301      	adds	r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b07      	cmp	r3, #7
 8001068:	ddf1      	ble.n	800104e <ds18b20_ReadScratchpad+0x1e>
	}
}
 800106a:	bf00      	nop
 800106c:	bf00      	nop
 800106e:	3714      	adds	r7, #20
 8001070:	46bd      	mov	sp, r7
 8001072:	bd90      	pop	{r4, r7, pc}

08001074 <ds18b20_GetSign>:
//---------------------------------------------------------------------------------------------------------------------
//	получение знака
//---------------------------------------------------------------------------------------------------------------------
int ds18b20_GetSign(int dt){
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
	if (dt&(1<<11)) return 1;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001082:	2b00      	cmp	r3, #0
 8001084:	d001      	beq.n	800108a <ds18b20_GetSign+0x16>
 8001086:	2301      	movs	r3, #1
 8001088:	e000      	b.n	800108c <ds18b20_GetSign+0x18>

	else return 0;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <ds18b20_Convert>:
//---------------------------------------------------------------------------------------------------------------------
//	конвертация темепратуры
//---------------------------------------------------------------------------------------------------------------------
float ds18b20_Convert(int dt){
 8001098:	b480      	push	{r7}
 800109a:	b087      	sub	sp, #28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	float t;
	int at, att;
	if(dt>0x800){//отрицательная температура
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80010a6:	dd28      	ble.n	80010fa <ds18b20_Convert+0x62>
		at=~dt&0x07FF;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	43db      	mvns	r3, r3
 80010ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80010b0:	613b      	str	r3, [r7, #16]
		att=~dt&0x000F;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	60fb      	str	r3, [r7, #12]
		t = (float)(((at)+1)>>4)*-1; //отборосим знаковые и дробные биты
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	3301      	adds	r3, #1
 80010c0:	111b      	asrs	r3, r3, #4
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ca:	eef1 7a67 	vneg.f32	s15, s15
 80010ce:	edc7 7a05 	vstr	s15, [r7, #20]
		t -= (float)((att)+1) / 16.0f; //вычтем дробную часть
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	3301      	adds	r3, #1
 80010d6:	ee07 3a90 	vmov	s15, r3
 80010da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010de:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 80010e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010e6:	ed97 7a05 	vldr	s14, [r7, #20]
 80010ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ee:	edc7 7a05 	vstr	s15, [r7, #20]
		t = 0;
 80010f2:	f04f 0300 	mov.w	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	e01e      	b.n	8001138 <ds18b20_Convert+0xa0>
	}
	else{//не отрицательная температура
		at=dt&0x07FF;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001100:	613b      	str	r3, [r7, #16]
		att=dt&0x000F;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f003 030f 	and.w	r3, r3, #15
 8001108:	60fb      	str	r3, [r7, #12]
		t = (float)((at)>>4); //отборосим знаковые и дробные биты
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	111b      	asrs	r3, r3, #4
 800110e:	ee07 3a90 	vmov	s15, r3
 8001112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001116:	edc7 7a05 	vstr	s15, [r7, #20]
		t += (float)(att) / 16.0f; //прибавим дробную часть
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	ee07 3a90 	vmov	s15, r3
 8001120:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001124:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001128:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800112c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001134:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	return t;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	ee07 3a90 	vmov	s15, r3
}
 800113e:	eeb0 0a67 	vmov.f32	s0, s15
 8001142:	371c      	adds	r7, #28
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800114c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800114e:	b095      	sub	sp, #84	; 0x54
 8001150:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001152:	f000 faa1 	bl	8001698 <HAL_Init>

  /* USER CODE BEGIN Init */
  initialise_monitor_handles();
 8001156:	f002 f823 	bl	80031a0 <initialise_monitor_handles>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800115a:	f000 f85f 	bl	800121c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800115e:	f000 f917 	bl	8001390 <MX_GPIO_Init>
  MX_TIM10_Init();
 8001162:	f000 f8c7 	bl	80012f4 <MX_TIM10_Init>
  MX_USART1_UART_Init();
 8001166:	f000 f8e9 	bl	800133c <MX_USART1_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //initializing the sensor
	  ds18b20_Reset();
 800116a:	f7ff fec3 	bl	8000ef4 <ds18b20_Reset>
	  ds18b20_WriteByte(0xCC);
 800116e:	20cc      	movs	r0, #204	; 0xcc
 8001170:	f7ff fefe 	bl	8000f70 <ds18b20_WriteByte>
	  ds18b20_WriteByte(0x44);
 8001174:	2044      	movs	r0, #68	; 0x44
 8001176:	f7ff fefb 	bl	8000f70 <ds18b20_WriteByte>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(750);//delay 750 ms
 800117a:	f240 20ee 	movw	r0, #750	; 0x2ee
 800117e:	f000 fafd 	bl	800177c <HAL_Delay>
	  ds18b20_ReadScratchpad(dt);
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	4618      	mov	r0, r3
 8001188:	f7ff ff52 	bl	8001030 <ds18b20_ReadScratchpad>

	  //for debug
	  printf("Scratchpad: %02X %02X %02X %02X %02X %02X %02X %02X; \n",
 800118c:	68fd      	ldr	r5, [r7, #12]
 800118e:	693e      	ldr	r6, [r7, #16]
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	69fa      	ldr	r2, [r7, #28]
 8001198:	6a39      	ldr	r1, [r7, #32]
 800119a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800119c:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800119e:	9404      	str	r4, [sp, #16]
 80011a0:	9003      	str	r0, [sp, #12]
 80011a2:	9102      	str	r1, [sp, #8]
 80011a4:	9201      	str	r2, [sp, #4]
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4632      	mov	r2, r6
 80011ac:	4629      	mov	r1, r5
 80011ae:	4818      	ldr	r0, [pc, #96]	; (8001210 <main+0xc4>)
 80011b0:	f002 fe9c 	bl	8003eec <iprintf>
	  dt[0], dt[1], dt[2], dt[3], dt[4], dt[5], dt[6], dt[7]);

	  raw_temper = ((int)dt[1]<<8)|dt[0];
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	021a      	lsls	r2, r3, #8
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	633b      	str	r3, [r7, #48]	; 0x30
	  if(ds18b20_GetSign(raw_temper)) c='-';
 80011be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011c0:	f7ff ff58 	bl	8001074 <ds18b20_GetSign>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d003      	beq.n	80011d2 <main+0x86>
 80011ca:	232d      	movs	r3, #45	; 0x2d
 80011cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80011d0:	e002      	b.n	80011d8 <main+0x8c>
	  else c='+';
 80011d2:	232b      	movs	r3, #43	; 0x2b
 80011d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  temper = ds18b20_Convert(raw_temper);
 80011d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80011da:	f7ff ff5d 	bl	8001098 <ds18b20_Convert>
 80011de:	ed87 0a0b 	vstr	s0, [r7, #44]	; 0x2c
	  printf("t: %c%.2f\n", c, temper);
 80011e2:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 80011e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80011e8:	f7ff f9b6 	bl	8000558 <__aeabi_f2d>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4621      	mov	r1, r4
 80011f2:	4808      	ldr	r0, [pc, #32]	; (8001214 <main+0xc8>)
 80011f4:	f002 fe7a 	bl	8003eec <iprintf>

	  //strob for sync, useful
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80011f8:	2201      	movs	r2, #1
 80011fa:	2110      	movs	r1, #16
 80011fc:	4806      	ldr	r0, [pc, #24]	; (8001218 <main+0xcc>)
 80011fe:	f000 fd63 	bl	8001cc8 <HAL_GPIO_WritePin>
//	  HAL_Delay(1);
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001202:	2200      	movs	r2, #0
 8001204:	2110      	movs	r1, #16
 8001206:	4804      	ldr	r0, [pc, #16]	; (8001218 <main+0xcc>)
 8001208:	f000 fd5e 	bl	8001cc8 <HAL_GPIO_WritePin>
	  ds18b20_Reset();
 800120c:	e7ad      	b.n	800116a <main+0x1e>
 800120e:	bf00      	nop
 8001210:	08005d88 	.word	0x08005d88
 8001214:	08005dc0 	.word	0x08005dc0
 8001218:	40020000 	.word	0x40020000

0800121c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b094      	sub	sp, #80	; 0x50
 8001220:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001222:	f107 0320 	add.w	r3, r7, #32
 8001226:	2230      	movs	r2, #48	; 0x30
 8001228:	2100      	movs	r1, #0
 800122a:	4618      	mov	r0, r3
 800122c:	f002 f957 	bl	80034de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001240:	2300      	movs	r3, #0
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	4b29      	ldr	r3, [pc, #164]	; (80012ec <SystemClock_Config+0xd0>)
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	4a28      	ldr	r2, [pc, #160]	; (80012ec <SystemClock_Config+0xd0>)
 800124a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800124e:	6413      	str	r3, [r2, #64]	; 0x40
 8001250:	4b26      	ldr	r3, [pc, #152]	; (80012ec <SystemClock_Config+0xd0>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001258:	60bb      	str	r3, [r7, #8]
 800125a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800125c:	2300      	movs	r3, #0
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	4b23      	ldr	r3, [pc, #140]	; (80012f0 <SystemClock_Config+0xd4>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001268:	4a21      	ldr	r2, [pc, #132]	; (80012f0 <SystemClock_Config+0xd4>)
 800126a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800126e:	6013      	str	r3, [r2, #0]
 8001270:	4b1f      	ldr	r3, [pc, #124]	; (80012f0 <SystemClock_Config+0xd4>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001278:	607b      	str	r3, [r7, #4]
 800127a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800127c:	2302      	movs	r3, #2
 800127e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001280:	2301      	movs	r3, #1
 8001282:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001284:	2310      	movs	r3, #16
 8001286:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001288:	2302      	movs	r3, #2
 800128a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800128c:	2300      	movs	r3, #0
 800128e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001290:	2310      	movs	r3, #16
 8001292:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001294:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001298:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800129a:	2304      	movs	r3, #4
 800129c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800129e:	2304      	movs	r3, #4
 80012a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012a2:	f107 0320 	add.w	r3, r7, #32
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 fd28 	bl	8001cfc <HAL_RCC_OscConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80012b2:	f000 f8bd 	bl	8001430 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012b6:	230f      	movs	r3, #15
 80012b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012ba:	2302      	movs	r3, #2
 80012bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80012c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	2102      	movs	r1, #2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 ff8a 	bl	80021ec <HAL_RCC_ClockConfig>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80012de:	f000 f8a7 	bl	8001430 <Error_Handler>
  }
}
 80012e2:	bf00      	nop
 80012e4:	3750      	adds	r7, #80	; 0x50
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023800 	.word	0x40023800
 80012f0:	40007000 	.word	0x40007000

080012f4 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <MX_TIM10_Init+0x40>)
 80012fa:	4a0f      	ldr	r2, [pc, #60]	; (8001338 <MX_TIM10_Init+0x44>)
 80012fc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 83;
 80012fe:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <MX_TIM10_Init+0x40>)
 8001300:	2253      	movs	r2, #83	; 0x53
 8001302:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <MX_TIM10_Init+0x40>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800130a:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <MX_TIM10_Init+0x40>)
 800130c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001310:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001312:	4b08      	ldr	r3, [pc, #32]	; (8001334 <MX_TIM10_Init+0x40>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001318:	4b06      	ldr	r3, [pc, #24]	; (8001334 <MX_TIM10_Init+0x40>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800131e:	4805      	ldr	r0, [pc, #20]	; (8001334 <MX_TIM10_Init+0x40>)
 8001320:	f001 f984 	bl	800262c <HAL_TIM_Base_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800132a:	f000 f881 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	20000200 	.word	0x20000200
 8001338:	40014400 	.word	0x40014400

0800133c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MX_USART1_UART_Init+0x4c>)
 8001342:	4a12      	ldr	r2, [pc, #72]	; (800138c <MX_USART1_UART_Init+0x50>)
 8001344:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001346:	4b10      	ldr	r3, [pc, #64]	; (8001388 <MX_USART1_UART_Init+0x4c>)
 8001348:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800134c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800134e:	4b0e      	ldr	r3, [pc, #56]	; (8001388 <MX_USART1_UART_Init+0x4c>)
 8001350:	2200      	movs	r2, #0
 8001352:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001354:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <MX_USART1_UART_Init+0x4c>)
 8001356:	2200      	movs	r2, #0
 8001358:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800135a:	4b0b      	ldr	r3, [pc, #44]	; (8001388 <MX_USART1_UART_Init+0x4c>)
 800135c:	2200      	movs	r2, #0
 800135e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8001360:	4b09      	ldr	r3, [pc, #36]	; (8001388 <MX_USART1_UART_Init+0x4c>)
 8001362:	2208      	movs	r2, #8
 8001364:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001366:	4b08      	ldr	r3, [pc, #32]	; (8001388 <MX_USART1_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800136c:	4b06      	ldr	r3, [pc, #24]	; (8001388 <MX_USART1_UART_Init+0x4c>)
 800136e:	2200      	movs	r2, #0
 8001370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001372:	4805      	ldr	r0, [pc, #20]	; (8001388 <MX_USART1_UART_Init+0x4c>)
 8001374:	f001 fa2a 	bl	80027cc <HAL_UART_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800137e:	f000 f857 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000248 	.word	0x20000248
 800138c:	40011000 	.word	0x40011000

08001390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
 80013a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	4b1f      	ldr	r3, [pc, #124]	; (8001428 <MX_GPIO_Init+0x98>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a1e      	ldr	r2, [pc, #120]	; (8001428 <MX_GPIO_Init+0x98>)
 80013b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b1c      	ldr	r3, [pc, #112]	; (8001428 <MX_GPIO_Init+0x98>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	4b18      	ldr	r3, [pc, #96]	; (8001428 <MX_GPIO_Init+0x98>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ca:	4a17      	ldr	r2, [pc, #92]	; (8001428 <MX_GPIO_Init+0x98>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	6313      	str	r3, [r2, #48]	; 0x30
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <MX_GPIO_Init+0x98>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OW_Output_Pin|STB_Output_Pin, GPIO_PIN_RESET);
 80013de:	2200      	movs	r2, #0
 80013e0:	2112      	movs	r1, #18
 80013e2:	4812      	ldr	r0, [pc, #72]	; (800142c <MX_GPIO_Init+0x9c>)
 80013e4:	f000 fc70 	bl	8001cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OW_Output_Pin */
  GPIO_InitStruct.Pin = OW_Output_Pin;
 80013e8:	2302      	movs	r3, #2
 80013ea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80013ec:	2311      	movs	r3, #17
 80013ee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f4:	2303      	movs	r3, #3
 80013f6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(OW_Output_GPIO_Port, &GPIO_InitStruct);
 80013f8:	f107 030c 	add.w	r3, r7, #12
 80013fc:	4619      	mov	r1, r3
 80013fe:	480b      	ldr	r0, [pc, #44]	; (800142c <MX_GPIO_Init+0x9c>)
 8001400:	f000 fac6 	bl	8001990 <HAL_GPIO_Init>

  /*Configure GPIO pin : STB_Output_Pin */
  GPIO_InitStruct.Pin = STB_Output_Pin;
 8001404:	2310      	movs	r3, #16
 8001406:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001408:	2301      	movs	r3, #1
 800140a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001410:	2303      	movs	r3, #3
 8001412:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(STB_Output_GPIO_Port, &GPIO_InitStruct);
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	4619      	mov	r1, r3
 800141a:	4804      	ldr	r0, [pc, #16]	; (800142c <MX_GPIO_Init+0x9c>)
 800141c:	f000 fab8 	bl	8001990 <HAL_GPIO_Init>

}
 8001420:	bf00      	nop
 8001422:	3720      	adds	r7, #32
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40023800 	.word	0x40023800
 800142c:	40020000 	.word	0x40020000

08001430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001434:	b672      	cpsid	i
}
 8001436:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001438:	e7fe      	b.n	8001438 <Error_Handler+0x8>
	...

0800143c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800143c:	b480      	push	{r7}
 800143e:	b083      	sub	sp, #12
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <HAL_MspInit+0x4c>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	4a0f      	ldr	r2, [pc, #60]	; (8001488 <HAL_MspInit+0x4c>)
 800144c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001450:	6453      	str	r3, [r2, #68]	; 0x44
 8001452:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <HAL_MspInit+0x4c>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	603b      	str	r3, [r7, #0]
 8001462:	4b09      	ldr	r3, [pc, #36]	; (8001488 <HAL_MspInit+0x4c>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	4a08      	ldr	r2, [pc, #32]	; (8001488 <HAL_MspInit+0x4c>)
 8001468:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800146c:	6413      	str	r3, [r2, #64]	; 0x40
 800146e:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_MspInit+0x4c>)
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800

0800148c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM10)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a0b      	ldr	r2, [pc, #44]	; (80014c8 <HAL_TIM_Base_MspInit+0x3c>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d10d      	bne.n	80014ba <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	4b0a      	ldr	r3, [pc, #40]	; (80014cc <HAL_TIM_Base_MspInit+0x40>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	4a09      	ldr	r2, [pc, #36]	; (80014cc <HAL_TIM_Base_MspInit+0x40>)
 80014a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ac:	6453      	str	r3, [r2, #68]	; 0x44
 80014ae:	4b07      	ldr	r3, [pc, #28]	; (80014cc <HAL_TIM_Base_MspInit+0x40>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80014ba:	bf00      	nop
 80014bc:	3714      	adds	r7, #20
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40014400 	.word	0x40014400
 80014cc:	40023800 	.word	0x40023800

080014d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	; 0x28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a19      	ldr	r2, [pc, #100]	; (8001554 <HAL_UART_MspInit+0x84>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d12c      	bne.n	800154c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	4b18      	ldr	r3, [pc, #96]	; (8001558 <HAL_UART_MspInit+0x88>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	4a17      	ldr	r2, [pc, #92]	; (8001558 <HAL_UART_MspInit+0x88>)
 80014fc:	f043 0310 	orr.w	r3, r3, #16
 8001500:	6453      	str	r3, [r2, #68]	; 0x44
 8001502:	4b15      	ldr	r3, [pc, #84]	; (8001558 <HAL_UART_MspInit+0x88>)
 8001504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001506:	f003 0310 	and.w	r3, r3, #16
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b11      	ldr	r3, [pc, #68]	; (8001558 <HAL_UART_MspInit+0x88>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	4a10      	ldr	r2, [pc, #64]	; (8001558 <HAL_UART_MspInit+0x88>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6313      	str	r3, [r2, #48]	; 0x30
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <HAL_UART_MspInit+0x88>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800152a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800152e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001538:	2303      	movs	r3, #3
 800153a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800153c:	2307      	movs	r3, #7
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	4805      	ldr	r0, [pc, #20]	; (800155c <HAL_UART_MspInit+0x8c>)
 8001548:	f000 fa22 	bl	8001990 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800154c:	bf00      	nop
 800154e:	3728      	adds	r7, #40	; 0x28
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	40011000 	.word	0x40011000
 8001558:	40023800 	.word	0x40023800
 800155c:	40020000 	.word	0x40020000

08001560 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <NMI_Handler+0x4>

08001566 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800156a:	e7fe      	b.n	800156a <HardFault_Handler+0x4>

0800156c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001570:	e7fe      	b.n	8001570 <MemManage_Handler+0x4>

08001572 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001572:	b480      	push	{r7}
 8001574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001576:	e7fe      	b.n	8001576 <BusFault_Handler+0x4>

08001578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800157c:	e7fe      	b.n	800157c <UsageFault_Handler+0x4>

0800157e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800157e:	b480      	push	{r7}
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr

0800159a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800159a:	b480      	push	{r7}
 800159c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800159e:	bf00      	nop
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ac:	f000 f8c6 	bl	800173c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015bc:	4a14      	ldr	r2, [pc, #80]	; (8001610 <_sbrk+0x5c>)
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <_sbrk+0x60>)
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015c8:	4b13      	ldr	r3, [pc, #76]	; (8001618 <_sbrk+0x64>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d102      	bne.n	80015d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d0:	4b11      	ldr	r3, [pc, #68]	; (8001618 <_sbrk+0x64>)
 80015d2:	4a12      	ldr	r2, [pc, #72]	; (800161c <_sbrk+0x68>)
 80015d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015d6:	4b10      	ldr	r3, [pc, #64]	; (8001618 <_sbrk+0x64>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4413      	add	r3, r2
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d207      	bcs.n	80015f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e4:	f001 fe58 	bl	8003298 <__errno>
 80015e8:	4603      	mov	r3, r0
 80015ea:	220c      	movs	r2, #12
 80015ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015ee:	f04f 33ff 	mov.w	r3, #4294967295
 80015f2:	e009      	b.n	8001608 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f4:	4b08      	ldr	r3, [pc, #32]	; (8001618 <_sbrk+0x64>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015fa:	4b07      	ldr	r3, [pc, #28]	; (8001618 <_sbrk+0x64>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	4a05      	ldr	r2, [pc, #20]	; (8001618 <_sbrk+0x64>)
 8001604:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001606:	68fb      	ldr	r3, [r7, #12]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20010000 	.word	0x20010000
 8001614:	00000400 	.word	0x00000400
 8001618:	2000028c 	.word	0x2000028c
 800161c:	20000350 	.word	0x20000350

08001620 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001624:	4b06      	ldr	r3, [pc, #24]	; (8001640 <SystemInit+0x20>)
 8001626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800162a:	4a05      	ldr	r2, [pc, #20]	; (8001640 <SystemInit+0x20>)
 800162c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001630:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000ed00 	.word	0xe000ed00

08001644 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001644:	f8df d034 	ldr.w	sp, [pc, #52]	; 800167c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001648:	480d      	ldr	r0, [pc, #52]	; (8001680 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800164a:	490e      	ldr	r1, [pc, #56]	; (8001684 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800164c:	4a0e      	ldr	r2, [pc, #56]	; (8001688 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001650:	e002      	b.n	8001658 <LoopCopyDataInit>

08001652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001656:	3304      	adds	r3, #4

08001658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800165c:	d3f9      	bcc.n	8001652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165e:	4a0b      	ldr	r2, [pc, #44]	; (800168c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001660:	4c0b      	ldr	r4, [pc, #44]	; (8001690 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001664:	e001      	b.n	800166a <LoopFillZerobss>

08001666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001668:	3204      	adds	r2, #4

0800166a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800166c:	d3fb      	bcc.n	8001666 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800166e:	f7ff ffd7 	bl	8001620 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001672:	f001 ff0d 	bl	8003490 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001676:	f7ff fd69 	bl	800114c <main>
  bx  lr    
 800167a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800167c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001684:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001688:	080061ec 	.word	0x080061ec
  ldr r2, =_sbss
 800168c:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001690:	20000350 	.word	0x20000350

08001694 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001694:	e7fe      	b.n	8001694 <ADC_IRQHandler>
	...

08001698 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800169c:	4b0e      	ldr	r3, [pc, #56]	; (80016d8 <HAL_Init+0x40>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0d      	ldr	r2, [pc, #52]	; (80016d8 <HAL_Init+0x40>)
 80016a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <HAL_Init+0x40>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a0a      	ldr	r2, [pc, #40]	; (80016d8 <HAL_Init+0x40>)
 80016ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <HAL_Init+0x40>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <HAL_Init+0x40>)
 80016ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016c0:	2003      	movs	r0, #3
 80016c2:	f000 f931 	bl	8001928 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016c6:	200f      	movs	r0, #15
 80016c8:	f000 f808 	bl	80016dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016cc:	f7ff feb6 	bl	800143c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40023c00 	.word	0x40023c00

080016dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <HAL_InitTick+0x54>)
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_InitTick+0x58>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	4619      	mov	r1, r3
 80016ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016fa:	4618      	mov	r0, r3
 80016fc:	f000 f93b 	bl	8001976 <HAL_SYSTICK_Config>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e00e      	b.n	8001728 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2b0f      	cmp	r3, #15
 800170e:	d80a      	bhi.n	8001726 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001710:	2200      	movs	r2, #0
 8001712:	6879      	ldr	r1, [r7, #4]
 8001714:	f04f 30ff 	mov.w	r0, #4294967295
 8001718:	f000 f911 	bl	800193e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800171c:	4a06      	ldr	r2, [pc, #24]	; (8001738 <HAL_InitTick+0x5c>)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001722:	2300      	movs	r3, #0
 8001724:	e000      	b.n	8001728 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}
 8001730:	20000000 	.word	0x20000000
 8001734:	20000008 	.word	0x20000008
 8001738:	20000004 	.word	0x20000004

0800173c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001740:	4b06      	ldr	r3, [pc, #24]	; (800175c <HAL_IncTick+0x20>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	461a      	mov	r2, r3
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <HAL_IncTick+0x24>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4413      	add	r3, r2
 800174c:	4a04      	ldr	r2, [pc, #16]	; (8001760 <HAL_IncTick+0x24>)
 800174e:	6013      	str	r3, [r2, #0]
}
 8001750:	bf00      	nop
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	20000008 	.word	0x20000008
 8001760:	20000290 	.word	0x20000290

08001764 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  return uwTick;
 8001768:	4b03      	ldr	r3, [pc, #12]	; (8001778 <HAL_GetTick+0x14>)
 800176a:	681b      	ldr	r3, [r3, #0]
}
 800176c:	4618      	mov	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001774:	4770      	bx	lr
 8001776:	bf00      	nop
 8001778:	20000290 	.word	0x20000290

0800177c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001784:	f7ff ffee 	bl	8001764 <HAL_GetTick>
 8001788:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001794:	d005      	beq.n	80017a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <HAL_Delay+0x44>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	461a      	mov	r2, r3
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4413      	add	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017a2:	bf00      	nop
 80017a4:	f7ff ffde 	bl	8001764 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d8f7      	bhi.n	80017a4 <HAL_Delay+0x28>
  {
  }
}
 80017b4:	bf00      	nop
 80017b6:	bf00      	nop
 80017b8:	3710      	adds	r7, #16
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	20000008 	.word	0x20000008

080017c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	f003 0307 	and.w	r3, r3, #7
 80017d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d4:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e0:	4013      	ands	r3, r2
 80017e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f6:	4a04      	ldr	r2, [pc, #16]	; (8001808 <__NVIC_SetPriorityGrouping+0x44>)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	60d3      	str	r3, [r2, #12]
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00

0800180c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <__NVIC_GetPriorityGrouping+0x18>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	0a1b      	lsrs	r3, r3, #8
 8001816:	f003 0307 	and.w	r3, r3, #7
}
 800181a:	4618      	mov	r0, r3
 800181c:	46bd      	mov	sp, r7
 800181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001822:	4770      	bx	lr
 8001824:	e000ed00 	.word	0xe000ed00

08001828 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	6039      	str	r1, [r7, #0]
 8001832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001838:	2b00      	cmp	r3, #0
 800183a:	db0a      	blt.n	8001852 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	b2da      	uxtb	r2, r3
 8001840:	490c      	ldr	r1, [pc, #48]	; (8001874 <__NVIC_SetPriority+0x4c>)
 8001842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	440b      	add	r3, r1
 800184c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001850:	e00a      	b.n	8001868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	b2da      	uxtb	r2, r3
 8001856:	4908      	ldr	r1, [pc, #32]	; (8001878 <__NVIC_SetPriority+0x50>)
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	3b04      	subs	r3, #4
 8001860:	0112      	lsls	r2, r2, #4
 8001862:	b2d2      	uxtb	r2, r2
 8001864:	440b      	add	r3, r1
 8001866:	761a      	strb	r2, [r3, #24]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr
 8001874:	e000e100 	.word	0xe000e100
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f1c3 0307 	rsb	r3, r3, #7
 8001896:	2b04      	cmp	r3, #4
 8001898:	bf28      	it	cs
 800189a:	2304      	movcs	r3, #4
 800189c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3304      	adds	r3, #4
 80018a2:	2b06      	cmp	r3, #6
 80018a4:	d902      	bls.n	80018ac <NVIC_EncodePriority+0x30>
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	3b03      	subs	r3, #3
 80018aa:	e000      	b.n	80018ae <NVIC_EncodePriority+0x32>
 80018ac:	2300      	movs	r3, #0
 80018ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	f04f 32ff 	mov.w	r2, #4294967295
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43da      	mvns	r2, r3
 80018bc:	68bb      	ldr	r3, [r7, #8]
 80018be:	401a      	ands	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018c4:	f04f 31ff 	mov.w	r1, #4294967295
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa01 f303 	lsl.w	r3, r1, r3
 80018ce:	43d9      	mvns	r1, r3
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018d4:	4313      	orrs	r3, r2
         );
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3724      	adds	r7, #36	; 0x24
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
	...

080018e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	3b01      	subs	r3, #1
 80018f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018f4:	d301      	bcc.n	80018fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018f6:	2301      	movs	r3, #1
 80018f8:	e00f      	b.n	800191a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018fa:	4a0a      	ldr	r2, [pc, #40]	; (8001924 <SysTick_Config+0x40>)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
 8001900:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001902:	210f      	movs	r1, #15
 8001904:	f04f 30ff 	mov.w	r0, #4294967295
 8001908:	f7ff ff8e 	bl	8001828 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <SysTick_Config+0x40>)
 800190e:	2200      	movs	r2, #0
 8001910:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001912:	4b04      	ldr	r3, [pc, #16]	; (8001924 <SysTick_Config+0x40>)
 8001914:	2207      	movs	r2, #7
 8001916:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	e000e010 	.word	0xe000e010

08001928 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ff47 	bl	80017c4 <__NVIC_SetPriorityGrouping>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}

0800193e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800193e:	b580      	push	{r7, lr}
 8001940:	b086      	sub	sp, #24
 8001942:	af00      	add	r7, sp, #0
 8001944:	4603      	mov	r3, r0
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
 800194a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800194c:	2300      	movs	r3, #0
 800194e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001950:	f7ff ff5c 	bl	800180c <__NVIC_GetPriorityGrouping>
 8001954:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	68b9      	ldr	r1, [r7, #8]
 800195a:	6978      	ldr	r0, [r7, #20]
 800195c:	f7ff ff8e 	bl	800187c <NVIC_EncodePriority>
 8001960:	4602      	mov	r2, r0
 8001962:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff ff5d 	bl	8001828 <__NVIC_SetPriority>
}
 800196e:	bf00      	nop
 8001970:	3718      	adds	r7, #24
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001976:	b580      	push	{r7, lr}
 8001978:	b082      	sub	sp, #8
 800197a:	af00      	add	r7, sp, #0
 800197c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f7ff ffb0 	bl	80018e4 <SysTick_Config>
 8001984:	4603      	mov	r3, r0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3708      	adds	r7, #8
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001990:	b480      	push	{r7}
 8001992:	b089      	sub	sp, #36	; 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800199a:	2300      	movs	r3, #0
 800199c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
 80019aa:	e159      	b.n	8001c60 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80019ac:	2201      	movs	r2, #1
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	fa02 f303 	lsl.w	r3, r2, r3
 80019b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	f040 8148 	bne.w	8001c5a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d005      	beq.n	80019e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d130      	bne.n	8001a44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	2203      	movs	r2, #3
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4013      	ands	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	69fb      	ldr	r3, [r7, #28]
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	69ba      	ldr	r2, [r7, #24]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a18:	2201      	movs	r2, #1
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	69ba      	ldr	r2, [r7, #24]
 8001a24:	4013      	ands	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	091b      	lsrs	r3, r3, #4
 8001a2e:	f003 0201 	and.w	r2, r3, #1
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f003 0303 	and.w	r3, r3, #3
 8001a4c:	2b03      	cmp	r3, #3
 8001a4e:	d017      	beq.n	8001a80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	43db      	mvns	r3, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4013      	ands	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	689a      	ldr	r2, [r3, #8]
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	005b      	lsls	r3, r3, #1
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	69ba      	ldr	r2, [r7, #24]
 8001a76:	4313      	orrs	r3, r2
 8001a78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d123      	bne.n	8001ad4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	08da      	lsrs	r2, r3, #3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	3208      	adds	r2, #8
 8001a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	f003 0307 	and.w	r3, r3, #7
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	220f      	movs	r2, #15
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	691a      	ldr	r2, [r3, #16]
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	08da      	lsrs	r2, r3, #3
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	3208      	adds	r2, #8
 8001ace:	69b9      	ldr	r1, [r7, #24]
 8001ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	2203      	movs	r2, #3
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 0203 	and.w	r2, r3, #3
 8001af4:	69fb      	ldr	r3, [r7, #28]
 8001af6:	005b      	lsls	r3, r3, #1
 8001af8:	fa02 f303 	lsl.w	r3, r2, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4313      	orrs	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f000 80a2 	beq.w	8001c5a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	60fb      	str	r3, [r7, #12]
 8001b1a:	4b57      	ldr	r3, [pc, #348]	; (8001c78 <HAL_GPIO_Init+0x2e8>)
 8001b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b1e:	4a56      	ldr	r2, [pc, #344]	; (8001c78 <HAL_GPIO_Init+0x2e8>)
 8001b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b24:	6453      	str	r3, [r2, #68]	; 0x44
 8001b26:	4b54      	ldr	r3, [pc, #336]	; (8001c78 <HAL_GPIO_Init+0x2e8>)
 8001b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b2e:	60fb      	str	r3, [r7, #12]
 8001b30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b32:	4a52      	ldr	r2, [pc, #328]	; (8001c7c <HAL_GPIO_Init+0x2ec>)
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	089b      	lsrs	r3, r3, #2
 8001b38:	3302      	adds	r3, #2
 8001b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	f003 0303 	and.w	r3, r3, #3
 8001b46:	009b      	lsls	r3, r3, #2
 8001b48:	220f      	movs	r2, #15
 8001b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4e:	43db      	mvns	r3, r3
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	4013      	ands	r3, r2
 8001b54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a49      	ldr	r2, [pc, #292]	; (8001c80 <HAL_GPIO_Init+0x2f0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d019      	beq.n	8001b92 <HAL_GPIO_Init+0x202>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	4a48      	ldr	r2, [pc, #288]	; (8001c84 <HAL_GPIO_Init+0x2f4>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d013      	beq.n	8001b8e <HAL_GPIO_Init+0x1fe>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4a47      	ldr	r2, [pc, #284]	; (8001c88 <HAL_GPIO_Init+0x2f8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d00d      	beq.n	8001b8a <HAL_GPIO_Init+0x1fa>
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	4a46      	ldr	r2, [pc, #280]	; (8001c8c <HAL_GPIO_Init+0x2fc>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d007      	beq.n	8001b86 <HAL_GPIO_Init+0x1f6>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4a45      	ldr	r2, [pc, #276]	; (8001c90 <HAL_GPIO_Init+0x300>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d101      	bne.n	8001b82 <HAL_GPIO_Init+0x1f2>
 8001b7e:	2304      	movs	r3, #4
 8001b80:	e008      	b.n	8001b94 <HAL_GPIO_Init+0x204>
 8001b82:	2307      	movs	r3, #7
 8001b84:	e006      	b.n	8001b94 <HAL_GPIO_Init+0x204>
 8001b86:	2303      	movs	r3, #3
 8001b88:	e004      	b.n	8001b94 <HAL_GPIO_Init+0x204>
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	e002      	b.n	8001b94 <HAL_GPIO_Init+0x204>
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e000      	b.n	8001b94 <HAL_GPIO_Init+0x204>
 8001b92:	2300      	movs	r3, #0
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	f002 0203 	and.w	r2, r2, #3
 8001b9a:	0092      	lsls	r2, r2, #2
 8001b9c:	4093      	lsls	r3, r2
 8001b9e:	69ba      	ldr	r2, [r7, #24]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ba4:	4935      	ldr	r1, [pc, #212]	; (8001c7c <HAL_GPIO_Init+0x2ec>)
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	089b      	lsrs	r3, r3, #2
 8001baa:	3302      	adds	r3, #2
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bb2:	4b38      	ldr	r3, [pc, #224]	; (8001c94 <HAL_GPIO_Init+0x304>)
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	69ba      	ldr	r2, [r7, #24]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bd6:	4a2f      	ldr	r2, [pc, #188]	; (8001c94 <HAL_GPIO_Init+0x304>)
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bdc:	4b2d      	ldr	r3, [pc, #180]	; (8001c94 <HAL_GPIO_Init+0x304>)
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	69ba      	ldr	r2, [r7, #24]
 8001be8:	4013      	ands	r3, r2
 8001bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d003      	beq.n	8001c00 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001bf8:	69ba      	ldr	r2, [r7, #24]
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c00:	4a24      	ldr	r2, [pc, #144]	; (8001c94 <HAL_GPIO_Init+0x304>)
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c06:	4b23      	ldr	r3, [pc, #140]	; (8001c94 <HAL_GPIO_Init+0x304>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4013      	ands	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d003      	beq.n	8001c2a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001c22:	69ba      	ldr	r2, [r7, #24]
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	4313      	orrs	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c2a:	4a1a      	ldr	r2, [pc, #104]	; (8001c94 <HAL_GPIO_Init+0x304>)
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c30:	4b18      	ldr	r3, [pc, #96]	; (8001c94 <HAL_GPIO_Init+0x304>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c54:	4a0f      	ldr	r2, [pc, #60]	; (8001c94 <HAL_GPIO_Init+0x304>)
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	61fb      	str	r3, [r7, #28]
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	2b0f      	cmp	r3, #15
 8001c64:	f67f aea2 	bls.w	80019ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c68:	bf00      	nop
 8001c6a:	bf00      	nop
 8001c6c:	3724      	adds	r7, #36	; 0x24
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	40023800 	.word	0x40023800
 8001c7c:	40013800 	.word	0x40013800
 8001c80:	40020000 	.word	0x40020000
 8001c84:	40020400 	.word	0x40020400
 8001c88:	40020800 	.word	0x40020800
 8001c8c:	40020c00 	.word	0x40020c00
 8001c90:	40021000 	.word	0x40021000
 8001c94:	40013c00 	.word	0x40013c00

08001c98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b085      	sub	sp, #20
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691a      	ldr	r2, [r3, #16]
 8001ca8:	887b      	ldrh	r3, [r7, #2]
 8001caa:	4013      	ands	r3, r2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d002      	beq.n	8001cb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
 8001cb4:	e001      	b.n	8001cba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	807b      	strh	r3, [r7, #2]
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001cd8:	787b      	ldrb	r3, [r7, #1]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d003      	beq.n	8001ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cde:	887a      	ldrh	r2, [r7, #2]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ce4:	e003      	b.n	8001cee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ce6:	887b      	ldrh	r3, [r7, #2]
 8001ce8:	041a      	lsls	r2, r3, #16
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	619a      	str	r2, [r3, #24]
}
 8001cee:	bf00      	nop
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
	...

08001cfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e267      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d075      	beq.n	8001e06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d1a:	4b88      	ldr	r3, [pc, #544]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	f003 030c 	and.w	r3, r3, #12
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d00c      	beq.n	8001d40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d26:	4b85      	ldr	r3, [pc, #532]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d112      	bne.n	8001d58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d32:	4b82      	ldr	r3, [pc, #520]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d3e:	d10b      	bne.n	8001d58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d40:	4b7e      	ldr	r3, [pc, #504]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d05b      	beq.n	8001e04 <HAL_RCC_OscConfig+0x108>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d157      	bne.n	8001e04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e242      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d60:	d106      	bne.n	8001d70 <HAL_RCC_OscConfig+0x74>
 8001d62:	4b76      	ldr	r3, [pc, #472]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a75      	ldr	r2, [pc, #468]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001d68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d6c:	6013      	str	r3, [r2, #0]
 8001d6e:	e01d      	b.n	8001dac <HAL_RCC_OscConfig+0xb0>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d78:	d10c      	bne.n	8001d94 <HAL_RCC_OscConfig+0x98>
 8001d7a:	4b70      	ldr	r3, [pc, #448]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a6f      	ldr	r2, [pc, #444]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001d80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	4b6d      	ldr	r3, [pc, #436]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a6c      	ldr	r2, [pc, #432]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	e00b      	b.n	8001dac <HAL_RCC_OscConfig+0xb0>
 8001d94:	4b69      	ldr	r3, [pc, #420]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a68      	ldr	r2, [pc, #416]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001d9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d9e:	6013      	str	r3, [r2, #0]
 8001da0:	4b66      	ldr	r3, [pc, #408]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a65      	ldr	r2, [pc, #404]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001da6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001daa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d013      	beq.n	8001ddc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db4:	f7ff fcd6 	bl	8001764 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dbc:	f7ff fcd2 	bl	8001764 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b64      	cmp	r3, #100	; 0x64
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e207      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dce:	4b5b      	ldr	r3, [pc, #364]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d0f0      	beq.n	8001dbc <HAL_RCC_OscConfig+0xc0>
 8001dda:	e014      	b.n	8001e06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ddc:	f7ff fcc2 	bl	8001764 <HAL_GetTick>
 8001de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001de2:	e008      	b.n	8001df6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001de4:	f7ff fcbe 	bl	8001764 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	2b64      	cmp	r3, #100	; 0x64
 8001df0:	d901      	bls.n	8001df6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001df2:	2303      	movs	r3, #3
 8001df4:	e1f3      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df6:	4b51      	ldr	r3, [pc, #324]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d1f0      	bne.n	8001de4 <HAL_RCC_OscConfig+0xe8>
 8001e02:	e000      	b.n	8001e06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d063      	beq.n	8001eda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e12:	4b4a      	ldr	r3, [pc, #296]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001e14:	689b      	ldr	r3, [r3, #8]
 8001e16:	f003 030c 	and.w	r3, r3, #12
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00b      	beq.n	8001e36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e1e:	4b47      	ldr	r3, [pc, #284]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e26:	2b08      	cmp	r3, #8
 8001e28:	d11c      	bne.n	8001e64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e2a:	4b44      	ldr	r3, [pc, #272]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d116      	bne.n	8001e64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e36:	4b41      	ldr	r3, [pc, #260]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0302 	and.w	r3, r3, #2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d005      	beq.n	8001e4e <HAL_RCC_OscConfig+0x152>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	2b01      	cmp	r3, #1
 8001e48:	d001      	beq.n	8001e4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e1c7      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e4e:	4b3b      	ldr	r3, [pc, #236]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	691b      	ldr	r3, [r3, #16]
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4937      	ldr	r1, [pc, #220]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e62:	e03a      	b.n	8001eda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d020      	beq.n	8001eae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e6c:	4b34      	ldr	r3, [pc, #208]	; (8001f40 <HAL_RCC_OscConfig+0x244>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e72:	f7ff fc77 	bl	8001764 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e78:	e008      	b.n	8001e8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e7a:	f7ff fc73 	bl	8001764 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	d901      	bls.n	8001e8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e88:	2303      	movs	r3, #3
 8001e8a:	e1a8      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8c:	4b2b      	ldr	r3, [pc, #172]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0302 	and.w	r3, r3, #2
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d0f0      	beq.n	8001e7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e98:	4b28      	ldr	r3, [pc, #160]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	691b      	ldr	r3, [r3, #16]
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	4925      	ldr	r1, [pc, #148]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	600b      	str	r3, [r1, #0]
 8001eac:	e015      	b.n	8001eda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eae:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <HAL_RCC_OscConfig+0x244>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb4:	f7ff fc56 	bl	8001764 <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ebc:	f7ff fc52 	bl	8001764 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e187      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ece:	4b1b      	ldr	r3, [pc, #108]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0302 	and.w	r3, r3, #2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d1f0      	bne.n	8001ebc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d036      	beq.n	8001f54 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	695b      	ldr	r3, [r3, #20]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d016      	beq.n	8001f1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001eee:	4b15      	ldr	r3, [pc, #84]	; (8001f44 <HAL_RCC_OscConfig+0x248>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef4:	f7ff fc36 	bl	8001764 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001efc:	f7ff fc32 	bl	8001764 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e167      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f0e:	4b0b      	ldr	r3, [pc, #44]	; (8001f3c <HAL_RCC_OscConfig+0x240>)
 8001f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f0      	beq.n	8001efc <HAL_RCC_OscConfig+0x200>
 8001f1a:	e01b      	b.n	8001f54 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f1c:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_RCC_OscConfig+0x248>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f22:	f7ff fc1f 	bl	8001764 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f28:	e00e      	b.n	8001f48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f2a:	f7ff fc1b 	bl	8001764 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d907      	bls.n	8001f48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e150      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	42470000 	.word	0x42470000
 8001f44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f48:	4b88      	ldr	r3, [pc, #544]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8001f4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f4c:	f003 0302 	and.w	r3, r3, #2
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1ea      	bne.n	8001f2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 8097 	beq.w	8002090 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f62:	2300      	movs	r3, #0
 8001f64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f66:	4b81      	ldr	r3, [pc, #516]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10f      	bne.n	8001f92 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f72:	2300      	movs	r3, #0
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	4b7d      	ldr	r3, [pc, #500]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	4a7c      	ldr	r2, [pc, #496]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8001f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f80:	6413      	str	r3, [r2, #64]	; 0x40
 8001f82:	4b7a      	ldr	r3, [pc, #488]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8001f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f92:	4b77      	ldr	r3, [pc, #476]	; (8002170 <HAL_RCC_OscConfig+0x474>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d118      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f9e:	4b74      	ldr	r3, [pc, #464]	; (8002170 <HAL_RCC_OscConfig+0x474>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a73      	ldr	r2, [pc, #460]	; (8002170 <HAL_RCC_OscConfig+0x474>)
 8001fa4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001faa:	f7ff fbdb 	bl	8001764 <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fb2:	f7ff fbd7 	bl	8001764 <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e10c      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc4:	4b6a      	ldr	r3, [pc, #424]	; (8002170 <HAL_RCC_OscConfig+0x474>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0f0      	beq.n	8001fb2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d106      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x2ea>
 8001fd8:	4b64      	ldr	r3, [pc, #400]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8001fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fdc:	4a63      	ldr	r2, [pc, #396]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8001fde:	f043 0301 	orr.w	r3, r3, #1
 8001fe2:	6713      	str	r3, [r2, #112]	; 0x70
 8001fe4:	e01c      	b.n	8002020 <HAL_RCC_OscConfig+0x324>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b05      	cmp	r3, #5
 8001fec:	d10c      	bne.n	8002008 <HAL_RCC_OscConfig+0x30c>
 8001fee:	4b5f      	ldr	r3, [pc, #380]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8001ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff2:	4a5e      	ldr	r2, [pc, #376]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8001ff4:	f043 0304 	orr.w	r3, r3, #4
 8001ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8001ffa:	4b5c      	ldr	r3, [pc, #368]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8001ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ffe:	4a5b      	ldr	r2, [pc, #364]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	6713      	str	r3, [r2, #112]	; 0x70
 8002006:	e00b      	b.n	8002020 <HAL_RCC_OscConfig+0x324>
 8002008:	4b58      	ldr	r3, [pc, #352]	; (800216c <HAL_RCC_OscConfig+0x470>)
 800200a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800200c:	4a57      	ldr	r2, [pc, #348]	; (800216c <HAL_RCC_OscConfig+0x470>)
 800200e:	f023 0301 	bic.w	r3, r3, #1
 8002012:	6713      	str	r3, [r2, #112]	; 0x70
 8002014:	4b55      	ldr	r3, [pc, #340]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8002016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002018:	4a54      	ldr	r2, [pc, #336]	; (800216c <HAL_RCC_OscConfig+0x470>)
 800201a:	f023 0304 	bic.w	r3, r3, #4
 800201e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d015      	beq.n	8002054 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002028:	f7ff fb9c 	bl	8001764 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800202e:	e00a      	b.n	8002046 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002030:	f7ff fb98 	bl	8001764 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	f241 3288 	movw	r2, #5000	; 0x1388
 800203e:	4293      	cmp	r3, r2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e0cb      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002046:	4b49      	ldr	r3, [pc, #292]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8002048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d0ee      	beq.n	8002030 <HAL_RCC_OscConfig+0x334>
 8002052:	e014      	b.n	800207e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002054:	f7ff fb86 	bl	8001764 <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800205a:	e00a      	b.n	8002072 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800205c:	f7ff fb82 	bl	8001764 <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	f241 3288 	movw	r2, #5000	; 0x1388
 800206a:	4293      	cmp	r3, r2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e0b5      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002072:	4b3e      	ldr	r3, [pc, #248]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8002074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1ee      	bne.n	800205c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800207e:	7dfb      	ldrb	r3, [r7, #23]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d105      	bne.n	8002090 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002084:	4b39      	ldr	r3, [pc, #228]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8002086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002088:	4a38      	ldr	r2, [pc, #224]	; (800216c <HAL_RCC_OscConfig+0x470>)
 800208a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800208e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	2b00      	cmp	r3, #0
 8002096:	f000 80a1 	beq.w	80021dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800209a:	4b34      	ldr	r3, [pc, #208]	; (800216c <HAL_RCC_OscConfig+0x470>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 030c 	and.w	r3, r3, #12
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d05c      	beq.n	8002160 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d141      	bne.n	8002132 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ae:	4b31      	ldr	r3, [pc, #196]	; (8002174 <HAL_RCC_OscConfig+0x478>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b4:	f7ff fb56 	bl	8001764 <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ba:	e008      	b.n	80020ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020bc:	f7ff fb52 	bl	8001764 <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d901      	bls.n	80020ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020ca:	2303      	movs	r3, #3
 80020cc:	e087      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ce:	4b27      	ldr	r3, [pc, #156]	; (800216c <HAL_RCC_OscConfig+0x470>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1f0      	bne.n	80020bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69da      	ldr	r2, [r3, #28]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a1b      	ldr	r3, [r3, #32]
 80020e2:	431a      	orrs	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e8:	019b      	lsls	r3, r3, #6
 80020ea:	431a      	orrs	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f0:	085b      	lsrs	r3, r3, #1
 80020f2:	3b01      	subs	r3, #1
 80020f4:	041b      	lsls	r3, r3, #16
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	061b      	lsls	r3, r3, #24
 80020fe:	491b      	ldr	r1, [pc, #108]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8002100:	4313      	orrs	r3, r2
 8002102:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002104:	4b1b      	ldr	r3, [pc, #108]	; (8002174 <HAL_RCC_OscConfig+0x478>)
 8002106:	2201      	movs	r2, #1
 8002108:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800210a:	f7ff fb2b 	bl	8001764 <HAL_GetTick>
 800210e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002110:	e008      	b.n	8002124 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002112:	f7ff fb27 	bl	8001764 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	2b02      	cmp	r3, #2
 800211e:	d901      	bls.n	8002124 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002120:	2303      	movs	r3, #3
 8002122:	e05c      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002124:	4b11      	ldr	r3, [pc, #68]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d0f0      	beq.n	8002112 <HAL_RCC_OscConfig+0x416>
 8002130:	e054      	b.n	80021dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <HAL_RCC_OscConfig+0x478>)
 8002134:	2200      	movs	r2, #0
 8002136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002138:	f7ff fb14 	bl	8001764 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002140:	f7ff fb10 	bl	8001764 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b02      	cmp	r3, #2
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e045      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <HAL_RCC_OscConfig+0x470>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d1f0      	bne.n	8002140 <HAL_RCC_OscConfig+0x444>
 800215e:	e03d      	b.n	80021dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d107      	bne.n	8002178 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e038      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
 800216c:	40023800 	.word	0x40023800
 8002170:	40007000 	.word	0x40007000
 8002174:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002178:	4b1b      	ldr	r3, [pc, #108]	; (80021e8 <HAL_RCC_OscConfig+0x4ec>)
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	699b      	ldr	r3, [r3, #24]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d028      	beq.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002190:	429a      	cmp	r2, r3
 8002192:	d121      	bne.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219e:	429a      	cmp	r2, r3
 80021a0:	d11a      	bne.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021a8:	4013      	ands	r3, r2
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d111      	bne.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021be:	085b      	lsrs	r3, r3, #1
 80021c0:	3b01      	subs	r3, #1
 80021c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d107      	bne.n	80021d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d001      	beq.n	80021dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e000      	b.n	80021de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021dc:	2300      	movs	r3, #0
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40023800 	.word	0x40023800

080021ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b084      	sub	sp, #16
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e0cc      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002200:	4b68      	ldr	r3, [pc, #416]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0307 	and.w	r3, r3, #7
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	429a      	cmp	r2, r3
 800220c:	d90c      	bls.n	8002228 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220e:	4b65      	ldr	r3, [pc, #404]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002210:	683a      	ldr	r2, [r7, #0]
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002216:	4b63      	ldr	r3, [pc, #396]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	683a      	ldr	r2, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d001      	beq.n	8002228 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e0b8      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 0302 	and.w	r3, r3, #2
 8002230:	2b00      	cmp	r3, #0
 8002232:	d020      	beq.n	8002276 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 0304 	and.w	r3, r3, #4
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002240:	4b59      	ldr	r3, [pc, #356]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	4a58      	ldr	r2, [pc, #352]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800224a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0308 	and.w	r3, r3, #8
 8002254:	2b00      	cmp	r3, #0
 8002256:	d005      	beq.n	8002264 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002258:	4b53      	ldr	r3, [pc, #332]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	4a52      	ldr	r2, [pc, #328]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002262:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002264:	4b50      	ldr	r3, [pc, #320]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	494d      	ldr	r1, [pc, #308]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	4313      	orrs	r3, r2
 8002274:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 0301 	and.w	r3, r3, #1
 800227e:	2b00      	cmp	r3, #0
 8002280:	d044      	beq.n	800230c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	2b01      	cmp	r3, #1
 8002288:	d107      	bne.n	800229a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228a:	4b47      	ldr	r3, [pc, #284]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d119      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e07f      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d003      	beq.n	80022aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022a6:	2b03      	cmp	r3, #3
 80022a8:	d107      	bne.n	80022ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022aa:	4b3f      	ldr	r3, [pc, #252]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d109      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e06f      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ba:	4b3b      	ldr	r3, [pc, #236]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d101      	bne.n	80022ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e067      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ca:	4b37      	ldr	r3, [pc, #220]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f023 0203 	bic.w	r2, r3, #3
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	4934      	ldr	r1, [pc, #208]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022d8:	4313      	orrs	r3, r2
 80022da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022dc:	f7ff fa42 	bl	8001764 <HAL_GetTick>
 80022e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e4:	f7ff fa3e 	bl	8001764 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e04f      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fa:	4b2b      	ldr	r3, [pc, #172]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 020c 	and.w	r2, r3, #12
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	429a      	cmp	r2, r3
 800230a:	d1eb      	bne.n	80022e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800230c:	4b25      	ldr	r3, [pc, #148]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	683a      	ldr	r2, [r7, #0]
 8002316:	429a      	cmp	r2, r3
 8002318:	d20c      	bcs.n	8002334 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231a:	4b22      	ldr	r3, [pc, #136]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	b2d2      	uxtb	r2, r2
 8002320:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002322:	4b20      	ldr	r3, [pc, #128]	; (80023a4 <HAL_RCC_ClockConfig+0x1b8>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d001      	beq.n	8002334 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e032      	b.n	800239a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	d008      	beq.n	8002352 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002340:	4b19      	ldr	r3, [pc, #100]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002342:	689b      	ldr	r3, [r3, #8]
 8002344:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	4916      	ldr	r1, [pc, #88]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800234e:	4313      	orrs	r3, r2
 8002350:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	d009      	beq.n	8002372 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800235e:	4b12      	ldr	r3, [pc, #72]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	691b      	ldr	r3, [r3, #16]
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	490e      	ldr	r1, [pc, #56]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	4313      	orrs	r3, r2
 8002370:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002372:	f000 f821 	bl	80023b8 <HAL_RCC_GetSysClockFreq>
 8002376:	4602      	mov	r2, r0
 8002378:	4b0b      	ldr	r3, [pc, #44]	; (80023a8 <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	f003 030f 	and.w	r3, r3, #15
 8002382:	490a      	ldr	r1, [pc, #40]	; (80023ac <HAL_RCC_ClockConfig+0x1c0>)
 8002384:	5ccb      	ldrb	r3, [r1, r3]
 8002386:	fa22 f303 	lsr.w	r3, r2, r3
 800238a:	4a09      	ldr	r2, [pc, #36]	; (80023b0 <HAL_RCC_ClockConfig+0x1c4>)
 800238c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800238e:	4b09      	ldr	r3, [pc, #36]	; (80023b4 <HAL_RCC_ClockConfig+0x1c8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4618      	mov	r0, r3
 8002394:	f7ff f9a2 	bl	80016dc <HAL_InitTick>

  return HAL_OK;
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40023c00 	.word	0x40023c00
 80023a8:	40023800 	.word	0x40023800
 80023ac:	08005dcc 	.word	0x08005dcc
 80023b0:	20000000 	.word	0x20000000
 80023b4:	20000004 	.word	0x20000004

080023b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023bc:	b094      	sub	sp, #80	; 0x50
 80023be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	647b      	str	r3, [r7, #68]	; 0x44
 80023c4:	2300      	movs	r3, #0
 80023c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023c8:	2300      	movs	r3, #0
 80023ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80023cc:	2300      	movs	r3, #0
 80023ce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023d0:	4b79      	ldr	r3, [pc, #484]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 030c 	and.w	r3, r3, #12
 80023d8:	2b08      	cmp	r3, #8
 80023da:	d00d      	beq.n	80023f8 <HAL_RCC_GetSysClockFreq+0x40>
 80023dc:	2b08      	cmp	r3, #8
 80023de:	f200 80e1 	bhi.w	80025a4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <HAL_RCC_GetSysClockFreq+0x34>
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d003      	beq.n	80023f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80023ea:	e0db      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80023ec:	4b73      	ldr	r3, [pc, #460]	; (80025bc <HAL_RCC_GetSysClockFreq+0x204>)
 80023ee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80023f0:	e0db      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80023f2:	4b73      	ldr	r3, [pc, #460]	; (80025c0 <HAL_RCC_GetSysClockFreq+0x208>)
 80023f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80023f6:	e0d8      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023f8:	4b6f      	ldr	r3, [pc, #444]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002400:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002402:	4b6d      	ldr	r3, [pc, #436]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d063      	beq.n	80024d6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800240e:	4b6a      	ldr	r3, [pc, #424]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	099b      	lsrs	r3, r3, #6
 8002414:	2200      	movs	r2, #0
 8002416:	63bb      	str	r3, [r7, #56]	; 0x38
 8002418:	63fa      	str	r2, [r7, #60]	; 0x3c
 800241a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002420:	633b      	str	r3, [r7, #48]	; 0x30
 8002422:	2300      	movs	r3, #0
 8002424:	637b      	str	r3, [r7, #52]	; 0x34
 8002426:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800242a:	4622      	mov	r2, r4
 800242c:	462b      	mov	r3, r5
 800242e:	f04f 0000 	mov.w	r0, #0
 8002432:	f04f 0100 	mov.w	r1, #0
 8002436:	0159      	lsls	r1, r3, #5
 8002438:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800243c:	0150      	lsls	r0, r2, #5
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4621      	mov	r1, r4
 8002444:	1a51      	subs	r1, r2, r1
 8002446:	6139      	str	r1, [r7, #16]
 8002448:	4629      	mov	r1, r5
 800244a:	eb63 0301 	sbc.w	r3, r3, r1
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	f04f 0200 	mov.w	r2, #0
 8002454:	f04f 0300 	mov.w	r3, #0
 8002458:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800245c:	4659      	mov	r1, fp
 800245e:	018b      	lsls	r3, r1, #6
 8002460:	4651      	mov	r1, sl
 8002462:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002466:	4651      	mov	r1, sl
 8002468:	018a      	lsls	r2, r1, #6
 800246a:	4651      	mov	r1, sl
 800246c:	ebb2 0801 	subs.w	r8, r2, r1
 8002470:	4659      	mov	r1, fp
 8002472:	eb63 0901 	sbc.w	r9, r3, r1
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	f04f 0300 	mov.w	r3, #0
 800247e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002482:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002486:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800248a:	4690      	mov	r8, r2
 800248c:	4699      	mov	r9, r3
 800248e:	4623      	mov	r3, r4
 8002490:	eb18 0303 	adds.w	r3, r8, r3
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	462b      	mov	r3, r5
 8002498:	eb49 0303 	adc.w	r3, r9, r3
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	f04f 0300 	mov.w	r3, #0
 80024a6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024aa:	4629      	mov	r1, r5
 80024ac:	024b      	lsls	r3, r1, #9
 80024ae:	4621      	mov	r1, r4
 80024b0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024b4:	4621      	mov	r1, r4
 80024b6:	024a      	lsls	r2, r1, #9
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024be:	2200      	movs	r2, #0
 80024c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80024c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024c8:	f7fe fb76 	bl	8000bb8 <__aeabi_uldivmod>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4613      	mov	r3, r2
 80024d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024d4:	e058      	b.n	8002588 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024d6:	4b38      	ldr	r3, [pc, #224]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x200>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	099b      	lsrs	r3, r3, #6
 80024dc:	2200      	movs	r2, #0
 80024de:	4618      	mov	r0, r3
 80024e0:	4611      	mov	r1, r2
 80024e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024e6:	623b      	str	r3, [r7, #32]
 80024e8:	2300      	movs	r3, #0
 80024ea:	627b      	str	r3, [r7, #36]	; 0x24
 80024ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80024f0:	4642      	mov	r2, r8
 80024f2:	464b      	mov	r3, r9
 80024f4:	f04f 0000 	mov.w	r0, #0
 80024f8:	f04f 0100 	mov.w	r1, #0
 80024fc:	0159      	lsls	r1, r3, #5
 80024fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002502:	0150      	lsls	r0, r2, #5
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4641      	mov	r1, r8
 800250a:	ebb2 0a01 	subs.w	sl, r2, r1
 800250e:	4649      	mov	r1, r9
 8002510:	eb63 0b01 	sbc.w	fp, r3, r1
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	f04f 0300 	mov.w	r3, #0
 800251c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002520:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002524:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002528:	ebb2 040a 	subs.w	r4, r2, sl
 800252c:	eb63 050b 	sbc.w	r5, r3, fp
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	f04f 0300 	mov.w	r3, #0
 8002538:	00eb      	lsls	r3, r5, #3
 800253a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800253e:	00e2      	lsls	r2, r4, #3
 8002540:	4614      	mov	r4, r2
 8002542:	461d      	mov	r5, r3
 8002544:	4643      	mov	r3, r8
 8002546:	18e3      	adds	r3, r4, r3
 8002548:	603b      	str	r3, [r7, #0]
 800254a:	464b      	mov	r3, r9
 800254c:	eb45 0303 	adc.w	r3, r5, r3
 8002550:	607b      	str	r3, [r7, #4]
 8002552:	f04f 0200 	mov.w	r2, #0
 8002556:	f04f 0300 	mov.w	r3, #0
 800255a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800255e:	4629      	mov	r1, r5
 8002560:	028b      	lsls	r3, r1, #10
 8002562:	4621      	mov	r1, r4
 8002564:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002568:	4621      	mov	r1, r4
 800256a:	028a      	lsls	r2, r1, #10
 800256c:	4610      	mov	r0, r2
 800256e:	4619      	mov	r1, r3
 8002570:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002572:	2200      	movs	r2, #0
 8002574:	61bb      	str	r3, [r7, #24]
 8002576:	61fa      	str	r2, [r7, #28]
 8002578:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800257c:	f7fe fb1c 	bl	8000bb8 <__aeabi_uldivmod>
 8002580:	4602      	mov	r2, r0
 8002582:	460b      	mov	r3, r1
 8002584:	4613      	mov	r3, r2
 8002586:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002588:	4b0b      	ldr	r3, [pc, #44]	; (80025b8 <HAL_RCC_GetSysClockFreq+0x200>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	0c1b      	lsrs	r3, r3, #16
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	3301      	adds	r3, #1
 8002594:	005b      	lsls	r3, r3, #1
 8002596:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002598:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800259a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800259c:	fbb2 f3f3 	udiv	r3, r2, r3
 80025a0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025a2:	e002      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_RCC_GetSysClockFreq+0x204>)
 80025a6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3750      	adds	r7, #80	; 0x50
 80025b0:	46bd      	mov	sp, r7
 80025b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800
 80025bc:	00f42400 	.word	0x00f42400
 80025c0:	007a1200 	.word	0x007a1200

080025c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c8:	4b03      	ldr	r3, [pc, #12]	; (80025d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025ca:	681b      	ldr	r3, [r3, #0]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	46bd      	mov	sp, r7
 80025d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d4:	4770      	bx	lr
 80025d6:	bf00      	nop
 80025d8:	20000000 	.word	0x20000000

080025dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025e0:	f7ff fff0 	bl	80025c4 <HAL_RCC_GetHCLKFreq>
 80025e4:	4602      	mov	r2, r0
 80025e6:	4b05      	ldr	r3, [pc, #20]	; (80025fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	0a9b      	lsrs	r3, r3, #10
 80025ec:	f003 0307 	and.w	r3, r3, #7
 80025f0:	4903      	ldr	r1, [pc, #12]	; (8002600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025f2:	5ccb      	ldrb	r3, [r1, r3]
 80025f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40023800 	.word	0x40023800
 8002600:	08005ddc 	.word	0x08005ddc

08002604 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002608:	f7ff ffdc 	bl	80025c4 <HAL_RCC_GetHCLKFreq>
 800260c:	4602      	mov	r2, r0
 800260e:	4b05      	ldr	r3, [pc, #20]	; (8002624 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	0b5b      	lsrs	r3, r3, #13
 8002614:	f003 0307 	and.w	r3, r3, #7
 8002618:	4903      	ldr	r1, [pc, #12]	; (8002628 <HAL_RCC_GetPCLK2Freq+0x24>)
 800261a:	5ccb      	ldrb	r3, [r1, r3]
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002620:	4618      	mov	r0, r3
 8002622:	bd80      	pop	{r7, pc}
 8002624:	40023800 	.word	0x40023800
 8002628:	08005ddc 	.word	0x08005ddc

0800262c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d101      	bne.n	800263e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e041      	b.n	80026c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002644:	b2db      	uxtb	r3, r3
 8002646:	2b00      	cmp	r3, #0
 8002648:	d106      	bne.n	8002658 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f7fe ff1a 	bl	800148c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2202      	movs	r2, #2
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3304      	adds	r3, #4
 8002668:	4619      	mov	r1, r3
 800266a:	4610      	mov	r0, r2
 800266c:	f000 f82e 	bl	80026cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
	...

080026cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	4a34      	ldr	r2, [pc, #208]	; (80027b0 <TIM_Base_SetConfig+0xe4>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d00f      	beq.n	8002704 <TIM_Base_SetConfig+0x38>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ea:	d00b      	beq.n	8002704 <TIM_Base_SetConfig+0x38>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	4a31      	ldr	r2, [pc, #196]	; (80027b4 <TIM_Base_SetConfig+0xe8>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d007      	beq.n	8002704 <TIM_Base_SetConfig+0x38>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	4a30      	ldr	r2, [pc, #192]	; (80027b8 <TIM_Base_SetConfig+0xec>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d003      	beq.n	8002704 <TIM_Base_SetConfig+0x38>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	4a2f      	ldr	r2, [pc, #188]	; (80027bc <TIM_Base_SetConfig+0xf0>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d108      	bne.n	8002716 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800270a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	4313      	orrs	r3, r2
 8002714:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a25      	ldr	r2, [pc, #148]	; (80027b0 <TIM_Base_SetConfig+0xe4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d01b      	beq.n	8002756 <TIM_Base_SetConfig+0x8a>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002724:	d017      	beq.n	8002756 <TIM_Base_SetConfig+0x8a>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	4a22      	ldr	r2, [pc, #136]	; (80027b4 <TIM_Base_SetConfig+0xe8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d013      	beq.n	8002756 <TIM_Base_SetConfig+0x8a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a21      	ldr	r2, [pc, #132]	; (80027b8 <TIM_Base_SetConfig+0xec>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00f      	beq.n	8002756 <TIM_Base_SetConfig+0x8a>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a20      	ldr	r2, [pc, #128]	; (80027bc <TIM_Base_SetConfig+0xf0>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d00b      	beq.n	8002756 <TIM_Base_SetConfig+0x8a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a1f      	ldr	r2, [pc, #124]	; (80027c0 <TIM_Base_SetConfig+0xf4>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d007      	beq.n	8002756 <TIM_Base_SetConfig+0x8a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a1e      	ldr	r2, [pc, #120]	; (80027c4 <TIM_Base_SetConfig+0xf8>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d003      	beq.n	8002756 <TIM_Base_SetConfig+0x8a>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a1d      	ldr	r2, [pc, #116]	; (80027c8 <TIM_Base_SetConfig+0xfc>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d108      	bne.n	8002768 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800275c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4313      	orrs	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	695b      	ldr	r3, [r3, #20]
 8002772:	4313      	orrs	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	68fa      	ldr	r2, [r7, #12]
 800277a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	689a      	ldr	r2, [r3, #8]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	4a08      	ldr	r2, [pc, #32]	; (80027b0 <TIM_Base_SetConfig+0xe4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d103      	bne.n	800279c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	615a      	str	r2, [r3, #20]
}
 80027a2:	bf00      	nop
 80027a4:	3714      	adds	r7, #20
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop
 80027b0:	40010000 	.word	0x40010000
 80027b4:	40000400 	.word	0x40000400
 80027b8:	40000800 	.word	0x40000800
 80027bc:	40000c00 	.word	0x40000c00
 80027c0:	40014000 	.word	0x40014000
 80027c4:	40014400 	.word	0x40014400
 80027c8:	40014800 	.word	0x40014800

080027cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e03f      	b.n	800285e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7fe fe6c 	bl	80014d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2224      	movs	r2, #36	; 0x24
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800280e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f829 	bl	8002868 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002824:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	695a      	ldr	r2, [r3, #20]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002834:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68da      	ldr	r2, [r3, #12]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002844:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2220      	movs	r2, #32
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2220      	movs	r2, #32
 8002858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800285c:	2300      	movs	r3, #0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800286c:	b0c0      	sub	sp, #256	; 0x100
 800286e:	af00      	add	r7, sp, #0
 8002870:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	691b      	ldr	r3, [r3, #16]
 800287c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002884:	68d9      	ldr	r1, [r3, #12]
 8002886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	ea40 0301 	orr.w	r3, r0, r1
 8002890:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	431a      	orrs	r2, r3
 80028a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028a4:	695b      	ldr	r3, [r3, #20]
 80028a6:	431a      	orrs	r2, r3
 80028a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80028b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80028c0:	f021 010c 	bic.w	r1, r1, #12
 80028c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80028ce:	430b      	orrs	r3, r1
 80028d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	695b      	ldr	r3, [r3, #20]
 80028da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80028de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e2:	6999      	ldr	r1, [r3, #24]
 80028e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	ea40 0301 	orr.w	r3, r0, r1
 80028ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	4b8f      	ldr	r3, [pc, #572]	; (8002b34 <UART_SetConfig+0x2cc>)
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d005      	beq.n	8002908 <UART_SetConfig+0xa0>
 80028fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002900:	681a      	ldr	r2, [r3, #0]
 8002902:	4b8d      	ldr	r3, [pc, #564]	; (8002b38 <UART_SetConfig+0x2d0>)
 8002904:	429a      	cmp	r2, r3
 8002906:	d104      	bne.n	8002912 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002908:	f7ff fe7c 	bl	8002604 <HAL_RCC_GetPCLK2Freq>
 800290c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002910:	e003      	b.n	800291a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002912:	f7ff fe63 	bl	80025dc <HAL_RCC_GetPCLK1Freq>
 8002916:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800291a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800291e:	69db      	ldr	r3, [r3, #28]
 8002920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002924:	f040 810c 	bne.w	8002b40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800292c:	2200      	movs	r2, #0
 800292e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002932:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002936:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800293a:	4622      	mov	r2, r4
 800293c:	462b      	mov	r3, r5
 800293e:	1891      	adds	r1, r2, r2
 8002940:	65b9      	str	r1, [r7, #88]	; 0x58
 8002942:	415b      	adcs	r3, r3
 8002944:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002946:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800294a:	4621      	mov	r1, r4
 800294c:	eb12 0801 	adds.w	r8, r2, r1
 8002950:	4629      	mov	r1, r5
 8002952:	eb43 0901 	adc.w	r9, r3, r1
 8002956:	f04f 0200 	mov.w	r2, #0
 800295a:	f04f 0300 	mov.w	r3, #0
 800295e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002962:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002966:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800296a:	4690      	mov	r8, r2
 800296c:	4699      	mov	r9, r3
 800296e:	4623      	mov	r3, r4
 8002970:	eb18 0303 	adds.w	r3, r8, r3
 8002974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002978:	462b      	mov	r3, r5
 800297a:	eb49 0303 	adc.w	r3, r9, r3
 800297e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800298e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002992:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002996:	460b      	mov	r3, r1
 8002998:	18db      	adds	r3, r3, r3
 800299a:	653b      	str	r3, [r7, #80]	; 0x50
 800299c:	4613      	mov	r3, r2
 800299e:	eb42 0303 	adc.w	r3, r2, r3
 80029a2:	657b      	str	r3, [r7, #84]	; 0x54
 80029a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80029a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80029ac:	f7fe f904 	bl	8000bb8 <__aeabi_uldivmod>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4b61      	ldr	r3, [pc, #388]	; (8002b3c <UART_SetConfig+0x2d4>)
 80029b6:	fba3 2302 	umull	r2, r3, r3, r2
 80029ba:	095b      	lsrs	r3, r3, #5
 80029bc:	011c      	lsls	r4, r3, #4
 80029be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029c2:	2200      	movs	r2, #0
 80029c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80029c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80029cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80029d0:	4642      	mov	r2, r8
 80029d2:	464b      	mov	r3, r9
 80029d4:	1891      	adds	r1, r2, r2
 80029d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80029d8:	415b      	adcs	r3, r3
 80029da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80029e0:	4641      	mov	r1, r8
 80029e2:	eb12 0a01 	adds.w	sl, r2, r1
 80029e6:	4649      	mov	r1, r9
 80029e8:	eb43 0b01 	adc.w	fp, r3, r1
 80029ec:	f04f 0200 	mov.w	r2, #0
 80029f0:	f04f 0300 	mov.w	r3, #0
 80029f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a00:	4692      	mov	sl, r2
 8002a02:	469b      	mov	fp, r3
 8002a04:	4643      	mov	r3, r8
 8002a06:	eb1a 0303 	adds.w	r3, sl, r3
 8002a0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002a0e:	464b      	mov	r3, r9
 8002a10:	eb4b 0303 	adc.w	r3, fp, r3
 8002a14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002a24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002a28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	18db      	adds	r3, r3, r3
 8002a30:	643b      	str	r3, [r7, #64]	; 0x40
 8002a32:	4613      	mov	r3, r2
 8002a34:	eb42 0303 	adc.w	r3, r2, r3
 8002a38:	647b      	str	r3, [r7, #68]	; 0x44
 8002a3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002a3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002a42:	f7fe f8b9 	bl	8000bb8 <__aeabi_uldivmod>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4611      	mov	r1, r2
 8002a4c:	4b3b      	ldr	r3, [pc, #236]	; (8002b3c <UART_SetConfig+0x2d4>)
 8002a4e:	fba3 2301 	umull	r2, r3, r3, r1
 8002a52:	095b      	lsrs	r3, r3, #5
 8002a54:	2264      	movs	r2, #100	; 0x64
 8002a56:	fb02 f303 	mul.w	r3, r2, r3
 8002a5a:	1acb      	subs	r3, r1, r3
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002a62:	4b36      	ldr	r3, [pc, #216]	; (8002b3c <UART_SetConfig+0x2d4>)
 8002a64:	fba3 2302 	umull	r2, r3, r3, r2
 8002a68:	095b      	lsrs	r3, r3, #5
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a70:	441c      	add	r4, r3
 8002a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a76:	2200      	movs	r2, #0
 8002a78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002a7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002a80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002a84:	4642      	mov	r2, r8
 8002a86:	464b      	mov	r3, r9
 8002a88:	1891      	adds	r1, r2, r2
 8002a8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002a8c:	415b      	adcs	r3, r3
 8002a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002a94:	4641      	mov	r1, r8
 8002a96:	1851      	adds	r1, r2, r1
 8002a98:	6339      	str	r1, [r7, #48]	; 0x30
 8002a9a:	4649      	mov	r1, r9
 8002a9c:	414b      	adcs	r3, r1
 8002a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8002aa0:	f04f 0200 	mov.w	r2, #0
 8002aa4:	f04f 0300 	mov.w	r3, #0
 8002aa8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002aac:	4659      	mov	r1, fp
 8002aae:	00cb      	lsls	r3, r1, #3
 8002ab0:	4651      	mov	r1, sl
 8002ab2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ab6:	4651      	mov	r1, sl
 8002ab8:	00ca      	lsls	r2, r1, #3
 8002aba:	4610      	mov	r0, r2
 8002abc:	4619      	mov	r1, r3
 8002abe:	4603      	mov	r3, r0
 8002ac0:	4642      	mov	r2, r8
 8002ac2:	189b      	adds	r3, r3, r2
 8002ac4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ac8:	464b      	mov	r3, r9
 8002aca:	460a      	mov	r2, r1
 8002acc:	eb42 0303 	adc.w	r3, r2, r3
 8002ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ae0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ae4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ae8:	460b      	mov	r3, r1
 8002aea:	18db      	adds	r3, r3, r3
 8002aec:	62bb      	str	r3, [r7, #40]	; 0x28
 8002aee:	4613      	mov	r3, r2
 8002af0:	eb42 0303 	adc.w	r3, r2, r3
 8002af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002af6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002afa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002afe:	f7fe f85b 	bl	8000bb8 <__aeabi_uldivmod>
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	4b0d      	ldr	r3, [pc, #52]	; (8002b3c <UART_SetConfig+0x2d4>)
 8002b08:	fba3 1302 	umull	r1, r3, r3, r2
 8002b0c:	095b      	lsrs	r3, r3, #5
 8002b0e:	2164      	movs	r1, #100	; 0x64
 8002b10:	fb01 f303 	mul.w	r3, r1, r3
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	00db      	lsls	r3, r3, #3
 8002b18:	3332      	adds	r3, #50	; 0x32
 8002b1a:	4a08      	ldr	r2, [pc, #32]	; (8002b3c <UART_SetConfig+0x2d4>)
 8002b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b20:	095b      	lsrs	r3, r3, #5
 8002b22:	f003 0207 	and.w	r2, r3, #7
 8002b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4422      	add	r2, r4
 8002b2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b30:	e105      	b.n	8002d3e <UART_SetConfig+0x4d6>
 8002b32:	bf00      	nop
 8002b34:	40011000 	.word	0x40011000
 8002b38:	40011400 	.word	0x40011400
 8002b3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b44:	2200      	movs	r2, #0
 8002b46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002b4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002b4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002b52:	4642      	mov	r2, r8
 8002b54:	464b      	mov	r3, r9
 8002b56:	1891      	adds	r1, r2, r2
 8002b58:	6239      	str	r1, [r7, #32]
 8002b5a:	415b      	adcs	r3, r3
 8002b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b62:	4641      	mov	r1, r8
 8002b64:	1854      	adds	r4, r2, r1
 8002b66:	4649      	mov	r1, r9
 8002b68:	eb43 0501 	adc.w	r5, r3, r1
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	f04f 0300 	mov.w	r3, #0
 8002b74:	00eb      	lsls	r3, r5, #3
 8002b76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b7a:	00e2      	lsls	r2, r4, #3
 8002b7c:	4614      	mov	r4, r2
 8002b7e:	461d      	mov	r5, r3
 8002b80:	4643      	mov	r3, r8
 8002b82:	18e3      	adds	r3, r4, r3
 8002b84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002b88:	464b      	mov	r3, r9
 8002b8a:	eb45 0303 	adc.w	r3, r5, r3
 8002b8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002b92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002b9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002bae:	4629      	mov	r1, r5
 8002bb0:	008b      	lsls	r3, r1, #2
 8002bb2:	4621      	mov	r1, r4
 8002bb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bb8:	4621      	mov	r1, r4
 8002bba:	008a      	lsls	r2, r1, #2
 8002bbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002bc0:	f7fd fffa 	bl	8000bb8 <__aeabi_uldivmod>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4b60      	ldr	r3, [pc, #384]	; (8002d4c <UART_SetConfig+0x4e4>)
 8002bca:	fba3 2302 	umull	r2, r3, r3, r2
 8002bce:	095b      	lsrs	r3, r3, #5
 8002bd0:	011c      	lsls	r4, r3, #4
 8002bd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002bdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002be0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002be4:	4642      	mov	r2, r8
 8002be6:	464b      	mov	r3, r9
 8002be8:	1891      	adds	r1, r2, r2
 8002bea:	61b9      	str	r1, [r7, #24]
 8002bec:	415b      	adcs	r3, r3
 8002bee:	61fb      	str	r3, [r7, #28]
 8002bf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bf4:	4641      	mov	r1, r8
 8002bf6:	1851      	adds	r1, r2, r1
 8002bf8:	6139      	str	r1, [r7, #16]
 8002bfa:	4649      	mov	r1, r9
 8002bfc:	414b      	adcs	r3, r1
 8002bfe:	617b      	str	r3, [r7, #20]
 8002c00:	f04f 0200 	mov.w	r2, #0
 8002c04:	f04f 0300 	mov.w	r3, #0
 8002c08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002c0c:	4659      	mov	r1, fp
 8002c0e:	00cb      	lsls	r3, r1, #3
 8002c10:	4651      	mov	r1, sl
 8002c12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c16:	4651      	mov	r1, sl
 8002c18:	00ca      	lsls	r2, r1, #3
 8002c1a:	4610      	mov	r0, r2
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4603      	mov	r3, r0
 8002c20:	4642      	mov	r2, r8
 8002c22:	189b      	adds	r3, r3, r2
 8002c24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002c28:	464b      	mov	r3, r9
 8002c2a:	460a      	mov	r2, r1
 8002c2c:	eb42 0303 	adc.w	r3, r2, r3
 8002c30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002c3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002c40:	f04f 0200 	mov.w	r2, #0
 8002c44:	f04f 0300 	mov.w	r3, #0
 8002c48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002c4c:	4649      	mov	r1, r9
 8002c4e:	008b      	lsls	r3, r1, #2
 8002c50:	4641      	mov	r1, r8
 8002c52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c56:	4641      	mov	r1, r8
 8002c58:	008a      	lsls	r2, r1, #2
 8002c5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002c5e:	f7fd ffab 	bl	8000bb8 <__aeabi_uldivmod>
 8002c62:	4602      	mov	r2, r0
 8002c64:	460b      	mov	r3, r1
 8002c66:	4b39      	ldr	r3, [pc, #228]	; (8002d4c <UART_SetConfig+0x4e4>)
 8002c68:	fba3 1302 	umull	r1, r3, r3, r2
 8002c6c:	095b      	lsrs	r3, r3, #5
 8002c6e:	2164      	movs	r1, #100	; 0x64
 8002c70:	fb01 f303 	mul.w	r3, r1, r3
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	3332      	adds	r3, #50	; 0x32
 8002c7a:	4a34      	ldr	r2, [pc, #208]	; (8002d4c <UART_SetConfig+0x4e4>)
 8002c7c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c80:	095b      	lsrs	r3, r3, #5
 8002c82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c86:	441c      	add	r4, r3
 8002c88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	673b      	str	r3, [r7, #112]	; 0x70
 8002c90:	677a      	str	r2, [r7, #116]	; 0x74
 8002c92:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002c96:	4642      	mov	r2, r8
 8002c98:	464b      	mov	r3, r9
 8002c9a:	1891      	adds	r1, r2, r2
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	415b      	adcs	r3, r3
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ca6:	4641      	mov	r1, r8
 8002ca8:	1851      	adds	r1, r2, r1
 8002caa:	6039      	str	r1, [r7, #0]
 8002cac:	4649      	mov	r1, r9
 8002cae:	414b      	adcs	r3, r1
 8002cb0:	607b      	str	r3, [r7, #4]
 8002cb2:	f04f 0200 	mov.w	r2, #0
 8002cb6:	f04f 0300 	mov.w	r3, #0
 8002cba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002cbe:	4659      	mov	r1, fp
 8002cc0:	00cb      	lsls	r3, r1, #3
 8002cc2:	4651      	mov	r1, sl
 8002cc4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cc8:	4651      	mov	r1, sl
 8002cca:	00ca      	lsls	r2, r1, #3
 8002ccc:	4610      	mov	r0, r2
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	4642      	mov	r2, r8
 8002cd4:	189b      	adds	r3, r3, r2
 8002cd6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002cd8:	464b      	mov	r3, r9
 8002cda:	460a      	mov	r2, r1
 8002cdc:	eb42 0303 	adc.w	r3, r2, r3
 8002ce0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	663b      	str	r3, [r7, #96]	; 0x60
 8002cec:	667a      	str	r2, [r7, #100]	; 0x64
 8002cee:	f04f 0200 	mov.w	r2, #0
 8002cf2:	f04f 0300 	mov.w	r3, #0
 8002cf6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002cfa:	4649      	mov	r1, r9
 8002cfc:	008b      	lsls	r3, r1, #2
 8002cfe:	4641      	mov	r1, r8
 8002d00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002d04:	4641      	mov	r1, r8
 8002d06:	008a      	lsls	r2, r1, #2
 8002d08:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002d0c:	f7fd ff54 	bl	8000bb8 <__aeabi_uldivmod>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <UART_SetConfig+0x4e4>)
 8002d16:	fba3 1302 	umull	r1, r3, r3, r2
 8002d1a:	095b      	lsrs	r3, r3, #5
 8002d1c:	2164      	movs	r1, #100	; 0x64
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	011b      	lsls	r3, r3, #4
 8002d26:	3332      	adds	r3, #50	; 0x32
 8002d28:	4a08      	ldr	r2, [pc, #32]	; (8002d4c <UART_SetConfig+0x4e4>)
 8002d2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	f003 020f 	and.w	r2, r3, #15
 8002d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4422      	add	r2, r4
 8002d3c:	609a      	str	r2, [r3, #8]
}
 8002d3e:	bf00      	nop
 8002d40:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002d44:	46bd      	mov	sp, r7
 8002d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d4a:	bf00      	nop
 8002d4c:	51eb851f 	.word	0x51eb851f

08002d50 <findslot>:
 8002d50:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <findslot+0x2c>)
 8002d52:	b510      	push	{r4, lr}
 8002d54:	4604      	mov	r4, r0
 8002d56:	6818      	ldr	r0, [r3, #0]
 8002d58:	b118      	cbz	r0, 8002d62 <findslot+0x12>
 8002d5a:	6983      	ldr	r3, [r0, #24]
 8002d5c:	b90b      	cbnz	r3, 8002d62 <findslot+0x12>
 8002d5e:	f000 faf9 	bl	8003354 <__sinit>
 8002d62:	2c13      	cmp	r4, #19
 8002d64:	d807      	bhi.n	8002d76 <findslot+0x26>
 8002d66:	4806      	ldr	r0, [pc, #24]	; (8002d80 <findslot+0x30>)
 8002d68:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8002d6c:	3201      	adds	r2, #1
 8002d6e:	d002      	beq.n	8002d76 <findslot+0x26>
 8002d70:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002d74:	bd10      	pop	{r4, pc}
 8002d76:	2000      	movs	r0, #0
 8002d78:	e7fc      	b.n	8002d74 <findslot+0x24>
 8002d7a:	bf00      	nop
 8002d7c:	20000014 	.word	0x20000014
 8002d80:	200002a0 	.word	0x200002a0

08002d84 <error>:
 8002d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d86:	4604      	mov	r4, r0
 8002d88:	f000 fa86 	bl	8003298 <__errno>
 8002d8c:	2613      	movs	r6, #19
 8002d8e:	4605      	mov	r5, r0
 8002d90:	2700      	movs	r7, #0
 8002d92:	4630      	mov	r0, r6
 8002d94:	4639      	mov	r1, r7
 8002d96:	beab      	bkpt	0x00ab
 8002d98:	4606      	mov	r6, r0
 8002d9a:	602e      	str	r6, [r5, #0]
 8002d9c:	4620      	mov	r0, r4
 8002d9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002da0 <checkerror>:
 8002da0:	1c43      	adds	r3, r0, #1
 8002da2:	d101      	bne.n	8002da8 <checkerror+0x8>
 8002da4:	f7ff bfee 	b.w	8002d84 <error>
 8002da8:	4770      	bx	lr

08002daa <_swiread>:
 8002daa:	b530      	push	{r4, r5, lr}
 8002dac:	b085      	sub	sp, #20
 8002dae:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002db2:	9203      	str	r2, [sp, #12]
 8002db4:	2406      	movs	r4, #6
 8002db6:	ad01      	add	r5, sp, #4
 8002db8:	4620      	mov	r0, r4
 8002dba:	4629      	mov	r1, r5
 8002dbc:	beab      	bkpt	0x00ab
 8002dbe:	4604      	mov	r4, r0
 8002dc0:	4620      	mov	r0, r4
 8002dc2:	f7ff ffed 	bl	8002da0 <checkerror>
 8002dc6:	b005      	add	sp, #20
 8002dc8:	bd30      	pop	{r4, r5, pc}

08002dca <_read>:
 8002dca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002dcc:	4615      	mov	r5, r2
 8002dce:	9101      	str	r1, [sp, #4]
 8002dd0:	f7ff ffbe 	bl	8002d50 <findslot>
 8002dd4:	9901      	ldr	r1, [sp, #4]
 8002dd6:	4604      	mov	r4, r0
 8002dd8:	b938      	cbnz	r0, 8002dea <_read+0x20>
 8002dda:	f000 fa5d 	bl	8003298 <__errno>
 8002dde:	2309      	movs	r3, #9
 8002de0:	6003      	str	r3, [r0, #0]
 8002de2:	f04f 30ff 	mov.w	r0, #4294967295
 8002de6:	b003      	add	sp, #12
 8002de8:	bd30      	pop	{r4, r5, pc}
 8002dea:	6800      	ldr	r0, [r0, #0]
 8002dec:	462a      	mov	r2, r5
 8002dee:	f7ff ffdc 	bl	8002daa <_swiread>
 8002df2:	1c43      	adds	r3, r0, #1
 8002df4:	d0f7      	beq.n	8002de6 <_read+0x1c>
 8002df6:	6863      	ldr	r3, [r4, #4]
 8002df8:	1a2a      	subs	r2, r5, r0
 8002dfa:	4413      	add	r3, r2
 8002dfc:	6063      	str	r3, [r4, #4]
 8002dfe:	4610      	mov	r0, r2
 8002e00:	e7f1      	b.n	8002de6 <_read+0x1c>

08002e02 <_swilseek>:
 8002e02:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002e04:	460c      	mov	r4, r1
 8002e06:	4616      	mov	r6, r2
 8002e08:	f7ff ffa2 	bl	8002d50 <findslot>
 8002e0c:	4605      	mov	r5, r0
 8002e0e:	b940      	cbnz	r0, 8002e22 <_swilseek+0x20>
 8002e10:	f000 fa42 	bl	8003298 <__errno>
 8002e14:	2309      	movs	r3, #9
 8002e16:	6003      	str	r3, [r0, #0]
 8002e18:	f04f 34ff 	mov.w	r4, #4294967295
 8002e1c:	4620      	mov	r0, r4
 8002e1e:	b003      	add	sp, #12
 8002e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002e22:	2e02      	cmp	r6, #2
 8002e24:	d903      	bls.n	8002e2e <_swilseek+0x2c>
 8002e26:	f000 fa37 	bl	8003298 <__errno>
 8002e2a:	2316      	movs	r3, #22
 8002e2c:	e7f3      	b.n	8002e16 <_swilseek+0x14>
 8002e2e:	2e01      	cmp	r6, #1
 8002e30:	d112      	bne.n	8002e58 <_swilseek+0x56>
 8002e32:	6843      	ldr	r3, [r0, #4]
 8002e34:	18e4      	adds	r4, r4, r3
 8002e36:	d4f6      	bmi.n	8002e26 <_swilseek+0x24>
 8002e38:	682b      	ldr	r3, [r5, #0]
 8002e3a:	260a      	movs	r6, #10
 8002e3c:	e9cd 3400 	strd	r3, r4, [sp]
 8002e40:	466f      	mov	r7, sp
 8002e42:	4630      	mov	r0, r6
 8002e44:	4639      	mov	r1, r7
 8002e46:	beab      	bkpt	0x00ab
 8002e48:	4606      	mov	r6, r0
 8002e4a:	4630      	mov	r0, r6
 8002e4c:	f7ff ffa8 	bl	8002da0 <checkerror>
 8002e50:	2800      	cmp	r0, #0
 8002e52:	dbe1      	blt.n	8002e18 <_swilseek+0x16>
 8002e54:	606c      	str	r4, [r5, #4]
 8002e56:	e7e1      	b.n	8002e1c <_swilseek+0x1a>
 8002e58:	2e02      	cmp	r6, #2
 8002e5a:	d1ed      	bne.n	8002e38 <_swilseek+0x36>
 8002e5c:	6803      	ldr	r3, [r0, #0]
 8002e5e:	9300      	str	r3, [sp, #0]
 8002e60:	260c      	movs	r6, #12
 8002e62:	466f      	mov	r7, sp
 8002e64:	4630      	mov	r0, r6
 8002e66:	4639      	mov	r1, r7
 8002e68:	beab      	bkpt	0x00ab
 8002e6a:	4606      	mov	r6, r0
 8002e6c:	4630      	mov	r0, r6
 8002e6e:	f7ff ff97 	bl	8002da0 <checkerror>
 8002e72:	1c43      	adds	r3, r0, #1
 8002e74:	d0d0      	beq.n	8002e18 <_swilseek+0x16>
 8002e76:	4404      	add	r4, r0
 8002e78:	e7de      	b.n	8002e38 <_swilseek+0x36>

08002e7a <_lseek>:
 8002e7a:	f7ff bfc2 	b.w	8002e02 <_swilseek>

08002e7e <_swiwrite>:
 8002e7e:	b530      	push	{r4, r5, lr}
 8002e80:	b085      	sub	sp, #20
 8002e82:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8002e86:	9203      	str	r2, [sp, #12]
 8002e88:	2405      	movs	r4, #5
 8002e8a:	ad01      	add	r5, sp, #4
 8002e8c:	4620      	mov	r0, r4
 8002e8e:	4629      	mov	r1, r5
 8002e90:	beab      	bkpt	0x00ab
 8002e92:	4604      	mov	r4, r0
 8002e94:	4620      	mov	r0, r4
 8002e96:	f7ff ff83 	bl	8002da0 <checkerror>
 8002e9a:	b005      	add	sp, #20
 8002e9c:	bd30      	pop	{r4, r5, pc}

08002e9e <_write>:
 8002e9e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002ea0:	4615      	mov	r5, r2
 8002ea2:	9101      	str	r1, [sp, #4]
 8002ea4:	f7ff ff54 	bl	8002d50 <findslot>
 8002ea8:	9901      	ldr	r1, [sp, #4]
 8002eaa:	4604      	mov	r4, r0
 8002eac:	b930      	cbnz	r0, 8002ebc <_write+0x1e>
 8002eae:	f000 f9f3 	bl	8003298 <__errno>
 8002eb2:	2309      	movs	r3, #9
 8002eb4:	6003      	str	r3, [r0, #0]
 8002eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8002eba:	e012      	b.n	8002ee2 <_write+0x44>
 8002ebc:	6800      	ldr	r0, [r0, #0]
 8002ebe:	462a      	mov	r2, r5
 8002ec0:	f7ff ffdd 	bl	8002e7e <_swiwrite>
 8002ec4:	2800      	cmp	r0, #0
 8002ec6:	dbf6      	blt.n	8002eb6 <_write+0x18>
 8002ec8:	6862      	ldr	r2, [r4, #4]
 8002eca:	1a2b      	subs	r3, r5, r0
 8002ecc:	441a      	add	r2, r3
 8002ece:	42a8      	cmp	r0, r5
 8002ed0:	6062      	str	r2, [r4, #4]
 8002ed2:	d105      	bne.n	8002ee0 <_write+0x42>
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	b003      	add	sp, #12
 8002ed8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002edc:	f7ff bf52 	b.w	8002d84 <error>
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	b003      	add	sp, #12
 8002ee4:	bd30      	pop	{r4, r5, pc}

08002ee6 <_swiclose>:
 8002ee6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002ee8:	2402      	movs	r4, #2
 8002eea:	9001      	str	r0, [sp, #4]
 8002eec:	ad01      	add	r5, sp, #4
 8002eee:	4620      	mov	r0, r4
 8002ef0:	4629      	mov	r1, r5
 8002ef2:	beab      	bkpt	0x00ab
 8002ef4:	4604      	mov	r4, r0
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	f7ff ff52 	bl	8002da0 <checkerror>
 8002efc:	b003      	add	sp, #12
 8002efe:	bd30      	pop	{r4, r5, pc}

08002f00 <_close>:
 8002f00:	b538      	push	{r3, r4, r5, lr}
 8002f02:	4605      	mov	r5, r0
 8002f04:	f7ff ff24 	bl	8002d50 <findslot>
 8002f08:	4604      	mov	r4, r0
 8002f0a:	b930      	cbnz	r0, 8002f1a <_close+0x1a>
 8002f0c:	f000 f9c4 	bl	8003298 <__errno>
 8002f10:	2309      	movs	r3, #9
 8002f12:	6003      	str	r3, [r0, #0]
 8002f14:	f04f 30ff 	mov.w	r0, #4294967295
 8002f18:	bd38      	pop	{r3, r4, r5, pc}
 8002f1a:	3d01      	subs	r5, #1
 8002f1c:	2d01      	cmp	r5, #1
 8002f1e:	d809      	bhi.n	8002f34 <_close+0x34>
 8002f20:	4b09      	ldr	r3, [pc, #36]	; (8002f48 <_close+0x48>)
 8002f22:	689a      	ldr	r2, [r3, #8]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d104      	bne.n	8002f34 <_close+0x34>
 8002f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f2e:	6003      	str	r3, [r0, #0]
 8002f30:	2000      	movs	r0, #0
 8002f32:	e7f1      	b.n	8002f18 <_close+0x18>
 8002f34:	6820      	ldr	r0, [r4, #0]
 8002f36:	f7ff ffd6 	bl	8002ee6 <_swiclose>
 8002f3a:	2800      	cmp	r0, #0
 8002f3c:	d1ec      	bne.n	8002f18 <_close+0x18>
 8002f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f42:	6023      	str	r3, [r4, #0]
 8002f44:	e7e8      	b.n	8002f18 <_close+0x18>
 8002f46:	bf00      	nop
 8002f48:	200002a0 	.word	0x200002a0

08002f4c <_getpid>:
 8002f4c:	2001      	movs	r0, #1
 8002f4e:	4770      	bx	lr

08002f50 <_swistat>:
 8002f50:	b570      	push	{r4, r5, r6, lr}
 8002f52:	460c      	mov	r4, r1
 8002f54:	f7ff fefc 	bl	8002d50 <findslot>
 8002f58:	4605      	mov	r5, r0
 8002f5a:	b930      	cbnz	r0, 8002f6a <_swistat+0x1a>
 8002f5c:	f000 f99c 	bl	8003298 <__errno>
 8002f60:	2309      	movs	r3, #9
 8002f62:	6003      	str	r3, [r0, #0]
 8002f64:	f04f 30ff 	mov.w	r0, #4294967295
 8002f68:	bd70      	pop	{r4, r5, r6, pc}
 8002f6a:	6863      	ldr	r3, [r4, #4]
 8002f6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f70:	6063      	str	r3, [r4, #4]
 8002f72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f76:	64a3      	str	r3, [r4, #72]	; 0x48
 8002f78:	260c      	movs	r6, #12
 8002f7a:	4630      	mov	r0, r6
 8002f7c:	4629      	mov	r1, r5
 8002f7e:	beab      	bkpt	0x00ab
 8002f80:	4605      	mov	r5, r0
 8002f82:	4628      	mov	r0, r5
 8002f84:	f7ff ff0c 	bl	8002da0 <checkerror>
 8002f88:	1c43      	adds	r3, r0, #1
 8002f8a:	bf1c      	itt	ne
 8002f8c:	6120      	strne	r0, [r4, #16]
 8002f8e:	2000      	movne	r0, #0
 8002f90:	e7ea      	b.n	8002f68 <_swistat+0x18>

08002f92 <_fstat>:
 8002f92:	460b      	mov	r3, r1
 8002f94:	b510      	push	{r4, lr}
 8002f96:	2100      	movs	r1, #0
 8002f98:	4604      	mov	r4, r0
 8002f9a:	2258      	movs	r2, #88	; 0x58
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f000 fa9e 	bl	80034de <memset>
 8002fa2:	4601      	mov	r1, r0
 8002fa4:	4620      	mov	r0, r4
 8002fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002faa:	f7ff bfd1 	b.w	8002f50 <_swistat>

08002fae <_stat>:
 8002fae:	b538      	push	{r3, r4, r5, lr}
 8002fb0:	460d      	mov	r5, r1
 8002fb2:	4604      	mov	r4, r0
 8002fb4:	2258      	movs	r2, #88	; 0x58
 8002fb6:	2100      	movs	r1, #0
 8002fb8:	4628      	mov	r0, r5
 8002fba:	f000 fa90 	bl	80034de <memset>
 8002fbe:	4620      	mov	r0, r4
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	f000 f811 	bl	8002fe8 <_swiopen>
 8002fc6:	1c43      	adds	r3, r0, #1
 8002fc8:	4604      	mov	r4, r0
 8002fca:	d00b      	beq.n	8002fe4 <_stat+0x36>
 8002fcc:	686b      	ldr	r3, [r5, #4]
 8002fce:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002fd2:	606b      	str	r3, [r5, #4]
 8002fd4:	4629      	mov	r1, r5
 8002fd6:	f7ff ffbb 	bl	8002f50 <_swistat>
 8002fda:	4605      	mov	r5, r0
 8002fdc:	4620      	mov	r0, r4
 8002fde:	f7ff ff8f 	bl	8002f00 <_close>
 8002fe2:	462c      	mov	r4, r5
 8002fe4:	4620      	mov	r0, r4
 8002fe6:	bd38      	pop	{r3, r4, r5, pc}

08002fe8 <_swiopen>:
 8002fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002fec:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 8003098 <_swiopen+0xb0>
 8002ff0:	b097      	sub	sp, #92	; 0x5c
 8002ff2:	4607      	mov	r7, r0
 8002ff4:	460e      	mov	r6, r1
 8002ff6:	2500      	movs	r5, #0
 8002ff8:	f858 4035 	ldr.w	r4, [r8, r5, lsl #3]
 8002ffc:	1c61      	adds	r1, r4, #1
 8002ffe:	d037      	beq.n	8003070 <_swiopen+0x88>
 8003000:	3501      	adds	r5, #1
 8003002:	2d14      	cmp	r5, #20
 8003004:	d1f8      	bne.n	8002ff8 <_swiopen+0x10>
 8003006:	f000 f947 	bl	8003298 <__errno>
 800300a:	2318      	movs	r3, #24
 800300c:	6003      	str	r3, [r0, #0]
 800300e:	f04f 34ff 	mov.w	r4, #4294967295
 8003012:	e03d      	b.n	8003090 <_swiopen+0xa8>
 8003014:	f3c6 4400 	ubfx	r4, r6, #16, #1
 8003018:	f240 6301 	movw	r3, #1537	; 0x601
 800301c:	07b2      	lsls	r2, r6, #30
 800301e:	bf48      	it	mi
 8003020:	f044 0402 	orrmi.w	r4, r4, #2
 8003024:	421e      	tst	r6, r3
 8003026:	bf18      	it	ne
 8003028:	f044 0404 	orrne.w	r4, r4, #4
 800302c:	0733      	lsls	r3, r6, #28
 800302e:	bf48      	it	mi
 8003030:	f024 0404 	bicmi.w	r4, r4, #4
 8003034:	4638      	mov	r0, r7
 8003036:	bf48      	it	mi
 8003038:	f044 0408 	orrmi.w	r4, r4, #8
 800303c:	9700      	str	r7, [sp, #0]
 800303e:	f7fd f8cf 	bl	80001e0 <strlen>
 8003042:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8003046:	2401      	movs	r4, #1
 8003048:	4620      	mov	r0, r4
 800304a:	4649      	mov	r1, r9
 800304c:	beab      	bkpt	0x00ab
 800304e:	4604      	mov	r4, r0
 8003050:	2c00      	cmp	r4, #0
 8003052:	db08      	blt.n	8003066 <_swiopen+0x7e>
 8003054:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8003058:	eb08 08c5 	add.w	r8, r8, r5, lsl #3
 800305c:	2300      	movs	r3, #0
 800305e:	f8c8 3004 	str.w	r3, [r8, #4]
 8003062:	462c      	mov	r4, r5
 8003064:	e014      	b.n	8003090 <_swiopen+0xa8>
 8003066:	4620      	mov	r0, r4
 8003068:	f7ff fe8c 	bl	8002d84 <error>
 800306c:	4604      	mov	r4, r0
 800306e:	e00f      	b.n	8003090 <_swiopen+0xa8>
 8003070:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8003074:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 8003078:	46e9      	mov	r9, sp
 800307a:	d1cb      	bne.n	8003014 <_swiopen+0x2c>
 800307c:	4649      	mov	r1, r9
 800307e:	4638      	mov	r0, r7
 8003080:	f7ff ff95 	bl	8002fae <_stat>
 8003084:	3001      	adds	r0, #1
 8003086:	d0c5      	beq.n	8003014 <_swiopen+0x2c>
 8003088:	f000 f906 	bl	8003298 <__errno>
 800308c:	2311      	movs	r3, #17
 800308e:	6003      	str	r3, [r0, #0]
 8003090:	4620      	mov	r0, r4
 8003092:	b017      	add	sp, #92	; 0x5c
 8003094:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003098:	200002a0 	.word	0x200002a0

0800309c <_get_semihosting_exts>:
 800309c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80030a0:	4606      	mov	r6, r0
 80030a2:	460f      	mov	r7, r1
 80030a4:	482a      	ldr	r0, [pc, #168]	; (8003150 <_get_semihosting_exts+0xb4>)
 80030a6:	2100      	movs	r1, #0
 80030a8:	4615      	mov	r5, r2
 80030aa:	f7ff ff9d 	bl	8002fe8 <_swiopen>
 80030ae:	462a      	mov	r2, r5
 80030b0:	4604      	mov	r4, r0
 80030b2:	2100      	movs	r1, #0
 80030b4:	4630      	mov	r0, r6
 80030b6:	f000 fa12 	bl	80034de <memset>
 80030ba:	1c63      	adds	r3, r4, #1
 80030bc:	d016      	beq.n	80030ec <_get_semihosting_exts+0x50>
 80030be:	4620      	mov	r0, r4
 80030c0:	f7ff fe46 	bl	8002d50 <findslot>
 80030c4:	f04f 090c 	mov.w	r9, #12
 80030c8:	4680      	mov	r8, r0
 80030ca:	4648      	mov	r0, r9
 80030cc:	4641      	mov	r1, r8
 80030ce:	beab      	bkpt	0x00ab
 80030d0:	4680      	mov	r8, r0
 80030d2:	4640      	mov	r0, r8
 80030d4:	f7ff fe64 	bl	8002da0 <checkerror>
 80030d8:	2803      	cmp	r0, #3
 80030da:	dd02      	ble.n	80030e2 <_get_semihosting_exts+0x46>
 80030dc:	1ec3      	subs	r3, r0, #3
 80030de:	42ab      	cmp	r3, r5
 80030e0:	dc08      	bgt.n	80030f4 <_get_semihosting_exts+0x58>
 80030e2:	4620      	mov	r0, r4
 80030e4:	f7ff ff0c 	bl	8002f00 <_close>
 80030e8:	f04f 34ff 	mov.w	r4, #4294967295
 80030ec:	4620      	mov	r0, r4
 80030ee:	b003      	add	sp, #12
 80030f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80030f4:	2204      	movs	r2, #4
 80030f6:	eb0d 0102 	add.w	r1, sp, r2
 80030fa:	4620      	mov	r0, r4
 80030fc:	f7ff fe65 	bl	8002dca <_read>
 8003100:	2803      	cmp	r0, #3
 8003102:	ddee      	ble.n	80030e2 <_get_semihosting_exts+0x46>
 8003104:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003108:	2b53      	cmp	r3, #83	; 0x53
 800310a:	d1ea      	bne.n	80030e2 <_get_semihosting_exts+0x46>
 800310c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8003110:	2b48      	cmp	r3, #72	; 0x48
 8003112:	d1e6      	bne.n	80030e2 <_get_semihosting_exts+0x46>
 8003114:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003118:	2b46      	cmp	r3, #70	; 0x46
 800311a:	d1e2      	bne.n	80030e2 <_get_semihosting_exts+0x46>
 800311c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003120:	2b42      	cmp	r3, #66	; 0x42
 8003122:	d1de      	bne.n	80030e2 <_get_semihosting_exts+0x46>
 8003124:	2201      	movs	r2, #1
 8003126:	4639      	mov	r1, r7
 8003128:	4620      	mov	r0, r4
 800312a:	f7ff fe6a 	bl	8002e02 <_swilseek>
 800312e:	2800      	cmp	r0, #0
 8003130:	dbd7      	blt.n	80030e2 <_get_semihosting_exts+0x46>
 8003132:	462a      	mov	r2, r5
 8003134:	4631      	mov	r1, r6
 8003136:	4620      	mov	r0, r4
 8003138:	f7ff fe47 	bl	8002dca <_read>
 800313c:	4605      	mov	r5, r0
 800313e:	4620      	mov	r0, r4
 8003140:	f7ff fede 	bl	8002f00 <_close>
 8003144:	4628      	mov	r0, r5
 8003146:	f7ff fe2b 	bl	8002da0 <checkerror>
 800314a:	4604      	mov	r4, r0
 800314c:	e7ce      	b.n	80030ec <_get_semihosting_exts+0x50>
 800314e:	bf00      	nop
 8003150:	08005de4 	.word	0x08005de4

08003154 <initialise_semihosting_exts>:
 8003154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003156:	4d0a      	ldr	r5, [pc, #40]	; (8003180 <initialise_semihosting_exts+0x2c>)
 8003158:	4c0a      	ldr	r4, [pc, #40]	; (8003184 <initialise_semihosting_exts+0x30>)
 800315a:	2100      	movs	r1, #0
 800315c:	2201      	movs	r2, #1
 800315e:	a801      	add	r0, sp, #4
 8003160:	6029      	str	r1, [r5, #0]
 8003162:	6022      	str	r2, [r4, #0]
 8003164:	f7ff ff9a 	bl	800309c <_get_semihosting_exts>
 8003168:	2800      	cmp	r0, #0
 800316a:	dd07      	ble.n	800317c <initialise_semihosting_exts+0x28>
 800316c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8003170:	f003 0201 	and.w	r2, r3, #1
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	602a      	str	r2, [r5, #0]
 800317a:	6023      	str	r3, [r4, #0]
 800317c:	b003      	add	sp, #12
 800317e:	bd30      	pop	{r4, r5, pc}
 8003180:	2000000c 	.word	0x2000000c
 8003184:	20000010 	.word	0x20000010

08003188 <_has_ext_stdout_stderr>:
 8003188:	b510      	push	{r4, lr}
 800318a:	4c04      	ldr	r4, [pc, #16]	; (800319c <_has_ext_stdout_stderr+0x14>)
 800318c:	6823      	ldr	r3, [r4, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	da01      	bge.n	8003196 <_has_ext_stdout_stderr+0xe>
 8003192:	f7ff ffdf 	bl	8003154 <initialise_semihosting_exts>
 8003196:	6820      	ldr	r0, [r4, #0]
 8003198:	bd10      	pop	{r4, pc}
 800319a:	bf00      	nop
 800319c:	20000010 	.word	0x20000010

080031a0 <initialise_monitor_handles>:
 80031a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031a4:	b085      	sub	sp, #20
 80031a6:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8003258 <initialise_monitor_handles+0xb8>
 80031aa:	f8cd 9004 	str.w	r9, [sp, #4]
 80031ae:	2303      	movs	r3, #3
 80031b0:	2400      	movs	r4, #0
 80031b2:	9303      	str	r3, [sp, #12]
 80031b4:	af01      	add	r7, sp, #4
 80031b6:	9402      	str	r4, [sp, #8]
 80031b8:	2501      	movs	r5, #1
 80031ba:	4628      	mov	r0, r5
 80031bc:	4639      	mov	r1, r7
 80031be:	beab      	bkpt	0x00ab
 80031c0:	4605      	mov	r5, r0
 80031c2:	f8df 8098 	ldr.w	r8, [pc, #152]	; 800325c <initialise_monitor_handles+0xbc>
 80031c6:	4623      	mov	r3, r4
 80031c8:	4c20      	ldr	r4, [pc, #128]	; (800324c <initialise_monitor_handles+0xac>)
 80031ca:	f8c8 5000 	str.w	r5, [r8]
 80031ce:	f04f 32ff 	mov.w	r2, #4294967295
 80031d2:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 80031d6:	3301      	adds	r3, #1
 80031d8:	2b14      	cmp	r3, #20
 80031da:	d1fa      	bne.n	80031d2 <initialise_monitor_handles+0x32>
 80031dc:	f7ff ffd4 	bl	8003188 <_has_ext_stdout_stderr>
 80031e0:	4d1b      	ldr	r5, [pc, #108]	; (8003250 <initialise_monitor_handles+0xb0>)
 80031e2:	b1d0      	cbz	r0, 800321a <initialise_monitor_handles+0x7a>
 80031e4:	f04f 0a03 	mov.w	sl, #3
 80031e8:	2304      	movs	r3, #4
 80031ea:	f8cd 9004 	str.w	r9, [sp, #4]
 80031ee:	2601      	movs	r6, #1
 80031f0:	f8cd a00c 	str.w	sl, [sp, #12]
 80031f4:	9302      	str	r3, [sp, #8]
 80031f6:	4630      	mov	r0, r6
 80031f8:	4639      	mov	r1, r7
 80031fa:	beab      	bkpt	0x00ab
 80031fc:	4683      	mov	fp, r0
 80031fe:	4b15      	ldr	r3, [pc, #84]	; (8003254 <initialise_monitor_handles+0xb4>)
 8003200:	f8cd 9004 	str.w	r9, [sp, #4]
 8003204:	f8c3 b000 	str.w	fp, [r3]
 8003208:	2308      	movs	r3, #8
 800320a:	f8cd a00c 	str.w	sl, [sp, #12]
 800320e:	9302      	str	r3, [sp, #8]
 8003210:	4630      	mov	r0, r6
 8003212:	4639      	mov	r1, r7
 8003214:	beab      	bkpt	0x00ab
 8003216:	4606      	mov	r6, r0
 8003218:	602e      	str	r6, [r5, #0]
 800321a:	682b      	ldr	r3, [r5, #0]
 800321c:	3301      	adds	r3, #1
 800321e:	bf02      	ittt	eq
 8003220:	4b0c      	ldreq	r3, [pc, #48]	; (8003254 <initialise_monitor_handles+0xb4>)
 8003222:	681b      	ldreq	r3, [r3, #0]
 8003224:	602b      	streq	r3, [r5, #0]
 8003226:	2600      	movs	r6, #0
 8003228:	f8d8 3000 	ldr.w	r3, [r8]
 800322c:	6023      	str	r3, [r4, #0]
 800322e:	6066      	str	r6, [r4, #4]
 8003230:	f7ff ffaa 	bl	8003188 <_has_ext_stdout_stderr>
 8003234:	b130      	cbz	r0, 8003244 <initialise_monitor_handles+0xa4>
 8003236:	4b07      	ldr	r3, [pc, #28]	; (8003254 <initialise_monitor_handles+0xb4>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800323e:	682b      	ldr	r3, [r5, #0]
 8003240:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8003244:	b005      	add	sp, #20
 8003246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800324a:	bf00      	nop
 800324c:	200002a0 	.word	0x200002a0
 8003250:	20000294 	.word	0x20000294
 8003254:	2000029c 	.word	0x2000029c
 8003258:	08005dfa 	.word	0x08005dfa
 800325c:	20000298 	.word	0x20000298

08003260 <_isatty>:
 8003260:	b570      	push	{r4, r5, r6, lr}
 8003262:	f7ff fd75 	bl	8002d50 <findslot>
 8003266:	2509      	movs	r5, #9
 8003268:	4604      	mov	r4, r0
 800326a:	b920      	cbnz	r0, 8003276 <_isatty+0x16>
 800326c:	f000 f814 	bl	8003298 <__errno>
 8003270:	6005      	str	r5, [r0, #0]
 8003272:	4620      	mov	r0, r4
 8003274:	bd70      	pop	{r4, r5, r6, pc}
 8003276:	4628      	mov	r0, r5
 8003278:	4621      	mov	r1, r4
 800327a:	beab      	bkpt	0x00ab
 800327c:	4604      	mov	r4, r0
 800327e:	2c01      	cmp	r4, #1
 8003280:	d0f7      	beq.n	8003272 <_isatty+0x12>
 8003282:	f000 f809 	bl	8003298 <__errno>
 8003286:	2400      	movs	r4, #0
 8003288:	4605      	mov	r5, r0
 800328a:	2613      	movs	r6, #19
 800328c:	4630      	mov	r0, r6
 800328e:	4621      	mov	r1, r4
 8003290:	beab      	bkpt	0x00ab
 8003292:	4606      	mov	r6, r0
 8003294:	602e      	str	r6, [r5, #0]
 8003296:	e7ec      	b.n	8003272 <_isatty+0x12>

08003298 <__errno>:
 8003298:	4b01      	ldr	r3, [pc, #4]	; (80032a0 <__errno+0x8>)
 800329a:	6818      	ldr	r0, [r3, #0]
 800329c:	4770      	bx	lr
 800329e:	bf00      	nop
 80032a0:	20000014 	.word	0x20000014

080032a4 <std>:
 80032a4:	2300      	movs	r3, #0
 80032a6:	b510      	push	{r4, lr}
 80032a8:	4604      	mov	r4, r0
 80032aa:	e9c0 3300 	strd	r3, r3, [r0]
 80032ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80032b2:	6083      	str	r3, [r0, #8]
 80032b4:	8181      	strh	r1, [r0, #12]
 80032b6:	6643      	str	r3, [r0, #100]	; 0x64
 80032b8:	81c2      	strh	r2, [r0, #14]
 80032ba:	6183      	str	r3, [r0, #24]
 80032bc:	4619      	mov	r1, r3
 80032be:	2208      	movs	r2, #8
 80032c0:	305c      	adds	r0, #92	; 0x5c
 80032c2:	f000 f90c 	bl	80034de <memset>
 80032c6:	4b05      	ldr	r3, [pc, #20]	; (80032dc <std+0x38>)
 80032c8:	6263      	str	r3, [r4, #36]	; 0x24
 80032ca:	4b05      	ldr	r3, [pc, #20]	; (80032e0 <std+0x3c>)
 80032cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80032ce:	4b05      	ldr	r3, [pc, #20]	; (80032e4 <std+0x40>)
 80032d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80032d2:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <std+0x44>)
 80032d4:	6224      	str	r4, [r4, #32]
 80032d6:	6323      	str	r3, [r4, #48]	; 0x30
 80032d8:	bd10      	pop	{r4, pc}
 80032da:	bf00      	nop
 80032dc:	08003f3d 	.word	0x08003f3d
 80032e0:	08003f5f 	.word	0x08003f5f
 80032e4:	08003f97 	.word	0x08003f97
 80032e8:	08003fbb 	.word	0x08003fbb

080032ec <_cleanup_r>:
 80032ec:	4901      	ldr	r1, [pc, #4]	; (80032f4 <_cleanup_r+0x8>)
 80032ee:	f000 b8af 	b.w	8003450 <_fwalk_reent>
 80032f2:	bf00      	nop
 80032f4:	08004e09 	.word	0x08004e09

080032f8 <__sfmoreglue>:
 80032f8:	b570      	push	{r4, r5, r6, lr}
 80032fa:	2268      	movs	r2, #104	; 0x68
 80032fc:	1e4d      	subs	r5, r1, #1
 80032fe:	4355      	muls	r5, r2
 8003300:	460e      	mov	r6, r1
 8003302:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003306:	f000 f913 	bl	8003530 <_malloc_r>
 800330a:	4604      	mov	r4, r0
 800330c:	b140      	cbz	r0, 8003320 <__sfmoreglue+0x28>
 800330e:	2100      	movs	r1, #0
 8003310:	e9c0 1600 	strd	r1, r6, [r0]
 8003314:	300c      	adds	r0, #12
 8003316:	60a0      	str	r0, [r4, #8]
 8003318:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800331c:	f000 f8df 	bl	80034de <memset>
 8003320:	4620      	mov	r0, r4
 8003322:	bd70      	pop	{r4, r5, r6, pc}

08003324 <__sfp_lock_acquire>:
 8003324:	4801      	ldr	r0, [pc, #4]	; (800332c <__sfp_lock_acquire+0x8>)
 8003326:	f000 b8d8 	b.w	80034da <__retarget_lock_acquire_recursive>
 800332a:	bf00      	nop
 800332c:	20000341 	.word	0x20000341

08003330 <__sfp_lock_release>:
 8003330:	4801      	ldr	r0, [pc, #4]	; (8003338 <__sfp_lock_release+0x8>)
 8003332:	f000 b8d3 	b.w	80034dc <__retarget_lock_release_recursive>
 8003336:	bf00      	nop
 8003338:	20000341 	.word	0x20000341

0800333c <__sinit_lock_acquire>:
 800333c:	4801      	ldr	r0, [pc, #4]	; (8003344 <__sinit_lock_acquire+0x8>)
 800333e:	f000 b8cc 	b.w	80034da <__retarget_lock_acquire_recursive>
 8003342:	bf00      	nop
 8003344:	20000342 	.word	0x20000342

08003348 <__sinit_lock_release>:
 8003348:	4801      	ldr	r0, [pc, #4]	; (8003350 <__sinit_lock_release+0x8>)
 800334a:	f000 b8c7 	b.w	80034dc <__retarget_lock_release_recursive>
 800334e:	bf00      	nop
 8003350:	20000342 	.word	0x20000342

08003354 <__sinit>:
 8003354:	b510      	push	{r4, lr}
 8003356:	4604      	mov	r4, r0
 8003358:	f7ff fff0 	bl	800333c <__sinit_lock_acquire>
 800335c:	69a3      	ldr	r3, [r4, #24]
 800335e:	b11b      	cbz	r3, 8003368 <__sinit+0x14>
 8003360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003364:	f7ff bff0 	b.w	8003348 <__sinit_lock_release>
 8003368:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800336c:	6523      	str	r3, [r4, #80]	; 0x50
 800336e:	4b13      	ldr	r3, [pc, #76]	; (80033bc <__sinit+0x68>)
 8003370:	4a13      	ldr	r2, [pc, #76]	; (80033c0 <__sinit+0x6c>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	62a2      	str	r2, [r4, #40]	; 0x28
 8003376:	42a3      	cmp	r3, r4
 8003378:	bf04      	itt	eq
 800337a:	2301      	moveq	r3, #1
 800337c:	61a3      	streq	r3, [r4, #24]
 800337e:	4620      	mov	r0, r4
 8003380:	f000 f820 	bl	80033c4 <__sfp>
 8003384:	6060      	str	r0, [r4, #4]
 8003386:	4620      	mov	r0, r4
 8003388:	f000 f81c 	bl	80033c4 <__sfp>
 800338c:	60a0      	str	r0, [r4, #8]
 800338e:	4620      	mov	r0, r4
 8003390:	f000 f818 	bl	80033c4 <__sfp>
 8003394:	2200      	movs	r2, #0
 8003396:	60e0      	str	r0, [r4, #12]
 8003398:	2104      	movs	r1, #4
 800339a:	6860      	ldr	r0, [r4, #4]
 800339c:	f7ff ff82 	bl	80032a4 <std>
 80033a0:	68a0      	ldr	r0, [r4, #8]
 80033a2:	2201      	movs	r2, #1
 80033a4:	2109      	movs	r1, #9
 80033a6:	f7ff ff7d 	bl	80032a4 <std>
 80033aa:	68e0      	ldr	r0, [r4, #12]
 80033ac:	2202      	movs	r2, #2
 80033ae:	2112      	movs	r1, #18
 80033b0:	f7ff ff78 	bl	80032a4 <std>
 80033b4:	2301      	movs	r3, #1
 80033b6:	61a3      	str	r3, [r4, #24]
 80033b8:	e7d2      	b.n	8003360 <__sinit+0xc>
 80033ba:	bf00      	nop
 80033bc:	08005e60 	.word	0x08005e60
 80033c0:	080032ed 	.word	0x080032ed

080033c4 <__sfp>:
 80033c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c6:	4607      	mov	r7, r0
 80033c8:	f7ff ffac 	bl	8003324 <__sfp_lock_acquire>
 80033cc:	4b1e      	ldr	r3, [pc, #120]	; (8003448 <__sfp+0x84>)
 80033ce:	681e      	ldr	r6, [r3, #0]
 80033d0:	69b3      	ldr	r3, [r6, #24]
 80033d2:	b913      	cbnz	r3, 80033da <__sfp+0x16>
 80033d4:	4630      	mov	r0, r6
 80033d6:	f7ff ffbd 	bl	8003354 <__sinit>
 80033da:	3648      	adds	r6, #72	; 0x48
 80033dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80033e0:	3b01      	subs	r3, #1
 80033e2:	d503      	bpl.n	80033ec <__sfp+0x28>
 80033e4:	6833      	ldr	r3, [r6, #0]
 80033e6:	b30b      	cbz	r3, 800342c <__sfp+0x68>
 80033e8:	6836      	ldr	r6, [r6, #0]
 80033ea:	e7f7      	b.n	80033dc <__sfp+0x18>
 80033ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80033f0:	b9d5      	cbnz	r5, 8003428 <__sfp+0x64>
 80033f2:	4b16      	ldr	r3, [pc, #88]	; (800344c <__sfp+0x88>)
 80033f4:	60e3      	str	r3, [r4, #12]
 80033f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80033fa:	6665      	str	r5, [r4, #100]	; 0x64
 80033fc:	f000 f86c 	bl	80034d8 <__retarget_lock_init_recursive>
 8003400:	f7ff ff96 	bl	8003330 <__sfp_lock_release>
 8003404:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003408:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800340c:	6025      	str	r5, [r4, #0]
 800340e:	61a5      	str	r5, [r4, #24]
 8003410:	2208      	movs	r2, #8
 8003412:	4629      	mov	r1, r5
 8003414:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003418:	f000 f861 	bl	80034de <memset>
 800341c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003420:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003424:	4620      	mov	r0, r4
 8003426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003428:	3468      	adds	r4, #104	; 0x68
 800342a:	e7d9      	b.n	80033e0 <__sfp+0x1c>
 800342c:	2104      	movs	r1, #4
 800342e:	4638      	mov	r0, r7
 8003430:	f7ff ff62 	bl	80032f8 <__sfmoreglue>
 8003434:	4604      	mov	r4, r0
 8003436:	6030      	str	r0, [r6, #0]
 8003438:	2800      	cmp	r0, #0
 800343a:	d1d5      	bne.n	80033e8 <__sfp+0x24>
 800343c:	f7ff ff78 	bl	8003330 <__sfp_lock_release>
 8003440:	230c      	movs	r3, #12
 8003442:	603b      	str	r3, [r7, #0]
 8003444:	e7ee      	b.n	8003424 <__sfp+0x60>
 8003446:	bf00      	nop
 8003448:	08005e60 	.word	0x08005e60
 800344c:	ffff0001 	.word	0xffff0001

08003450 <_fwalk_reent>:
 8003450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003454:	4606      	mov	r6, r0
 8003456:	4688      	mov	r8, r1
 8003458:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800345c:	2700      	movs	r7, #0
 800345e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003462:	f1b9 0901 	subs.w	r9, r9, #1
 8003466:	d505      	bpl.n	8003474 <_fwalk_reent+0x24>
 8003468:	6824      	ldr	r4, [r4, #0]
 800346a:	2c00      	cmp	r4, #0
 800346c:	d1f7      	bne.n	800345e <_fwalk_reent+0xe>
 800346e:	4638      	mov	r0, r7
 8003470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003474:	89ab      	ldrh	r3, [r5, #12]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d907      	bls.n	800348a <_fwalk_reent+0x3a>
 800347a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800347e:	3301      	adds	r3, #1
 8003480:	d003      	beq.n	800348a <_fwalk_reent+0x3a>
 8003482:	4629      	mov	r1, r5
 8003484:	4630      	mov	r0, r6
 8003486:	47c0      	blx	r8
 8003488:	4307      	orrs	r7, r0
 800348a:	3568      	adds	r5, #104	; 0x68
 800348c:	e7e9      	b.n	8003462 <_fwalk_reent+0x12>
	...

08003490 <__libc_init_array>:
 8003490:	b570      	push	{r4, r5, r6, lr}
 8003492:	4d0d      	ldr	r5, [pc, #52]	; (80034c8 <__libc_init_array+0x38>)
 8003494:	4c0d      	ldr	r4, [pc, #52]	; (80034cc <__libc_init_array+0x3c>)
 8003496:	1b64      	subs	r4, r4, r5
 8003498:	10a4      	asrs	r4, r4, #2
 800349a:	2600      	movs	r6, #0
 800349c:	42a6      	cmp	r6, r4
 800349e:	d109      	bne.n	80034b4 <__libc_init_array+0x24>
 80034a0:	4d0b      	ldr	r5, [pc, #44]	; (80034d0 <__libc_init_array+0x40>)
 80034a2:	4c0c      	ldr	r4, [pc, #48]	; (80034d4 <__libc_init_array+0x44>)
 80034a4:	f002 fc62 	bl	8005d6c <_init>
 80034a8:	1b64      	subs	r4, r4, r5
 80034aa:	10a4      	asrs	r4, r4, #2
 80034ac:	2600      	movs	r6, #0
 80034ae:	42a6      	cmp	r6, r4
 80034b0:	d105      	bne.n	80034be <__libc_init_array+0x2e>
 80034b2:	bd70      	pop	{r4, r5, r6, pc}
 80034b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80034b8:	4798      	blx	r3
 80034ba:	3601      	adds	r6, #1
 80034bc:	e7ee      	b.n	800349c <__libc_init_array+0xc>
 80034be:	f855 3b04 	ldr.w	r3, [r5], #4
 80034c2:	4798      	blx	r3
 80034c4:	3601      	adds	r6, #1
 80034c6:	e7f2      	b.n	80034ae <__libc_init_array+0x1e>
 80034c8:	080061e4 	.word	0x080061e4
 80034cc:	080061e4 	.word	0x080061e4
 80034d0:	080061e4 	.word	0x080061e4
 80034d4:	080061e8 	.word	0x080061e8

080034d8 <__retarget_lock_init_recursive>:
 80034d8:	4770      	bx	lr

080034da <__retarget_lock_acquire_recursive>:
 80034da:	4770      	bx	lr

080034dc <__retarget_lock_release_recursive>:
 80034dc:	4770      	bx	lr

080034de <memset>:
 80034de:	4402      	add	r2, r0
 80034e0:	4603      	mov	r3, r0
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d100      	bne.n	80034e8 <memset+0xa>
 80034e6:	4770      	bx	lr
 80034e8:	f803 1b01 	strb.w	r1, [r3], #1
 80034ec:	e7f9      	b.n	80034e2 <memset+0x4>
	...

080034f0 <sbrk_aligned>:
 80034f0:	b570      	push	{r4, r5, r6, lr}
 80034f2:	4e0e      	ldr	r6, [pc, #56]	; (800352c <sbrk_aligned+0x3c>)
 80034f4:	460c      	mov	r4, r1
 80034f6:	6831      	ldr	r1, [r6, #0]
 80034f8:	4605      	mov	r5, r0
 80034fa:	b911      	cbnz	r1, 8003502 <sbrk_aligned+0x12>
 80034fc:	f000 fd0e 	bl	8003f1c <_sbrk_r>
 8003500:	6030      	str	r0, [r6, #0]
 8003502:	4621      	mov	r1, r4
 8003504:	4628      	mov	r0, r5
 8003506:	f000 fd09 	bl	8003f1c <_sbrk_r>
 800350a:	1c43      	adds	r3, r0, #1
 800350c:	d00a      	beq.n	8003524 <sbrk_aligned+0x34>
 800350e:	1cc4      	adds	r4, r0, #3
 8003510:	f024 0403 	bic.w	r4, r4, #3
 8003514:	42a0      	cmp	r0, r4
 8003516:	d007      	beq.n	8003528 <sbrk_aligned+0x38>
 8003518:	1a21      	subs	r1, r4, r0
 800351a:	4628      	mov	r0, r5
 800351c:	f000 fcfe 	bl	8003f1c <_sbrk_r>
 8003520:	3001      	adds	r0, #1
 8003522:	d101      	bne.n	8003528 <sbrk_aligned+0x38>
 8003524:	f04f 34ff 	mov.w	r4, #4294967295
 8003528:	4620      	mov	r0, r4
 800352a:	bd70      	pop	{r4, r5, r6, pc}
 800352c:	20000348 	.word	0x20000348

08003530 <_malloc_r>:
 8003530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003534:	1ccd      	adds	r5, r1, #3
 8003536:	f025 0503 	bic.w	r5, r5, #3
 800353a:	3508      	adds	r5, #8
 800353c:	2d0c      	cmp	r5, #12
 800353e:	bf38      	it	cc
 8003540:	250c      	movcc	r5, #12
 8003542:	2d00      	cmp	r5, #0
 8003544:	4607      	mov	r7, r0
 8003546:	db01      	blt.n	800354c <_malloc_r+0x1c>
 8003548:	42a9      	cmp	r1, r5
 800354a:	d905      	bls.n	8003558 <_malloc_r+0x28>
 800354c:	230c      	movs	r3, #12
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	2600      	movs	r6, #0
 8003552:	4630      	mov	r0, r6
 8003554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003558:	4e2e      	ldr	r6, [pc, #184]	; (8003614 <_malloc_r+0xe4>)
 800355a:	f001 fcbd 	bl	8004ed8 <__malloc_lock>
 800355e:	6833      	ldr	r3, [r6, #0]
 8003560:	461c      	mov	r4, r3
 8003562:	bb34      	cbnz	r4, 80035b2 <_malloc_r+0x82>
 8003564:	4629      	mov	r1, r5
 8003566:	4638      	mov	r0, r7
 8003568:	f7ff ffc2 	bl	80034f0 <sbrk_aligned>
 800356c:	1c43      	adds	r3, r0, #1
 800356e:	4604      	mov	r4, r0
 8003570:	d14d      	bne.n	800360e <_malloc_r+0xde>
 8003572:	6834      	ldr	r4, [r6, #0]
 8003574:	4626      	mov	r6, r4
 8003576:	2e00      	cmp	r6, #0
 8003578:	d140      	bne.n	80035fc <_malloc_r+0xcc>
 800357a:	6823      	ldr	r3, [r4, #0]
 800357c:	4631      	mov	r1, r6
 800357e:	4638      	mov	r0, r7
 8003580:	eb04 0803 	add.w	r8, r4, r3
 8003584:	f000 fcca 	bl	8003f1c <_sbrk_r>
 8003588:	4580      	cmp	r8, r0
 800358a:	d13a      	bne.n	8003602 <_malloc_r+0xd2>
 800358c:	6821      	ldr	r1, [r4, #0]
 800358e:	3503      	adds	r5, #3
 8003590:	1a6d      	subs	r5, r5, r1
 8003592:	f025 0503 	bic.w	r5, r5, #3
 8003596:	3508      	adds	r5, #8
 8003598:	2d0c      	cmp	r5, #12
 800359a:	bf38      	it	cc
 800359c:	250c      	movcc	r5, #12
 800359e:	4629      	mov	r1, r5
 80035a0:	4638      	mov	r0, r7
 80035a2:	f7ff ffa5 	bl	80034f0 <sbrk_aligned>
 80035a6:	3001      	adds	r0, #1
 80035a8:	d02b      	beq.n	8003602 <_malloc_r+0xd2>
 80035aa:	6823      	ldr	r3, [r4, #0]
 80035ac:	442b      	add	r3, r5
 80035ae:	6023      	str	r3, [r4, #0]
 80035b0:	e00e      	b.n	80035d0 <_malloc_r+0xa0>
 80035b2:	6822      	ldr	r2, [r4, #0]
 80035b4:	1b52      	subs	r2, r2, r5
 80035b6:	d41e      	bmi.n	80035f6 <_malloc_r+0xc6>
 80035b8:	2a0b      	cmp	r2, #11
 80035ba:	d916      	bls.n	80035ea <_malloc_r+0xba>
 80035bc:	1961      	adds	r1, r4, r5
 80035be:	42a3      	cmp	r3, r4
 80035c0:	6025      	str	r5, [r4, #0]
 80035c2:	bf18      	it	ne
 80035c4:	6059      	strne	r1, [r3, #4]
 80035c6:	6863      	ldr	r3, [r4, #4]
 80035c8:	bf08      	it	eq
 80035ca:	6031      	streq	r1, [r6, #0]
 80035cc:	5162      	str	r2, [r4, r5]
 80035ce:	604b      	str	r3, [r1, #4]
 80035d0:	4638      	mov	r0, r7
 80035d2:	f104 060b 	add.w	r6, r4, #11
 80035d6:	f001 fc85 	bl	8004ee4 <__malloc_unlock>
 80035da:	f026 0607 	bic.w	r6, r6, #7
 80035de:	1d23      	adds	r3, r4, #4
 80035e0:	1af2      	subs	r2, r6, r3
 80035e2:	d0b6      	beq.n	8003552 <_malloc_r+0x22>
 80035e4:	1b9b      	subs	r3, r3, r6
 80035e6:	50a3      	str	r3, [r4, r2]
 80035e8:	e7b3      	b.n	8003552 <_malloc_r+0x22>
 80035ea:	6862      	ldr	r2, [r4, #4]
 80035ec:	42a3      	cmp	r3, r4
 80035ee:	bf0c      	ite	eq
 80035f0:	6032      	streq	r2, [r6, #0]
 80035f2:	605a      	strne	r2, [r3, #4]
 80035f4:	e7ec      	b.n	80035d0 <_malloc_r+0xa0>
 80035f6:	4623      	mov	r3, r4
 80035f8:	6864      	ldr	r4, [r4, #4]
 80035fa:	e7b2      	b.n	8003562 <_malloc_r+0x32>
 80035fc:	4634      	mov	r4, r6
 80035fe:	6876      	ldr	r6, [r6, #4]
 8003600:	e7b9      	b.n	8003576 <_malloc_r+0x46>
 8003602:	230c      	movs	r3, #12
 8003604:	603b      	str	r3, [r7, #0]
 8003606:	4638      	mov	r0, r7
 8003608:	f001 fc6c 	bl	8004ee4 <__malloc_unlock>
 800360c:	e7a1      	b.n	8003552 <_malloc_r+0x22>
 800360e:	6025      	str	r5, [r4, #0]
 8003610:	e7de      	b.n	80035d0 <_malloc_r+0xa0>
 8003612:	bf00      	nop
 8003614:	20000344 	.word	0x20000344

08003618 <__cvt>:
 8003618:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800361c:	ec55 4b10 	vmov	r4, r5, d0
 8003620:	2d00      	cmp	r5, #0
 8003622:	460e      	mov	r6, r1
 8003624:	4619      	mov	r1, r3
 8003626:	462b      	mov	r3, r5
 8003628:	bfbb      	ittet	lt
 800362a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800362e:	461d      	movlt	r5, r3
 8003630:	2300      	movge	r3, #0
 8003632:	232d      	movlt	r3, #45	; 0x2d
 8003634:	700b      	strb	r3, [r1, #0]
 8003636:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003638:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800363c:	4691      	mov	r9, r2
 800363e:	f023 0820 	bic.w	r8, r3, #32
 8003642:	bfbc      	itt	lt
 8003644:	4622      	movlt	r2, r4
 8003646:	4614      	movlt	r4, r2
 8003648:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800364c:	d005      	beq.n	800365a <__cvt+0x42>
 800364e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003652:	d100      	bne.n	8003656 <__cvt+0x3e>
 8003654:	3601      	adds	r6, #1
 8003656:	2102      	movs	r1, #2
 8003658:	e000      	b.n	800365c <__cvt+0x44>
 800365a:	2103      	movs	r1, #3
 800365c:	ab03      	add	r3, sp, #12
 800365e:	9301      	str	r3, [sp, #4]
 8003660:	ab02      	add	r3, sp, #8
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	ec45 4b10 	vmov	d0, r4, r5
 8003668:	4653      	mov	r3, sl
 800366a:	4632      	mov	r2, r6
 800366c:	f000 fd58 	bl	8004120 <_dtoa_r>
 8003670:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003674:	4607      	mov	r7, r0
 8003676:	d102      	bne.n	800367e <__cvt+0x66>
 8003678:	f019 0f01 	tst.w	r9, #1
 800367c:	d022      	beq.n	80036c4 <__cvt+0xac>
 800367e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003682:	eb07 0906 	add.w	r9, r7, r6
 8003686:	d110      	bne.n	80036aa <__cvt+0x92>
 8003688:	783b      	ldrb	r3, [r7, #0]
 800368a:	2b30      	cmp	r3, #48	; 0x30
 800368c:	d10a      	bne.n	80036a4 <__cvt+0x8c>
 800368e:	2200      	movs	r2, #0
 8003690:	2300      	movs	r3, #0
 8003692:	4620      	mov	r0, r4
 8003694:	4629      	mov	r1, r5
 8003696:	f7fd fa1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800369a:	b918      	cbnz	r0, 80036a4 <__cvt+0x8c>
 800369c:	f1c6 0601 	rsb	r6, r6, #1
 80036a0:	f8ca 6000 	str.w	r6, [sl]
 80036a4:	f8da 3000 	ldr.w	r3, [sl]
 80036a8:	4499      	add	r9, r3
 80036aa:	2200      	movs	r2, #0
 80036ac:	2300      	movs	r3, #0
 80036ae:	4620      	mov	r0, r4
 80036b0:	4629      	mov	r1, r5
 80036b2:	f7fd fa11 	bl	8000ad8 <__aeabi_dcmpeq>
 80036b6:	b108      	cbz	r0, 80036bc <__cvt+0xa4>
 80036b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80036bc:	2230      	movs	r2, #48	; 0x30
 80036be:	9b03      	ldr	r3, [sp, #12]
 80036c0:	454b      	cmp	r3, r9
 80036c2:	d307      	bcc.n	80036d4 <__cvt+0xbc>
 80036c4:	9b03      	ldr	r3, [sp, #12]
 80036c6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80036c8:	1bdb      	subs	r3, r3, r7
 80036ca:	4638      	mov	r0, r7
 80036cc:	6013      	str	r3, [r2, #0]
 80036ce:	b004      	add	sp, #16
 80036d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036d4:	1c59      	adds	r1, r3, #1
 80036d6:	9103      	str	r1, [sp, #12]
 80036d8:	701a      	strb	r2, [r3, #0]
 80036da:	e7f0      	b.n	80036be <__cvt+0xa6>

080036dc <__exponent>:
 80036dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80036de:	4603      	mov	r3, r0
 80036e0:	2900      	cmp	r1, #0
 80036e2:	bfb8      	it	lt
 80036e4:	4249      	neglt	r1, r1
 80036e6:	f803 2b02 	strb.w	r2, [r3], #2
 80036ea:	bfb4      	ite	lt
 80036ec:	222d      	movlt	r2, #45	; 0x2d
 80036ee:	222b      	movge	r2, #43	; 0x2b
 80036f0:	2909      	cmp	r1, #9
 80036f2:	7042      	strb	r2, [r0, #1]
 80036f4:	dd2a      	ble.n	800374c <__exponent+0x70>
 80036f6:	f10d 0407 	add.w	r4, sp, #7
 80036fa:	46a4      	mov	ip, r4
 80036fc:	270a      	movs	r7, #10
 80036fe:	46a6      	mov	lr, r4
 8003700:	460a      	mov	r2, r1
 8003702:	fb91 f6f7 	sdiv	r6, r1, r7
 8003706:	fb07 1516 	mls	r5, r7, r6, r1
 800370a:	3530      	adds	r5, #48	; 0x30
 800370c:	2a63      	cmp	r2, #99	; 0x63
 800370e:	f104 34ff 	add.w	r4, r4, #4294967295
 8003712:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003716:	4631      	mov	r1, r6
 8003718:	dcf1      	bgt.n	80036fe <__exponent+0x22>
 800371a:	3130      	adds	r1, #48	; 0x30
 800371c:	f1ae 0502 	sub.w	r5, lr, #2
 8003720:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003724:	1c44      	adds	r4, r0, #1
 8003726:	4629      	mov	r1, r5
 8003728:	4561      	cmp	r1, ip
 800372a:	d30a      	bcc.n	8003742 <__exponent+0x66>
 800372c:	f10d 0209 	add.w	r2, sp, #9
 8003730:	eba2 020e 	sub.w	r2, r2, lr
 8003734:	4565      	cmp	r5, ip
 8003736:	bf88      	it	hi
 8003738:	2200      	movhi	r2, #0
 800373a:	4413      	add	r3, r2
 800373c:	1a18      	subs	r0, r3, r0
 800373e:	b003      	add	sp, #12
 8003740:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003742:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003746:	f804 2f01 	strb.w	r2, [r4, #1]!
 800374a:	e7ed      	b.n	8003728 <__exponent+0x4c>
 800374c:	2330      	movs	r3, #48	; 0x30
 800374e:	3130      	adds	r1, #48	; 0x30
 8003750:	7083      	strb	r3, [r0, #2]
 8003752:	70c1      	strb	r1, [r0, #3]
 8003754:	1d03      	adds	r3, r0, #4
 8003756:	e7f1      	b.n	800373c <__exponent+0x60>

08003758 <_printf_float>:
 8003758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800375c:	ed2d 8b02 	vpush	{d8}
 8003760:	b08d      	sub	sp, #52	; 0x34
 8003762:	460c      	mov	r4, r1
 8003764:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003768:	4616      	mov	r6, r2
 800376a:	461f      	mov	r7, r3
 800376c:	4605      	mov	r5, r0
 800376e:	f001 fb87 	bl	8004e80 <_localeconv_r>
 8003772:	f8d0 a000 	ldr.w	sl, [r0]
 8003776:	4650      	mov	r0, sl
 8003778:	f7fc fd32 	bl	80001e0 <strlen>
 800377c:	2300      	movs	r3, #0
 800377e:	930a      	str	r3, [sp, #40]	; 0x28
 8003780:	6823      	ldr	r3, [r4, #0]
 8003782:	9305      	str	r3, [sp, #20]
 8003784:	f8d8 3000 	ldr.w	r3, [r8]
 8003788:	f894 b018 	ldrb.w	fp, [r4, #24]
 800378c:	3307      	adds	r3, #7
 800378e:	f023 0307 	bic.w	r3, r3, #7
 8003792:	f103 0208 	add.w	r2, r3, #8
 8003796:	f8c8 2000 	str.w	r2, [r8]
 800379a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80037a2:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80037a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80037aa:	9307      	str	r3, [sp, #28]
 80037ac:	f8cd 8018 	str.w	r8, [sp, #24]
 80037b0:	ee08 0a10 	vmov	s16, r0
 80037b4:	4b9f      	ldr	r3, [pc, #636]	; (8003a34 <_printf_float+0x2dc>)
 80037b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80037ba:	f04f 32ff 	mov.w	r2, #4294967295
 80037be:	f7fd f9bd 	bl	8000b3c <__aeabi_dcmpun>
 80037c2:	bb88      	cbnz	r0, 8003828 <_printf_float+0xd0>
 80037c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80037c8:	4b9a      	ldr	r3, [pc, #616]	; (8003a34 <_printf_float+0x2dc>)
 80037ca:	f04f 32ff 	mov.w	r2, #4294967295
 80037ce:	f7fd f997 	bl	8000b00 <__aeabi_dcmple>
 80037d2:	bb48      	cbnz	r0, 8003828 <_printf_float+0xd0>
 80037d4:	2200      	movs	r2, #0
 80037d6:	2300      	movs	r3, #0
 80037d8:	4640      	mov	r0, r8
 80037da:	4649      	mov	r1, r9
 80037dc:	f7fd f986 	bl	8000aec <__aeabi_dcmplt>
 80037e0:	b110      	cbz	r0, 80037e8 <_printf_float+0x90>
 80037e2:	232d      	movs	r3, #45	; 0x2d
 80037e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037e8:	4b93      	ldr	r3, [pc, #588]	; (8003a38 <_printf_float+0x2e0>)
 80037ea:	4894      	ldr	r0, [pc, #592]	; (8003a3c <_printf_float+0x2e4>)
 80037ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80037f0:	bf94      	ite	ls
 80037f2:	4698      	movls	r8, r3
 80037f4:	4680      	movhi	r8, r0
 80037f6:	2303      	movs	r3, #3
 80037f8:	6123      	str	r3, [r4, #16]
 80037fa:	9b05      	ldr	r3, [sp, #20]
 80037fc:	f023 0204 	bic.w	r2, r3, #4
 8003800:	6022      	str	r2, [r4, #0]
 8003802:	f04f 0900 	mov.w	r9, #0
 8003806:	9700      	str	r7, [sp, #0]
 8003808:	4633      	mov	r3, r6
 800380a:	aa0b      	add	r2, sp, #44	; 0x2c
 800380c:	4621      	mov	r1, r4
 800380e:	4628      	mov	r0, r5
 8003810:	f000 f9d8 	bl	8003bc4 <_printf_common>
 8003814:	3001      	adds	r0, #1
 8003816:	f040 8090 	bne.w	800393a <_printf_float+0x1e2>
 800381a:	f04f 30ff 	mov.w	r0, #4294967295
 800381e:	b00d      	add	sp, #52	; 0x34
 8003820:	ecbd 8b02 	vpop	{d8}
 8003824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003828:	4642      	mov	r2, r8
 800382a:	464b      	mov	r3, r9
 800382c:	4640      	mov	r0, r8
 800382e:	4649      	mov	r1, r9
 8003830:	f7fd f984 	bl	8000b3c <__aeabi_dcmpun>
 8003834:	b140      	cbz	r0, 8003848 <_printf_float+0xf0>
 8003836:	464b      	mov	r3, r9
 8003838:	2b00      	cmp	r3, #0
 800383a:	bfbc      	itt	lt
 800383c:	232d      	movlt	r3, #45	; 0x2d
 800383e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003842:	487f      	ldr	r0, [pc, #508]	; (8003a40 <_printf_float+0x2e8>)
 8003844:	4b7f      	ldr	r3, [pc, #508]	; (8003a44 <_printf_float+0x2ec>)
 8003846:	e7d1      	b.n	80037ec <_printf_float+0x94>
 8003848:	6863      	ldr	r3, [r4, #4]
 800384a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800384e:	9206      	str	r2, [sp, #24]
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	d13f      	bne.n	80038d4 <_printf_float+0x17c>
 8003854:	2306      	movs	r3, #6
 8003856:	6063      	str	r3, [r4, #4]
 8003858:	9b05      	ldr	r3, [sp, #20]
 800385a:	6861      	ldr	r1, [r4, #4]
 800385c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003860:	2300      	movs	r3, #0
 8003862:	9303      	str	r3, [sp, #12]
 8003864:	ab0a      	add	r3, sp, #40	; 0x28
 8003866:	e9cd b301 	strd	fp, r3, [sp, #4]
 800386a:	ab09      	add	r3, sp, #36	; 0x24
 800386c:	ec49 8b10 	vmov	d0, r8, r9
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	6022      	str	r2, [r4, #0]
 8003874:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003878:	4628      	mov	r0, r5
 800387a:	f7ff fecd 	bl	8003618 <__cvt>
 800387e:	9b06      	ldr	r3, [sp, #24]
 8003880:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003882:	2b47      	cmp	r3, #71	; 0x47
 8003884:	4680      	mov	r8, r0
 8003886:	d108      	bne.n	800389a <_printf_float+0x142>
 8003888:	1cc8      	adds	r0, r1, #3
 800388a:	db02      	blt.n	8003892 <_printf_float+0x13a>
 800388c:	6863      	ldr	r3, [r4, #4]
 800388e:	4299      	cmp	r1, r3
 8003890:	dd41      	ble.n	8003916 <_printf_float+0x1be>
 8003892:	f1ab 0b02 	sub.w	fp, fp, #2
 8003896:	fa5f fb8b 	uxtb.w	fp, fp
 800389a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800389e:	d820      	bhi.n	80038e2 <_printf_float+0x18a>
 80038a0:	3901      	subs	r1, #1
 80038a2:	465a      	mov	r2, fp
 80038a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80038a8:	9109      	str	r1, [sp, #36]	; 0x24
 80038aa:	f7ff ff17 	bl	80036dc <__exponent>
 80038ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80038b0:	1813      	adds	r3, r2, r0
 80038b2:	2a01      	cmp	r2, #1
 80038b4:	4681      	mov	r9, r0
 80038b6:	6123      	str	r3, [r4, #16]
 80038b8:	dc02      	bgt.n	80038c0 <_printf_float+0x168>
 80038ba:	6822      	ldr	r2, [r4, #0]
 80038bc:	07d2      	lsls	r2, r2, #31
 80038be:	d501      	bpl.n	80038c4 <_printf_float+0x16c>
 80038c0:	3301      	adds	r3, #1
 80038c2:	6123      	str	r3, [r4, #16]
 80038c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d09c      	beq.n	8003806 <_printf_float+0xae>
 80038cc:	232d      	movs	r3, #45	; 0x2d
 80038ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038d2:	e798      	b.n	8003806 <_printf_float+0xae>
 80038d4:	9a06      	ldr	r2, [sp, #24]
 80038d6:	2a47      	cmp	r2, #71	; 0x47
 80038d8:	d1be      	bne.n	8003858 <_printf_float+0x100>
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1bc      	bne.n	8003858 <_printf_float+0x100>
 80038de:	2301      	movs	r3, #1
 80038e0:	e7b9      	b.n	8003856 <_printf_float+0xfe>
 80038e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80038e6:	d118      	bne.n	800391a <_printf_float+0x1c2>
 80038e8:	2900      	cmp	r1, #0
 80038ea:	6863      	ldr	r3, [r4, #4]
 80038ec:	dd0b      	ble.n	8003906 <_printf_float+0x1ae>
 80038ee:	6121      	str	r1, [r4, #16]
 80038f0:	b913      	cbnz	r3, 80038f8 <_printf_float+0x1a0>
 80038f2:	6822      	ldr	r2, [r4, #0]
 80038f4:	07d0      	lsls	r0, r2, #31
 80038f6:	d502      	bpl.n	80038fe <_printf_float+0x1a6>
 80038f8:	3301      	adds	r3, #1
 80038fa:	440b      	add	r3, r1
 80038fc:	6123      	str	r3, [r4, #16]
 80038fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8003900:	f04f 0900 	mov.w	r9, #0
 8003904:	e7de      	b.n	80038c4 <_printf_float+0x16c>
 8003906:	b913      	cbnz	r3, 800390e <_printf_float+0x1b6>
 8003908:	6822      	ldr	r2, [r4, #0]
 800390a:	07d2      	lsls	r2, r2, #31
 800390c:	d501      	bpl.n	8003912 <_printf_float+0x1ba>
 800390e:	3302      	adds	r3, #2
 8003910:	e7f4      	b.n	80038fc <_printf_float+0x1a4>
 8003912:	2301      	movs	r3, #1
 8003914:	e7f2      	b.n	80038fc <_printf_float+0x1a4>
 8003916:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800391a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800391c:	4299      	cmp	r1, r3
 800391e:	db05      	blt.n	800392c <_printf_float+0x1d4>
 8003920:	6823      	ldr	r3, [r4, #0]
 8003922:	6121      	str	r1, [r4, #16]
 8003924:	07d8      	lsls	r0, r3, #31
 8003926:	d5ea      	bpl.n	80038fe <_printf_float+0x1a6>
 8003928:	1c4b      	adds	r3, r1, #1
 800392a:	e7e7      	b.n	80038fc <_printf_float+0x1a4>
 800392c:	2900      	cmp	r1, #0
 800392e:	bfd4      	ite	le
 8003930:	f1c1 0202 	rsble	r2, r1, #2
 8003934:	2201      	movgt	r2, #1
 8003936:	4413      	add	r3, r2
 8003938:	e7e0      	b.n	80038fc <_printf_float+0x1a4>
 800393a:	6823      	ldr	r3, [r4, #0]
 800393c:	055a      	lsls	r2, r3, #21
 800393e:	d407      	bmi.n	8003950 <_printf_float+0x1f8>
 8003940:	6923      	ldr	r3, [r4, #16]
 8003942:	4642      	mov	r2, r8
 8003944:	4631      	mov	r1, r6
 8003946:	4628      	mov	r0, r5
 8003948:	47b8      	blx	r7
 800394a:	3001      	adds	r0, #1
 800394c:	d12c      	bne.n	80039a8 <_printf_float+0x250>
 800394e:	e764      	b.n	800381a <_printf_float+0xc2>
 8003950:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003954:	f240 80e0 	bls.w	8003b18 <_printf_float+0x3c0>
 8003958:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800395c:	2200      	movs	r2, #0
 800395e:	2300      	movs	r3, #0
 8003960:	f7fd f8ba 	bl	8000ad8 <__aeabi_dcmpeq>
 8003964:	2800      	cmp	r0, #0
 8003966:	d034      	beq.n	80039d2 <_printf_float+0x27a>
 8003968:	4a37      	ldr	r2, [pc, #220]	; (8003a48 <_printf_float+0x2f0>)
 800396a:	2301      	movs	r3, #1
 800396c:	4631      	mov	r1, r6
 800396e:	4628      	mov	r0, r5
 8003970:	47b8      	blx	r7
 8003972:	3001      	adds	r0, #1
 8003974:	f43f af51 	beq.w	800381a <_printf_float+0xc2>
 8003978:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800397c:	429a      	cmp	r2, r3
 800397e:	db02      	blt.n	8003986 <_printf_float+0x22e>
 8003980:	6823      	ldr	r3, [r4, #0]
 8003982:	07d8      	lsls	r0, r3, #31
 8003984:	d510      	bpl.n	80039a8 <_printf_float+0x250>
 8003986:	ee18 3a10 	vmov	r3, s16
 800398a:	4652      	mov	r2, sl
 800398c:	4631      	mov	r1, r6
 800398e:	4628      	mov	r0, r5
 8003990:	47b8      	blx	r7
 8003992:	3001      	adds	r0, #1
 8003994:	f43f af41 	beq.w	800381a <_printf_float+0xc2>
 8003998:	f04f 0800 	mov.w	r8, #0
 800399c:	f104 091a 	add.w	r9, r4, #26
 80039a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80039a2:	3b01      	subs	r3, #1
 80039a4:	4543      	cmp	r3, r8
 80039a6:	dc09      	bgt.n	80039bc <_printf_float+0x264>
 80039a8:	6823      	ldr	r3, [r4, #0]
 80039aa:	079b      	lsls	r3, r3, #30
 80039ac:	f100 8105 	bmi.w	8003bba <_printf_float+0x462>
 80039b0:	68e0      	ldr	r0, [r4, #12]
 80039b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80039b4:	4298      	cmp	r0, r3
 80039b6:	bfb8      	it	lt
 80039b8:	4618      	movlt	r0, r3
 80039ba:	e730      	b.n	800381e <_printf_float+0xc6>
 80039bc:	2301      	movs	r3, #1
 80039be:	464a      	mov	r2, r9
 80039c0:	4631      	mov	r1, r6
 80039c2:	4628      	mov	r0, r5
 80039c4:	47b8      	blx	r7
 80039c6:	3001      	adds	r0, #1
 80039c8:	f43f af27 	beq.w	800381a <_printf_float+0xc2>
 80039cc:	f108 0801 	add.w	r8, r8, #1
 80039d0:	e7e6      	b.n	80039a0 <_printf_float+0x248>
 80039d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	dc39      	bgt.n	8003a4c <_printf_float+0x2f4>
 80039d8:	4a1b      	ldr	r2, [pc, #108]	; (8003a48 <_printf_float+0x2f0>)
 80039da:	2301      	movs	r3, #1
 80039dc:	4631      	mov	r1, r6
 80039de:	4628      	mov	r0, r5
 80039e0:	47b8      	blx	r7
 80039e2:	3001      	adds	r0, #1
 80039e4:	f43f af19 	beq.w	800381a <_printf_float+0xc2>
 80039e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039ec:	4313      	orrs	r3, r2
 80039ee:	d102      	bne.n	80039f6 <_printf_float+0x29e>
 80039f0:	6823      	ldr	r3, [r4, #0]
 80039f2:	07d9      	lsls	r1, r3, #31
 80039f4:	d5d8      	bpl.n	80039a8 <_printf_float+0x250>
 80039f6:	ee18 3a10 	vmov	r3, s16
 80039fa:	4652      	mov	r2, sl
 80039fc:	4631      	mov	r1, r6
 80039fe:	4628      	mov	r0, r5
 8003a00:	47b8      	blx	r7
 8003a02:	3001      	adds	r0, #1
 8003a04:	f43f af09 	beq.w	800381a <_printf_float+0xc2>
 8003a08:	f04f 0900 	mov.w	r9, #0
 8003a0c:	f104 0a1a 	add.w	sl, r4, #26
 8003a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a12:	425b      	negs	r3, r3
 8003a14:	454b      	cmp	r3, r9
 8003a16:	dc01      	bgt.n	8003a1c <_printf_float+0x2c4>
 8003a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a1a:	e792      	b.n	8003942 <_printf_float+0x1ea>
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	4652      	mov	r2, sl
 8003a20:	4631      	mov	r1, r6
 8003a22:	4628      	mov	r0, r5
 8003a24:	47b8      	blx	r7
 8003a26:	3001      	adds	r0, #1
 8003a28:	f43f aef7 	beq.w	800381a <_printf_float+0xc2>
 8003a2c:	f109 0901 	add.w	r9, r9, #1
 8003a30:	e7ee      	b.n	8003a10 <_printf_float+0x2b8>
 8003a32:	bf00      	nop
 8003a34:	7fefffff 	.word	0x7fefffff
 8003a38:	08005e64 	.word	0x08005e64
 8003a3c:	08005e68 	.word	0x08005e68
 8003a40:	08005e70 	.word	0x08005e70
 8003a44:	08005e6c 	.word	0x08005e6c
 8003a48:	08005e74 	.word	0x08005e74
 8003a4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003a4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a50:	429a      	cmp	r2, r3
 8003a52:	bfa8      	it	ge
 8003a54:	461a      	movge	r2, r3
 8003a56:	2a00      	cmp	r2, #0
 8003a58:	4691      	mov	r9, r2
 8003a5a:	dc37      	bgt.n	8003acc <_printf_float+0x374>
 8003a5c:	f04f 0b00 	mov.w	fp, #0
 8003a60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003a64:	f104 021a 	add.w	r2, r4, #26
 8003a68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a6a:	9305      	str	r3, [sp, #20]
 8003a6c:	eba3 0309 	sub.w	r3, r3, r9
 8003a70:	455b      	cmp	r3, fp
 8003a72:	dc33      	bgt.n	8003adc <_printf_float+0x384>
 8003a74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	db3b      	blt.n	8003af4 <_printf_float+0x39c>
 8003a7c:	6823      	ldr	r3, [r4, #0]
 8003a7e:	07da      	lsls	r2, r3, #31
 8003a80:	d438      	bmi.n	8003af4 <_printf_float+0x39c>
 8003a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003a84:	9a05      	ldr	r2, [sp, #20]
 8003a86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003a88:	1a9a      	subs	r2, r3, r2
 8003a8a:	eba3 0901 	sub.w	r9, r3, r1
 8003a8e:	4591      	cmp	r9, r2
 8003a90:	bfa8      	it	ge
 8003a92:	4691      	movge	r9, r2
 8003a94:	f1b9 0f00 	cmp.w	r9, #0
 8003a98:	dc35      	bgt.n	8003b06 <_printf_float+0x3ae>
 8003a9a:	f04f 0800 	mov.w	r8, #0
 8003a9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003aa2:	f104 0a1a 	add.w	sl, r4, #26
 8003aa6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003aaa:	1a9b      	subs	r3, r3, r2
 8003aac:	eba3 0309 	sub.w	r3, r3, r9
 8003ab0:	4543      	cmp	r3, r8
 8003ab2:	f77f af79 	ble.w	80039a8 <_printf_float+0x250>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	4652      	mov	r2, sl
 8003aba:	4631      	mov	r1, r6
 8003abc:	4628      	mov	r0, r5
 8003abe:	47b8      	blx	r7
 8003ac0:	3001      	adds	r0, #1
 8003ac2:	f43f aeaa 	beq.w	800381a <_printf_float+0xc2>
 8003ac6:	f108 0801 	add.w	r8, r8, #1
 8003aca:	e7ec      	b.n	8003aa6 <_printf_float+0x34e>
 8003acc:	4613      	mov	r3, r2
 8003ace:	4631      	mov	r1, r6
 8003ad0:	4642      	mov	r2, r8
 8003ad2:	4628      	mov	r0, r5
 8003ad4:	47b8      	blx	r7
 8003ad6:	3001      	adds	r0, #1
 8003ad8:	d1c0      	bne.n	8003a5c <_printf_float+0x304>
 8003ada:	e69e      	b.n	800381a <_printf_float+0xc2>
 8003adc:	2301      	movs	r3, #1
 8003ade:	4631      	mov	r1, r6
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	9205      	str	r2, [sp, #20]
 8003ae4:	47b8      	blx	r7
 8003ae6:	3001      	adds	r0, #1
 8003ae8:	f43f ae97 	beq.w	800381a <_printf_float+0xc2>
 8003aec:	9a05      	ldr	r2, [sp, #20]
 8003aee:	f10b 0b01 	add.w	fp, fp, #1
 8003af2:	e7b9      	b.n	8003a68 <_printf_float+0x310>
 8003af4:	ee18 3a10 	vmov	r3, s16
 8003af8:	4652      	mov	r2, sl
 8003afa:	4631      	mov	r1, r6
 8003afc:	4628      	mov	r0, r5
 8003afe:	47b8      	blx	r7
 8003b00:	3001      	adds	r0, #1
 8003b02:	d1be      	bne.n	8003a82 <_printf_float+0x32a>
 8003b04:	e689      	b.n	800381a <_printf_float+0xc2>
 8003b06:	9a05      	ldr	r2, [sp, #20]
 8003b08:	464b      	mov	r3, r9
 8003b0a:	4442      	add	r2, r8
 8003b0c:	4631      	mov	r1, r6
 8003b0e:	4628      	mov	r0, r5
 8003b10:	47b8      	blx	r7
 8003b12:	3001      	adds	r0, #1
 8003b14:	d1c1      	bne.n	8003a9a <_printf_float+0x342>
 8003b16:	e680      	b.n	800381a <_printf_float+0xc2>
 8003b18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003b1a:	2a01      	cmp	r2, #1
 8003b1c:	dc01      	bgt.n	8003b22 <_printf_float+0x3ca>
 8003b1e:	07db      	lsls	r3, r3, #31
 8003b20:	d538      	bpl.n	8003b94 <_printf_float+0x43c>
 8003b22:	2301      	movs	r3, #1
 8003b24:	4642      	mov	r2, r8
 8003b26:	4631      	mov	r1, r6
 8003b28:	4628      	mov	r0, r5
 8003b2a:	47b8      	blx	r7
 8003b2c:	3001      	adds	r0, #1
 8003b2e:	f43f ae74 	beq.w	800381a <_printf_float+0xc2>
 8003b32:	ee18 3a10 	vmov	r3, s16
 8003b36:	4652      	mov	r2, sl
 8003b38:	4631      	mov	r1, r6
 8003b3a:	4628      	mov	r0, r5
 8003b3c:	47b8      	blx	r7
 8003b3e:	3001      	adds	r0, #1
 8003b40:	f43f ae6b 	beq.w	800381a <_printf_float+0xc2>
 8003b44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003b48:	2200      	movs	r2, #0
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	f7fc ffc4 	bl	8000ad8 <__aeabi_dcmpeq>
 8003b50:	b9d8      	cbnz	r0, 8003b8a <_printf_float+0x432>
 8003b52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b54:	f108 0201 	add.w	r2, r8, #1
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	4631      	mov	r1, r6
 8003b5c:	4628      	mov	r0, r5
 8003b5e:	47b8      	blx	r7
 8003b60:	3001      	adds	r0, #1
 8003b62:	d10e      	bne.n	8003b82 <_printf_float+0x42a>
 8003b64:	e659      	b.n	800381a <_printf_float+0xc2>
 8003b66:	2301      	movs	r3, #1
 8003b68:	4652      	mov	r2, sl
 8003b6a:	4631      	mov	r1, r6
 8003b6c:	4628      	mov	r0, r5
 8003b6e:	47b8      	blx	r7
 8003b70:	3001      	adds	r0, #1
 8003b72:	f43f ae52 	beq.w	800381a <_printf_float+0xc2>
 8003b76:	f108 0801 	add.w	r8, r8, #1
 8003b7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	4543      	cmp	r3, r8
 8003b80:	dcf1      	bgt.n	8003b66 <_printf_float+0x40e>
 8003b82:	464b      	mov	r3, r9
 8003b84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003b88:	e6dc      	b.n	8003944 <_printf_float+0x1ec>
 8003b8a:	f04f 0800 	mov.w	r8, #0
 8003b8e:	f104 0a1a 	add.w	sl, r4, #26
 8003b92:	e7f2      	b.n	8003b7a <_printf_float+0x422>
 8003b94:	2301      	movs	r3, #1
 8003b96:	4642      	mov	r2, r8
 8003b98:	e7df      	b.n	8003b5a <_printf_float+0x402>
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	464a      	mov	r2, r9
 8003b9e:	4631      	mov	r1, r6
 8003ba0:	4628      	mov	r0, r5
 8003ba2:	47b8      	blx	r7
 8003ba4:	3001      	adds	r0, #1
 8003ba6:	f43f ae38 	beq.w	800381a <_printf_float+0xc2>
 8003baa:	f108 0801 	add.w	r8, r8, #1
 8003bae:	68e3      	ldr	r3, [r4, #12]
 8003bb0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003bb2:	1a5b      	subs	r3, r3, r1
 8003bb4:	4543      	cmp	r3, r8
 8003bb6:	dcf0      	bgt.n	8003b9a <_printf_float+0x442>
 8003bb8:	e6fa      	b.n	80039b0 <_printf_float+0x258>
 8003bba:	f04f 0800 	mov.w	r8, #0
 8003bbe:	f104 0919 	add.w	r9, r4, #25
 8003bc2:	e7f4      	b.n	8003bae <_printf_float+0x456>

08003bc4 <_printf_common>:
 8003bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bc8:	4616      	mov	r6, r2
 8003bca:	4699      	mov	r9, r3
 8003bcc:	688a      	ldr	r2, [r1, #8]
 8003bce:	690b      	ldr	r3, [r1, #16]
 8003bd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	bfb8      	it	lt
 8003bd8:	4613      	movlt	r3, r2
 8003bda:	6033      	str	r3, [r6, #0]
 8003bdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003be0:	4607      	mov	r7, r0
 8003be2:	460c      	mov	r4, r1
 8003be4:	b10a      	cbz	r2, 8003bea <_printf_common+0x26>
 8003be6:	3301      	adds	r3, #1
 8003be8:	6033      	str	r3, [r6, #0]
 8003bea:	6823      	ldr	r3, [r4, #0]
 8003bec:	0699      	lsls	r1, r3, #26
 8003bee:	bf42      	ittt	mi
 8003bf0:	6833      	ldrmi	r3, [r6, #0]
 8003bf2:	3302      	addmi	r3, #2
 8003bf4:	6033      	strmi	r3, [r6, #0]
 8003bf6:	6825      	ldr	r5, [r4, #0]
 8003bf8:	f015 0506 	ands.w	r5, r5, #6
 8003bfc:	d106      	bne.n	8003c0c <_printf_common+0x48>
 8003bfe:	f104 0a19 	add.w	sl, r4, #25
 8003c02:	68e3      	ldr	r3, [r4, #12]
 8003c04:	6832      	ldr	r2, [r6, #0]
 8003c06:	1a9b      	subs	r3, r3, r2
 8003c08:	42ab      	cmp	r3, r5
 8003c0a:	dc26      	bgt.n	8003c5a <_printf_common+0x96>
 8003c0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c10:	1e13      	subs	r3, r2, #0
 8003c12:	6822      	ldr	r2, [r4, #0]
 8003c14:	bf18      	it	ne
 8003c16:	2301      	movne	r3, #1
 8003c18:	0692      	lsls	r2, r2, #26
 8003c1a:	d42b      	bmi.n	8003c74 <_printf_common+0xb0>
 8003c1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c20:	4649      	mov	r1, r9
 8003c22:	4638      	mov	r0, r7
 8003c24:	47c0      	blx	r8
 8003c26:	3001      	adds	r0, #1
 8003c28:	d01e      	beq.n	8003c68 <_printf_common+0xa4>
 8003c2a:	6823      	ldr	r3, [r4, #0]
 8003c2c:	68e5      	ldr	r5, [r4, #12]
 8003c2e:	6832      	ldr	r2, [r6, #0]
 8003c30:	f003 0306 	and.w	r3, r3, #6
 8003c34:	2b04      	cmp	r3, #4
 8003c36:	bf08      	it	eq
 8003c38:	1aad      	subeq	r5, r5, r2
 8003c3a:	68a3      	ldr	r3, [r4, #8]
 8003c3c:	6922      	ldr	r2, [r4, #16]
 8003c3e:	bf0c      	ite	eq
 8003c40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c44:	2500      	movne	r5, #0
 8003c46:	4293      	cmp	r3, r2
 8003c48:	bfc4      	itt	gt
 8003c4a:	1a9b      	subgt	r3, r3, r2
 8003c4c:	18ed      	addgt	r5, r5, r3
 8003c4e:	2600      	movs	r6, #0
 8003c50:	341a      	adds	r4, #26
 8003c52:	42b5      	cmp	r5, r6
 8003c54:	d11a      	bne.n	8003c8c <_printf_common+0xc8>
 8003c56:	2000      	movs	r0, #0
 8003c58:	e008      	b.n	8003c6c <_printf_common+0xa8>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	4652      	mov	r2, sl
 8003c5e:	4649      	mov	r1, r9
 8003c60:	4638      	mov	r0, r7
 8003c62:	47c0      	blx	r8
 8003c64:	3001      	adds	r0, #1
 8003c66:	d103      	bne.n	8003c70 <_printf_common+0xac>
 8003c68:	f04f 30ff 	mov.w	r0, #4294967295
 8003c6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c70:	3501      	adds	r5, #1
 8003c72:	e7c6      	b.n	8003c02 <_printf_common+0x3e>
 8003c74:	18e1      	adds	r1, r4, r3
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	2030      	movs	r0, #48	; 0x30
 8003c7a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c7e:	4422      	add	r2, r4
 8003c80:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c84:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c88:	3302      	adds	r3, #2
 8003c8a:	e7c7      	b.n	8003c1c <_printf_common+0x58>
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	4622      	mov	r2, r4
 8003c90:	4649      	mov	r1, r9
 8003c92:	4638      	mov	r0, r7
 8003c94:	47c0      	blx	r8
 8003c96:	3001      	adds	r0, #1
 8003c98:	d0e6      	beq.n	8003c68 <_printf_common+0xa4>
 8003c9a:	3601      	adds	r6, #1
 8003c9c:	e7d9      	b.n	8003c52 <_printf_common+0x8e>
	...

08003ca0 <_printf_i>:
 8003ca0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ca4:	7e0f      	ldrb	r7, [r1, #24]
 8003ca6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003ca8:	2f78      	cmp	r7, #120	; 0x78
 8003caa:	4691      	mov	r9, r2
 8003cac:	4680      	mov	r8, r0
 8003cae:	460c      	mov	r4, r1
 8003cb0:	469a      	mov	sl, r3
 8003cb2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003cb6:	d807      	bhi.n	8003cc8 <_printf_i+0x28>
 8003cb8:	2f62      	cmp	r7, #98	; 0x62
 8003cba:	d80a      	bhi.n	8003cd2 <_printf_i+0x32>
 8003cbc:	2f00      	cmp	r7, #0
 8003cbe:	f000 80d8 	beq.w	8003e72 <_printf_i+0x1d2>
 8003cc2:	2f58      	cmp	r7, #88	; 0x58
 8003cc4:	f000 80a3 	beq.w	8003e0e <_printf_i+0x16e>
 8003cc8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ccc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003cd0:	e03a      	b.n	8003d48 <_printf_i+0xa8>
 8003cd2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003cd6:	2b15      	cmp	r3, #21
 8003cd8:	d8f6      	bhi.n	8003cc8 <_printf_i+0x28>
 8003cda:	a101      	add	r1, pc, #4	; (adr r1, 8003ce0 <_printf_i+0x40>)
 8003cdc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ce0:	08003d39 	.word	0x08003d39
 8003ce4:	08003d4d 	.word	0x08003d4d
 8003ce8:	08003cc9 	.word	0x08003cc9
 8003cec:	08003cc9 	.word	0x08003cc9
 8003cf0:	08003cc9 	.word	0x08003cc9
 8003cf4:	08003cc9 	.word	0x08003cc9
 8003cf8:	08003d4d 	.word	0x08003d4d
 8003cfc:	08003cc9 	.word	0x08003cc9
 8003d00:	08003cc9 	.word	0x08003cc9
 8003d04:	08003cc9 	.word	0x08003cc9
 8003d08:	08003cc9 	.word	0x08003cc9
 8003d0c:	08003e59 	.word	0x08003e59
 8003d10:	08003d7d 	.word	0x08003d7d
 8003d14:	08003e3b 	.word	0x08003e3b
 8003d18:	08003cc9 	.word	0x08003cc9
 8003d1c:	08003cc9 	.word	0x08003cc9
 8003d20:	08003e7b 	.word	0x08003e7b
 8003d24:	08003cc9 	.word	0x08003cc9
 8003d28:	08003d7d 	.word	0x08003d7d
 8003d2c:	08003cc9 	.word	0x08003cc9
 8003d30:	08003cc9 	.word	0x08003cc9
 8003d34:	08003e43 	.word	0x08003e43
 8003d38:	682b      	ldr	r3, [r5, #0]
 8003d3a:	1d1a      	adds	r2, r3, #4
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	602a      	str	r2, [r5, #0]
 8003d40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d44:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e0a3      	b.n	8003e94 <_printf_i+0x1f4>
 8003d4c:	6820      	ldr	r0, [r4, #0]
 8003d4e:	6829      	ldr	r1, [r5, #0]
 8003d50:	0606      	lsls	r6, r0, #24
 8003d52:	f101 0304 	add.w	r3, r1, #4
 8003d56:	d50a      	bpl.n	8003d6e <_printf_i+0xce>
 8003d58:	680e      	ldr	r6, [r1, #0]
 8003d5a:	602b      	str	r3, [r5, #0]
 8003d5c:	2e00      	cmp	r6, #0
 8003d5e:	da03      	bge.n	8003d68 <_printf_i+0xc8>
 8003d60:	232d      	movs	r3, #45	; 0x2d
 8003d62:	4276      	negs	r6, r6
 8003d64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d68:	485e      	ldr	r0, [pc, #376]	; (8003ee4 <_printf_i+0x244>)
 8003d6a:	230a      	movs	r3, #10
 8003d6c:	e019      	b.n	8003da2 <_printf_i+0x102>
 8003d6e:	680e      	ldr	r6, [r1, #0]
 8003d70:	602b      	str	r3, [r5, #0]
 8003d72:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d76:	bf18      	it	ne
 8003d78:	b236      	sxthne	r6, r6
 8003d7a:	e7ef      	b.n	8003d5c <_printf_i+0xbc>
 8003d7c:	682b      	ldr	r3, [r5, #0]
 8003d7e:	6820      	ldr	r0, [r4, #0]
 8003d80:	1d19      	adds	r1, r3, #4
 8003d82:	6029      	str	r1, [r5, #0]
 8003d84:	0601      	lsls	r1, r0, #24
 8003d86:	d501      	bpl.n	8003d8c <_printf_i+0xec>
 8003d88:	681e      	ldr	r6, [r3, #0]
 8003d8a:	e002      	b.n	8003d92 <_printf_i+0xf2>
 8003d8c:	0646      	lsls	r6, r0, #25
 8003d8e:	d5fb      	bpl.n	8003d88 <_printf_i+0xe8>
 8003d90:	881e      	ldrh	r6, [r3, #0]
 8003d92:	4854      	ldr	r0, [pc, #336]	; (8003ee4 <_printf_i+0x244>)
 8003d94:	2f6f      	cmp	r7, #111	; 0x6f
 8003d96:	bf0c      	ite	eq
 8003d98:	2308      	moveq	r3, #8
 8003d9a:	230a      	movne	r3, #10
 8003d9c:	2100      	movs	r1, #0
 8003d9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003da2:	6865      	ldr	r5, [r4, #4]
 8003da4:	60a5      	str	r5, [r4, #8]
 8003da6:	2d00      	cmp	r5, #0
 8003da8:	bfa2      	ittt	ge
 8003daa:	6821      	ldrge	r1, [r4, #0]
 8003dac:	f021 0104 	bicge.w	r1, r1, #4
 8003db0:	6021      	strge	r1, [r4, #0]
 8003db2:	b90e      	cbnz	r6, 8003db8 <_printf_i+0x118>
 8003db4:	2d00      	cmp	r5, #0
 8003db6:	d04d      	beq.n	8003e54 <_printf_i+0x1b4>
 8003db8:	4615      	mov	r5, r2
 8003dba:	fbb6 f1f3 	udiv	r1, r6, r3
 8003dbe:	fb03 6711 	mls	r7, r3, r1, r6
 8003dc2:	5dc7      	ldrb	r7, [r0, r7]
 8003dc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003dc8:	4637      	mov	r7, r6
 8003dca:	42bb      	cmp	r3, r7
 8003dcc:	460e      	mov	r6, r1
 8003dce:	d9f4      	bls.n	8003dba <_printf_i+0x11a>
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d10b      	bne.n	8003dec <_printf_i+0x14c>
 8003dd4:	6823      	ldr	r3, [r4, #0]
 8003dd6:	07de      	lsls	r6, r3, #31
 8003dd8:	d508      	bpl.n	8003dec <_printf_i+0x14c>
 8003dda:	6923      	ldr	r3, [r4, #16]
 8003ddc:	6861      	ldr	r1, [r4, #4]
 8003dde:	4299      	cmp	r1, r3
 8003de0:	bfde      	ittt	le
 8003de2:	2330      	movle	r3, #48	; 0x30
 8003de4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003de8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003dec:	1b52      	subs	r2, r2, r5
 8003dee:	6122      	str	r2, [r4, #16]
 8003df0:	f8cd a000 	str.w	sl, [sp]
 8003df4:	464b      	mov	r3, r9
 8003df6:	aa03      	add	r2, sp, #12
 8003df8:	4621      	mov	r1, r4
 8003dfa:	4640      	mov	r0, r8
 8003dfc:	f7ff fee2 	bl	8003bc4 <_printf_common>
 8003e00:	3001      	adds	r0, #1
 8003e02:	d14c      	bne.n	8003e9e <_printf_i+0x1fe>
 8003e04:	f04f 30ff 	mov.w	r0, #4294967295
 8003e08:	b004      	add	sp, #16
 8003e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e0e:	4835      	ldr	r0, [pc, #212]	; (8003ee4 <_printf_i+0x244>)
 8003e10:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003e14:	6829      	ldr	r1, [r5, #0]
 8003e16:	6823      	ldr	r3, [r4, #0]
 8003e18:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e1c:	6029      	str	r1, [r5, #0]
 8003e1e:	061d      	lsls	r5, r3, #24
 8003e20:	d514      	bpl.n	8003e4c <_printf_i+0x1ac>
 8003e22:	07df      	lsls	r7, r3, #31
 8003e24:	bf44      	itt	mi
 8003e26:	f043 0320 	orrmi.w	r3, r3, #32
 8003e2a:	6023      	strmi	r3, [r4, #0]
 8003e2c:	b91e      	cbnz	r6, 8003e36 <_printf_i+0x196>
 8003e2e:	6823      	ldr	r3, [r4, #0]
 8003e30:	f023 0320 	bic.w	r3, r3, #32
 8003e34:	6023      	str	r3, [r4, #0]
 8003e36:	2310      	movs	r3, #16
 8003e38:	e7b0      	b.n	8003d9c <_printf_i+0xfc>
 8003e3a:	6823      	ldr	r3, [r4, #0]
 8003e3c:	f043 0320 	orr.w	r3, r3, #32
 8003e40:	6023      	str	r3, [r4, #0]
 8003e42:	2378      	movs	r3, #120	; 0x78
 8003e44:	4828      	ldr	r0, [pc, #160]	; (8003ee8 <_printf_i+0x248>)
 8003e46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e4a:	e7e3      	b.n	8003e14 <_printf_i+0x174>
 8003e4c:	0659      	lsls	r1, r3, #25
 8003e4e:	bf48      	it	mi
 8003e50:	b2b6      	uxthmi	r6, r6
 8003e52:	e7e6      	b.n	8003e22 <_printf_i+0x182>
 8003e54:	4615      	mov	r5, r2
 8003e56:	e7bb      	b.n	8003dd0 <_printf_i+0x130>
 8003e58:	682b      	ldr	r3, [r5, #0]
 8003e5a:	6826      	ldr	r6, [r4, #0]
 8003e5c:	6961      	ldr	r1, [r4, #20]
 8003e5e:	1d18      	adds	r0, r3, #4
 8003e60:	6028      	str	r0, [r5, #0]
 8003e62:	0635      	lsls	r5, r6, #24
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	d501      	bpl.n	8003e6c <_printf_i+0x1cc>
 8003e68:	6019      	str	r1, [r3, #0]
 8003e6a:	e002      	b.n	8003e72 <_printf_i+0x1d2>
 8003e6c:	0670      	lsls	r0, r6, #25
 8003e6e:	d5fb      	bpl.n	8003e68 <_printf_i+0x1c8>
 8003e70:	8019      	strh	r1, [r3, #0]
 8003e72:	2300      	movs	r3, #0
 8003e74:	6123      	str	r3, [r4, #16]
 8003e76:	4615      	mov	r5, r2
 8003e78:	e7ba      	b.n	8003df0 <_printf_i+0x150>
 8003e7a:	682b      	ldr	r3, [r5, #0]
 8003e7c:	1d1a      	adds	r2, r3, #4
 8003e7e:	602a      	str	r2, [r5, #0]
 8003e80:	681d      	ldr	r5, [r3, #0]
 8003e82:	6862      	ldr	r2, [r4, #4]
 8003e84:	2100      	movs	r1, #0
 8003e86:	4628      	mov	r0, r5
 8003e88:	f7fc f9b2 	bl	80001f0 <memchr>
 8003e8c:	b108      	cbz	r0, 8003e92 <_printf_i+0x1f2>
 8003e8e:	1b40      	subs	r0, r0, r5
 8003e90:	6060      	str	r0, [r4, #4]
 8003e92:	6863      	ldr	r3, [r4, #4]
 8003e94:	6123      	str	r3, [r4, #16]
 8003e96:	2300      	movs	r3, #0
 8003e98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003e9c:	e7a8      	b.n	8003df0 <_printf_i+0x150>
 8003e9e:	6923      	ldr	r3, [r4, #16]
 8003ea0:	462a      	mov	r2, r5
 8003ea2:	4649      	mov	r1, r9
 8003ea4:	4640      	mov	r0, r8
 8003ea6:	47d0      	blx	sl
 8003ea8:	3001      	adds	r0, #1
 8003eaa:	d0ab      	beq.n	8003e04 <_printf_i+0x164>
 8003eac:	6823      	ldr	r3, [r4, #0]
 8003eae:	079b      	lsls	r3, r3, #30
 8003eb0:	d413      	bmi.n	8003eda <_printf_i+0x23a>
 8003eb2:	68e0      	ldr	r0, [r4, #12]
 8003eb4:	9b03      	ldr	r3, [sp, #12]
 8003eb6:	4298      	cmp	r0, r3
 8003eb8:	bfb8      	it	lt
 8003eba:	4618      	movlt	r0, r3
 8003ebc:	e7a4      	b.n	8003e08 <_printf_i+0x168>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	4632      	mov	r2, r6
 8003ec2:	4649      	mov	r1, r9
 8003ec4:	4640      	mov	r0, r8
 8003ec6:	47d0      	blx	sl
 8003ec8:	3001      	adds	r0, #1
 8003eca:	d09b      	beq.n	8003e04 <_printf_i+0x164>
 8003ecc:	3501      	adds	r5, #1
 8003ece:	68e3      	ldr	r3, [r4, #12]
 8003ed0:	9903      	ldr	r1, [sp, #12]
 8003ed2:	1a5b      	subs	r3, r3, r1
 8003ed4:	42ab      	cmp	r3, r5
 8003ed6:	dcf2      	bgt.n	8003ebe <_printf_i+0x21e>
 8003ed8:	e7eb      	b.n	8003eb2 <_printf_i+0x212>
 8003eda:	2500      	movs	r5, #0
 8003edc:	f104 0619 	add.w	r6, r4, #25
 8003ee0:	e7f5      	b.n	8003ece <_printf_i+0x22e>
 8003ee2:	bf00      	nop
 8003ee4:	08005e76 	.word	0x08005e76
 8003ee8:	08005e87 	.word	0x08005e87

08003eec <iprintf>:
 8003eec:	b40f      	push	{r0, r1, r2, r3}
 8003eee:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <iprintf+0x2c>)
 8003ef0:	b513      	push	{r0, r1, r4, lr}
 8003ef2:	681c      	ldr	r4, [r3, #0]
 8003ef4:	b124      	cbz	r4, 8003f00 <iprintf+0x14>
 8003ef6:	69a3      	ldr	r3, [r4, #24]
 8003ef8:	b913      	cbnz	r3, 8003f00 <iprintf+0x14>
 8003efa:	4620      	mov	r0, r4
 8003efc:	f7ff fa2a 	bl	8003354 <__sinit>
 8003f00:	ab05      	add	r3, sp, #20
 8003f02:	9a04      	ldr	r2, [sp, #16]
 8003f04:	68a1      	ldr	r1, [r4, #8]
 8003f06:	9301      	str	r3, [sp, #4]
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f001 fc01 	bl	8005710 <_vfiprintf_r>
 8003f0e:	b002      	add	sp, #8
 8003f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f14:	b004      	add	sp, #16
 8003f16:	4770      	bx	lr
 8003f18:	20000014 	.word	0x20000014

08003f1c <_sbrk_r>:
 8003f1c:	b538      	push	{r3, r4, r5, lr}
 8003f1e:	4d06      	ldr	r5, [pc, #24]	; (8003f38 <_sbrk_r+0x1c>)
 8003f20:	2300      	movs	r3, #0
 8003f22:	4604      	mov	r4, r0
 8003f24:	4608      	mov	r0, r1
 8003f26:	602b      	str	r3, [r5, #0]
 8003f28:	f7fd fb44 	bl	80015b4 <_sbrk>
 8003f2c:	1c43      	adds	r3, r0, #1
 8003f2e:	d102      	bne.n	8003f36 <_sbrk_r+0x1a>
 8003f30:	682b      	ldr	r3, [r5, #0]
 8003f32:	b103      	cbz	r3, 8003f36 <_sbrk_r+0x1a>
 8003f34:	6023      	str	r3, [r4, #0]
 8003f36:	bd38      	pop	{r3, r4, r5, pc}
 8003f38:	2000034c 	.word	0x2000034c

08003f3c <__sread>:
 8003f3c:	b510      	push	{r4, lr}
 8003f3e:	460c      	mov	r4, r1
 8003f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f44:	f001 fd14 	bl	8005970 <_read_r>
 8003f48:	2800      	cmp	r0, #0
 8003f4a:	bfab      	itete	ge
 8003f4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f4e:	89a3      	ldrhlt	r3, [r4, #12]
 8003f50:	181b      	addge	r3, r3, r0
 8003f52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f56:	bfac      	ite	ge
 8003f58:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f5a:	81a3      	strhlt	r3, [r4, #12]
 8003f5c:	bd10      	pop	{r4, pc}

08003f5e <__swrite>:
 8003f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f62:	461f      	mov	r7, r3
 8003f64:	898b      	ldrh	r3, [r1, #12]
 8003f66:	05db      	lsls	r3, r3, #23
 8003f68:	4605      	mov	r5, r0
 8003f6a:	460c      	mov	r4, r1
 8003f6c:	4616      	mov	r6, r2
 8003f6e:	d505      	bpl.n	8003f7c <__swrite+0x1e>
 8003f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f74:	2302      	movs	r3, #2
 8003f76:	2200      	movs	r2, #0
 8003f78:	f000 ff86 	bl	8004e88 <_lseek_r>
 8003f7c:	89a3      	ldrh	r3, [r4, #12]
 8003f7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f86:	81a3      	strh	r3, [r4, #12]
 8003f88:	4632      	mov	r2, r6
 8003f8a:	463b      	mov	r3, r7
 8003f8c:	4628      	mov	r0, r5
 8003f8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f92:	f000 b817 	b.w	8003fc4 <_write_r>

08003f96 <__sseek>:
 8003f96:	b510      	push	{r4, lr}
 8003f98:	460c      	mov	r4, r1
 8003f9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f9e:	f000 ff73 	bl	8004e88 <_lseek_r>
 8003fa2:	1c43      	adds	r3, r0, #1
 8003fa4:	89a3      	ldrh	r3, [r4, #12]
 8003fa6:	bf15      	itete	ne
 8003fa8:	6560      	strne	r0, [r4, #84]	; 0x54
 8003faa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003fae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003fb2:	81a3      	strheq	r3, [r4, #12]
 8003fb4:	bf18      	it	ne
 8003fb6:	81a3      	strhne	r3, [r4, #12]
 8003fb8:	bd10      	pop	{r4, pc}

08003fba <__sclose>:
 8003fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fbe:	f000 b813 	b.w	8003fe8 <_close_r>
	...

08003fc4 <_write_r>:
 8003fc4:	b538      	push	{r3, r4, r5, lr}
 8003fc6:	4d07      	ldr	r5, [pc, #28]	; (8003fe4 <_write_r+0x20>)
 8003fc8:	4604      	mov	r4, r0
 8003fca:	4608      	mov	r0, r1
 8003fcc:	4611      	mov	r1, r2
 8003fce:	2200      	movs	r2, #0
 8003fd0:	602a      	str	r2, [r5, #0]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	f7fe ff63 	bl	8002e9e <_write>
 8003fd8:	1c43      	adds	r3, r0, #1
 8003fda:	d102      	bne.n	8003fe2 <_write_r+0x1e>
 8003fdc:	682b      	ldr	r3, [r5, #0]
 8003fde:	b103      	cbz	r3, 8003fe2 <_write_r+0x1e>
 8003fe0:	6023      	str	r3, [r4, #0]
 8003fe2:	bd38      	pop	{r3, r4, r5, pc}
 8003fe4:	2000034c 	.word	0x2000034c

08003fe8 <_close_r>:
 8003fe8:	b538      	push	{r3, r4, r5, lr}
 8003fea:	4d06      	ldr	r5, [pc, #24]	; (8004004 <_close_r+0x1c>)
 8003fec:	2300      	movs	r3, #0
 8003fee:	4604      	mov	r4, r0
 8003ff0:	4608      	mov	r0, r1
 8003ff2:	602b      	str	r3, [r5, #0]
 8003ff4:	f7fe ff84 	bl	8002f00 <_close>
 8003ff8:	1c43      	adds	r3, r0, #1
 8003ffa:	d102      	bne.n	8004002 <_close_r+0x1a>
 8003ffc:	682b      	ldr	r3, [r5, #0]
 8003ffe:	b103      	cbz	r3, 8004002 <_close_r+0x1a>
 8004000:	6023      	str	r3, [r4, #0]
 8004002:	bd38      	pop	{r3, r4, r5, pc}
 8004004:	2000034c 	.word	0x2000034c

08004008 <quorem>:
 8004008:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800400c:	6903      	ldr	r3, [r0, #16]
 800400e:	690c      	ldr	r4, [r1, #16]
 8004010:	42a3      	cmp	r3, r4
 8004012:	4607      	mov	r7, r0
 8004014:	f2c0 8081 	blt.w	800411a <quorem+0x112>
 8004018:	3c01      	subs	r4, #1
 800401a:	f101 0814 	add.w	r8, r1, #20
 800401e:	f100 0514 	add.w	r5, r0, #20
 8004022:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004026:	9301      	str	r3, [sp, #4]
 8004028:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800402c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004030:	3301      	adds	r3, #1
 8004032:	429a      	cmp	r2, r3
 8004034:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004038:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800403c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004040:	d331      	bcc.n	80040a6 <quorem+0x9e>
 8004042:	f04f 0e00 	mov.w	lr, #0
 8004046:	4640      	mov	r0, r8
 8004048:	46ac      	mov	ip, r5
 800404a:	46f2      	mov	sl, lr
 800404c:	f850 2b04 	ldr.w	r2, [r0], #4
 8004050:	b293      	uxth	r3, r2
 8004052:	fb06 e303 	mla	r3, r6, r3, lr
 8004056:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800405a:	b29b      	uxth	r3, r3
 800405c:	ebaa 0303 	sub.w	r3, sl, r3
 8004060:	f8dc a000 	ldr.w	sl, [ip]
 8004064:	0c12      	lsrs	r2, r2, #16
 8004066:	fa13 f38a 	uxtah	r3, r3, sl
 800406a:	fb06 e202 	mla	r2, r6, r2, lr
 800406e:	9300      	str	r3, [sp, #0]
 8004070:	9b00      	ldr	r3, [sp, #0]
 8004072:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004076:	b292      	uxth	r2, r2
 8004078:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800407c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004080:	f8bd 3000 	ldrh.w	r3, [sp]
 8004084:	4581      	cmp	r9, r0
 8004086:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800408a:	f84c 3b04 	str.w	r3, [ip], #4
 800408e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004092:	d2db      	bcs.n	800404c <quorem+0x44>
 8004094:	f855 300b 	ldr.w	r3, [r5, fp]
 8004098:	b92b      	cbnz	r3, 80040a6 <quorem+0x9e>
 800409a:	9b01      	ldr	r3, [sp, #4]
 800409c:	3b04      	subs	r3, #4
 800409e:	429d      	cmp	r5, r3
 80040a0:	461a      	mov	r2, r3
 80040a2:	d32e      	bcc.n	8004102 <quorem+0xfa>
 80040a4:	613c      	str	r4, [r7, #16]
 80040a6:	4638      	mov	r0, r7
 80040a8:	f001 f9a4 	bl	80053f4 <__mcmp>
 80040ac:	2800      	cmp	r0, #0
 80040ae:	db24      	blt.n	80040fa <quorem+0xf2>
 80040b0:	3601      	adds	r6, #1
 80040b2:	4628      	mov	r0, r5
 80040b4:	f04f 0c00 	mov.w	ip, #0
 80040b8:	f858 2b04 	ldr.w	r2, [r8], #4
 80040bc:	f8d0 e000 	ldr.w	lr, [r0]
 80040c0:	b293      	uxth	r3, r2
 80040c2:	ebac 0303 	sub.w	r3, ip, r3
 80040c6:	0c12      	lsrs	r2, r2, #16
 80040c8:	fa13 f38e 	uxtah	r3, r3, lr
 80040cc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80040d0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80040da:	45c1      	cmp	r9, r8
 80040dc:	f840 3b04 	str.w	r3, [r0], #4
 80040e0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80040e4:	d2e8      	bcs.n	80040b8 <quorem+0xb0>
 80040e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80040ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80040ee:	b922      	cbnz	r2, 80040fa <quorem+0xf2>
 80040f0:	3b04      	subs	r3, #4
 80040f2:	429d      	cmp	r5, r3
 80040f4:	461a      	mov	r2, r3
 80040f6:	d30a      	bcc.n	800410e <quorem+0x106>
 80040f8:	613c      	str	r4, [r7, #16]
 80040fa:	4630      	mov	r0, r6
 80040fc:	b003      	add	sp, #12
 80040fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004102:	6812      	ldr	r2, [r2, #0]
 8004104:	3b04      	subs	r3, #4
 8004106:	2a00      	cmp	r2, #0
 8004108:	d1cc      	bne.n	80040a4 <quorem+0x9c>
 800410a:	3c01      	subs	r4, #1
 800410c:	e7c7      	b.n	800409e <quorem+0x96>
 800410e:	6812      	ldr	r2, [r2, #0]
 8004110:	3b04      	subs	r3, #4
 8004112:	2a00      	cmp	r2, #0
 8004114:	d1f0      	bne.n	80040f8 <quorem+0xf0>
 8004116:	3c01      	subs	r4, #1
 8004118:	e7eb      	b.n	80040f2 <quorem+0xea>
 800411a:	2000      	movs	r0, #0
 800411c:	e7ee      	b.n	80040fc <quorem+0xf4>
	...

08004120 <_dtoa_r>:
 8004120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004124:	ed2d 8b04 	vpush	{d8-d9}
 8004128:	ec57 6b10 	vmov	r6, r7, d0
 800412c:	b093      	sub	sp, #76	; 0x4c
 800412e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004130:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8004134:	9106      	str	r1, [sp, #24]
 8004136:	ee10 aa10 	vmov	sl, s0
 800413a:	4604      	mov	r4, r0
 800413c:	9209      	str	r2, [sp, #36]	; 0x24
 800413e:	930c      	str	r3, [sp, #48]	; 0x30
 8004140:	46bb      	mov	fp, r7
 8004142:	b975      	cbnz	r5, 8004162 <_dtoa_r+0x42>
 8004144:	2010      	movs	r0, #16
 8004146:	f000 feb1 	bl	8004eac <malloc>
 800414a:	4602      	mov	r2, r0
 800414c:	6260      	str	r0, [r4, #36]	; 0x24
 800414e:	b920      	cbnz	r0, 800415a <_dtoa_r+0x3a>
 8004150:	4ba7      	ldr	r3, [pc, #668]	; (80043f0 <_dtoa_r+0x2d0>)
 8004152:	21ea      	movs	r1, #234	; 0xea
 8004154:	48a7      	ldr	r0, [pc, #668]	; (80043f4 <_dtoa_r+0x2d4>)
 8004156:	f001 fcdd 	bl	8005b14 <__assert_func>
 800415a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800415e:	6005      	str	r5, [r0, #0]
 8004160:	60c5      	str	r5, [r0, #12]
 8004162:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004164:	6819      	ldr	r1, [r3, #0]
 8004166:	b151      	cbz	r1, 800417e <_dtoa_r+0x5e>
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	604a      	str	r2, [r1, #4]
 800416c:	2301      	movs	r3, #1
 800416e:	4093      	lsls	r3, r2
 8004170:	608b      	str	r3, [r1, #8]
 8004172:	4620      	mov	r0, r4
 8004174:	f000 fefc 	bl	8004f70 <_Bfree>
 8004178:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	1e3b      	subs	r3, r7, #0
 8004180:	bfaa      	itet	ge
 8004182:	2300      	movge	r3, #0
 8004184:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8004188:	f8c8 3000 	strge.w	r3, [r8]
 800418c:	4b9a      	ldr	r3, [pc, #616]	; (80043f8 <_dtoa_r+0x2d8>)
 800418e:	bfbc      	itt	lt
 8004190:	2201      	movlt	r2, #1
 8004192:	f8c8 2000 	strlt.w	r2, [r8]
 8004196:	ea33 030b 	bics.w	r3, r3, fp
 800419a:	d11b      	bne.n	80041d4 <_dtoa_r+0xb4>
 800419c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800419e:	f242 730f 	movw	r3, #9999	; 0x270f
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80041a8:	4333      	orrs	r3, r6
 80041aa:	f000 8592 	beq.w	8004cd2 <_dtoa_r+0xbb2>
 80041ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80041b0:	b963      	cbnz	r3, 80041cc <_dtoa_r+0xac>
 80041b2:	4b92      	ldr	r3, [pc, #584]	; (80043fc <_dtoa_r+0x2dc>)
 80041b4:	e022      	b.n	80041fc <_dtoa_r+0xdc>
 80041b6:	4b92      	ldr	r3, [pc, #584]	; (8004400 <_dtoa_r+0x2e0>)
 80041b8:	9301      	str	r3, [sp, #4]
 80041ba:	3308      	adds	r3, #8
 80041bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	9801      	ldr	r0, [sp, #4]
 80041c2:	b013      	add	sp, #76	; 0x4c
 80041c4:	ecbd 8b04 	vpop	{d8-d9}
 80041c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041cc:	4b8b      	ldr	r3, [pc, #556]	; (80043fc <_dtoa_r+0x2dc>)
 80041ce:	9301      	str	r3, [sp, #4]
 80041d0:	3303      	adds	r3, #3
 80041d2:	e7f3      	b.n	80041bc <_dtoa_r+0x9c>
 80041d4:	2200      	movs	r2, #0
 80041d6:	2300      	movs	r3, #0
 80041d8:	4650      	mov	r0, sl
 80041da:	4659      	mov	r1, fp
 80041dc:	f7fc fc7c 	bl	8000ad8 <__aeabi_dcmpeq>
 80041e0:	ec4b ab19 	vmov	d9, sl, fp
 80041e4:	4680      	mov	r8, r0
 80041e6:	b158      	cbz	r0, 8004200 <_dtoa_r+0xe0>
 80041e8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80041ea:	2301      	movs	r3, #1
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 856b 	beq.w	8004ccc <_dtoa_r+0xbac>
 80041f6:	4883      	ldr	r0, [pc, #524]	; (8004404 <_dtoa_r+0x2e4>)
 80041f8:	6018      	str	r0, [r3, #0]
 80041fa:	1e43      	subs	r3, r0, #1
 80041fc:	9301      	str	r3, [sp, #4]
 80041fe:	e7df      	b.n	80041c0 <_dtoa_r+0xa0>
 8004200:	ec4b ab10 	vmov	d0, sl, fp
 8004204:	aa10      	add	r2, sp, #64	; 0x40
 8004206:	a911      	add	r1, sp, #68	; 0x44
 8004208:	4620      	mov	r0, r4
 800420a:	f001 f999 	bl	8005540 <__d2b>
 800420e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8004212:	ee08 0a10 	vmov	s16, r0
 8004216:	2d00      	cmp	r5, #0
 8004218:	f000 8084 	beq.w	8004324 <_dtoa_r+0x204>
 800421c:	ee19 3a90 	vmov	r3, s19
 8004220:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004224:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8004228:	4656      	mov	r6, sl
 800422a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800422e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8004232:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8004236:	4b74      	ldr	r3, [pc, #464]	; (8004408 <_dtoa_r+0x2e8>)
 8004238:	2200      	movs	r2, #0
 800423a:	4630      	mov	r0, r6
 800423c:	4639      	mov	r1, r7
 800423e:	f7fc f82b 	bl	8000298 <__aeabi_dsub>
 8004242:	a365      	add	r3, pc, #404	; (adr r3, 80043d8 <_dtoa_r+0x2b8>)
 8004244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004248:	f7fc f9de 	bl	8000608 <__aeabi_dmul>
 800424c:	a364      	add	r3, pc, #400	; (adr r3, 80043e0 <_dtoa_r+0x2c0>)
 800424e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004252:	f7fc f823 	bl	800029c <__adddf3>
 8004256:	4606      	mov	r6, r0
 8004258:	4628      	mov	r0, r5
 800425a:	460f      	mov	r7, r1
 800425c:	f7fc f96a 	bl	8000534 <__aeabi_i2d>
 8004260:	a361      	add	r3, pc, #388	; (adr r3, 80043e8 <_dtoa_r+0x2c8>)
 8004262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004266:	f7fc f9cf 	bl	8000608 <__aeabi_dmul>
 800426a:	4602      	mov	r2, r0
 800426c:	460b      	mov	r3, r1
 800426e:	4630      	mov	r0, r6
 8004270:	4639      	mov	r1, r7
 8004272:	f7fc f813 	bl	800029c <__adddf3>
 8004276:	4606      	mov	r6, r0
 8004278:	460f      	mov	r7, r1
 800427a:	f7fc fc75 	bl	8000b68 <__aeabi_d2iz>
 800427e:	2200      	movs	r2, #0
 8004280:	9000      	str	r0, [sp, #0]
 8004282:	2300      	movs	r3, #0
 8004284:	4630      	mov	r0, r6
 8004286:	4639      	mov	r1, r7
 8004288:	f7fc fc30 	bl	8000aec <__aeabi_dcmplt>
 800428c:	b150      	cbz	r0, 80042a4 <_dtoa_r+0x184>
 800428e:	9800      	ldr	r0, [sp, #0]
 8004290:	f7fc f950 	bl	8000534 <__aeabi_i2d>
 8004294:	4632      	mov	r2, r6
 8004296:	463b      	mov	r3, r7
 8004298:	f7fc fc1e 	bl	8000ad8 <__aeabi_dcmpeq>
 800429c:	b910      	cbnz	r0, 80042a4 <_dtoa_r+0x184>
 800429e:	9b00      	ldr	r3, [sp, #0]
 80042a0:	3b01      	subs	r3, #1
 80042a2:	9300      	str	r3, [sp, #0]
 80042a4:	9b00      	ldr	r3, [sp, #0]
 80042a6:	2b16      	cmp	r3, #22
 80042a8:	d85a      	bhi.n	8004360 <_dtoa_r+0x240>
 80042aa:	9a00      	ldr	r2, [sp, #0]
 80042ac:	4b57      	ldr	r3, [pc, #348]	; (800440c <_dtoa_r+0x2ec>)
 80042ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80042b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042b6:	ec51 0b19 	vmov	r0, r1, d9
 80042ba:	f7fc fc17 	bl	8000aec <__aeabi_dcmplt>
 80042be:	2800      	cmp	r0, #0
 80042c0:	d050      	beq.n	8004364 <_dtoa_r+0x244>
 80042c2:	9b00      	ldr	r3, [sp, #0]
 80042c4:	3b01      	subs	r3, #1
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	2300      	movs	r3, #0
 80042ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80042cc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80042ce:	1b5d      	subs	r5, r3, r5
 80042d0:	1e6b      	subs	r3, r5, #1
 80042d2:	9305      	str	r3, [sp, #20]
 80042d4:	bf45      	ittet	mi
 80042d6:	f1c5 0301 	rsbmi	r3, r5, #1
 80042da:	9304      	strmi	r3, [sp, #16]
 80042dc:	2300      	movpl	r3, #0
 80042de:	2300      	movmi	r3, #0
 80042e0:	bf4c      	ite	mi
 80042e2:	9305      	strmi	r3, [sp, #20]
 80042e4:	9304      	strpl	r3, [sp, #16]
 80042e6:	9b00      	ldr	r3, [sp, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	db3d      	blt.n	8004368 <_dtoa_r+0x248>
 80042ec:	9b05      	ldr	r3, [sp, #20]
 80042ee:	9a00      	ldr	r2, [sp, #0]
 80042f0:	920a      	str	r2, [sp, #40]	; 0x28
 80042f2:	4413      	add	r3, r2
 80042f4:	9305      	str	r3, [sp, #20]
 80042f6:	2300      	movs	r3, #0
 80042f8:	9307      	str	r3, [sp, #28]
 80042fa:	9b06      	ldr	r3, [sp, #24]
 80042fc:	2b09      	cmp	r3, #9
 80042fe:	f200 8089 	bhi.w	8004414 <_dtoa_r+0x2f4>
 8004302:	2b05      	cmp	r3, #5
 8004304:	bfc4      	itt	gt
 8004306:	3b04      	subgt	r3, #4
 8004308:	9306      	strgt	r3, [sp, #24]
 800430a:	9b06      	ldr	r3, [sp, #24]
 800430c:	f1a3 0302 	sub.w	r3, r3, #2
 8004310:	bfcc      	ite	gt
 8004312:	2500      	movgt	r5, #0
 8004314:	2501      	movle	r5, #1
 8004316:	2b03      	cmp	r3, #3
 8004318:	f200 8087 	bhi.w	800442a <_dtoa_r+0x30a>
 800431c:	e8df f003 	tbb	[pc, r3]
 8004320:	59383a2d 	.word	0x59383a2d
 8004324:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004328:	441d      	add	r5, r3
 800432a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800432e:	2b20      	cmp	r3, #32
 8004330:	bfc1      	itttt	gt
 8004332:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004336:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800433a:	fa0b f303 	lslgt.w	r3, fp, r3
 800433e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004342:	bfda      	itte	le
 8004344:	f1c3 0320 	rsble	r3, r3, #32
 8004348:	fa06 f003 	lslle.w	r0, r6, r3
 800434c:	4318      	orrgt	r0, r3
 800434e:	f7fc f8e1 	bl	8000514 <__aeabi_ui2d>
 8004352:	2301      	movs	r3, #1
 8004354:	4606      	mov	r6, r0
 8004356:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800435a:	3d01      	subs	r5, #1
 800435c:	930e      	str	r3, [sp, #56]	; 0x38
 800435e:	e76a      	b.n	8004236 <_dtoa_r+0x116>
 8004360:	2301      	movs	r3, #1
 8004362:	e7b2      	b.n	80042ca <_dtoa_r+0x1aa>
 8004364:	900b      	str	r0, [sp, #44]	; 0x2c
 8004366:	e7b1      	b.n	80042cc <_dtoa_r+0x1ac>
 8004368:	9b04      	ldr	r3, [sp, #16]
 800436a:	9a00      	ldr	r2, [sp, #0]
 800436c:	1a9b      	subs	r3, r3, r2
 800436e:	9304      	str	r3, [sp, #16]
 8004370:	4253      	negs	r3, r2
 8004372:	9307      	str	r3, [sp, #28]
 8004374:	2300      	movs	r3, #0
 8004376:	930a      	str	r3, [sp, #40]	; 0x28
 8004378:	e7bf      	b.n	80042fa <_dtoa_r+0x1da>
 800437a:	2300      	movs	r3, #0
 800437c:	9308      	str	r3, [sp, #32]
 800437e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004380:	2b00      	cmp	r3, #0
 8004382:	dc55      	bgt.n	8004430 <_dtoa_r+0x310>
 8004384:	2301      	movs	r3, #1
 8004386:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800438a:	461a      	mov	r2, r3
 800438c:	9209      	str	r2, [sp, #36]	; 0x24
 800438e:	e00c      	b.n	80043aa <_dtoa_r+0x28a>
 8004390:	2301      	movs	r3, #1
 8004392:	e7f3      	b.n	800437c <_dtoa_r+0x25c>
 8004394:	2300      	movs	r3, #0
 8004396:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004398:	9308      	str	r3, [sp, #32]
 800439a:	9b00      	ldr	r3, [sp, #0]
 800439c:	4413      	add	r3, r2
 800439e:	9302      	str	r3, [sp, #8]
 80043a0:	3301      	adds	r3, #1
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	9303      	str	r3, [sp, #12]
 80043a6:	bfb8      	it	lt
 80043a8:	2301      	movlt	r3, #1
 80043aa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80043ac:	2200      	movs	r2, #0
 80043ae:	6042      	str	r2, [r0, #4]
 80043b0:	2204      	movs	r2, #4
 80043b2:	f102 0614 	add.w	r6, r2, #20
 80043b6:	429e      	cmp	r6, r3
 80043b8:	6841      	ldr	r1, [r0, #4]
 80043ba:	d93d      	bls.n	8004438 <_dtoa_r+0x318>
 80043bc:	4620      	mov	r0, r4
 80043be:	f000 fd97 	bl	8004ef0 <_Balloc>
 80043c2:	9001      	str	r0, [sp, #4]
 80043c4:	2800      	cmp	r0, #0
 80043c6:	d13b      	bne.n	8004440 <_dtoa_r+0x320>
 80043c8:	4b11      	ldr	r3, [pc, #68]	; (8004410 <_dtoa_r+0x2f0>)
 80043ca:	4602      	mov	r2, r0
 80043cc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80043d0:	e6c0      	b.n	8004154 <_dtoa_r+0x34>
 80043d2:	2301      	movs	r3, #1
 80043d4:	e7df      	b.n	8004396 <_dtoa_r+0x276>
 80043d6:	bf00      	nop
 80043d8:	636f4361 	.word	0x636f4361
 80043dc:	3fd287a7 	.word	0x3fd287a7
 80043e0:	8b60c8b3 	.word	0x8b60c8b3
 80043e4:	3fc68a28 	.word	0x3fc68a28
 80043e8:	509f79fb 	.word	0x509f79fb
 80043ec:	3fd34413 	.word	0x3fd34413
 80043f0:	08005ea5 	.word	0x08005ea5
 80043f4:	08005ebc 	.word	0x08005ebc
 80043f8:	7ff00000 	.word	0x7ff00000
 80043fc:	08005ea1 	.word	0x08005ea1
 8004400:	08005e98 	.word	0x08005e98
 8004404:	08005e75 	.word	0x08005e75
 8004408:	3ff80000 	.word	0x3ff80000
 800440c:	08005fb0 	.word	0x08005fb0
 8004410:	08005f17 	.word	0x08005f17
 8004414:	2501      	movs	r5, #1
 8004416:	2300      	movs	r3, #0
 8004418:	9306      	str	r3, [sp, #24]
 800441a:	9508      	str	r5, [sp, #32]
 800441c:	f04f 33ff 	mov.w	r3, #4294967295
 8004420:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004424:	2200      	movs	r2, #0
 8004426:	2312      	movs	r3, #18
 8004428:	e7b0      	b.n	800438c <_dtoa_r+0x26c>
 800442a:	2301      	movs	r3, #1
 800442c:	9308      	str	r3, [sp, #32]
 800442e:	e7f5      	b.n	800441c <_dtoa_r+0x2fc>
 8004430:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004432:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004436:	e7b8      	b.n	80043aa <_dtoa_r+0x28a>
 8004438:	3101      	adds	r1, #1
 800443a:	6041      	str	r1, [r0, #4]
 800443c:	0052      	lsls	r2, r2, #1
 800443e:	e7b8      	b.n	80043b2 <_dtoa_r+0x292>
 8004440:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004442:	9a01      	ldr	r2, [sp, #4]
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	9b03      	ldr	r3, [sp, #12]
 8004448:	2b0e      	cmp	r3, #14
 800444a:	f200 809d 	bhi.w	8004588 <_dtoa_r+0x468>
 800444e:	2d00      	cmp	r5, #0
 8004450:	f000 809a 	beq.w	8004588 <_dtoa_r+0x468>
 8004454:	9b00      	ldr	r3, [sp, #0]
 8004456:	2b00      	cmp	r3, #0
 8004458:	dd32      	ble.n	80044c0 <_dtoa_r+0x3a0>
 800445a:	4ab7      	ldr	r2, [pc, #732]	; (8004738 <_dtoa_r+0x618>)
 800445c:	f003 030f 	and.w	r3, r3, #15
 8004460:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004464:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004468:	9b00      	ldr	r3, [sp, #0]
 800446a:	05d8      	lsls	r0, r3, #23
 800446c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8004470:	d516      	bpl.n	80044a0 <_dtoa_r+0x380>
 8004472:	4bb2      	ldr	r3, [pc, #712]	; (800473c <_dtoa_r+0x61c>)
 8004474:	ec51 0b19 	vmov	r0, r1, d9
 8004478:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800447c:	f7fc f9ee 	bl	800085c <__aeabi_ddiv>
 8004480:	f007 070f 	and.w	r7, r7, #15
 8004484:	4682      	mov	sl, r0
 8004486:	468b      	mov	fp, r1
 8004488:	2503      	movs	r5, #3
 800448a:	4eac      	ldr	r6, [pc, #688]	; (800473c <_dtoa_r+0x61c>)
 800448c:	b957      	cbnz	r7, 80044a4 <_dtoa_r+0x384>
 800448e:	4642      	mov	r2, r8
 8004490:	464b      	mov	r3, r9
 8004492:	4650      	mov	r0, sl
 8004494:	4659      	mov	r1, fp
 8004496:	f7fc f9e1 	bl	800085c <__aeabi_ddiv>
 800449a:	4682      	mov	sl, r0
 800449c:	468b      	mov	fp, r1
 800449e:	e028      	b.n	80044f2 <_dtoa_r+0x3d2>
 80044a0:	2502      	movs	r5, #2
 80044a2:	e7f2      	b.n	800448a <_dtoa_r+0x36a>
 80044a4:	07f9      	lsls	r1, r7, #31
 80044a6:	d508      	bpl.n	80044ba <_dtoa_r+0x39a>
 80044a8:	4640      	mov	r0, r8
 80044aa:	4649      	mov	r1, r9
 80044ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80044b0:	f7fc f8aa 	bl	8000608 <__aeabi_dmul>
 80044b4:	3501      	adds	r5, #1
 80044b6:	4680      	mov	r8, r0
 80044b8:	4689      	mov	r9, r1
 80044ba:	107f      	asrs	r7, r7, #1
 80044bc:	3608      	adds	r6, #8
 80044be:	e7e5      	b.n	800448c <_dtoa_r+0x36c>
 80044c0:	f000 809b 	beq.w	80045fa <_dtoa_r+0x4da>
 80044c4:	9b00      	ldr	r3, [sp, #0]
 80044c6:	4f9d      	ldr	r7, [pc, #628]	; (800473c <_dtoa_r+0x61c>)
 80044c8:	425e      	negs	r6, r3
 80044ca:	4b9b      	ldr	r3, [pc, #620]	; (8004738 <_dtoa_r+0x618>)
 80044cc:	f006 020f 	and.w	r2, r6, #15
 80044d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80044d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044d8:	ec51 0b19 	vmov	r0, r1, d9
 80044dc:	f7fc f894 	bl	8000608 <__aeabi_dmul>
 80044e0:	1136      	asrs	r6, r6, #4
 80044e2:	4682      	mov	sl, r0
 80044e4:	468b      	mov	fp, r1
 80044e6:	2300      	movs	r3, #0
 80044e8:	2502      	movs	r5, #2
 80044ea:	2e00      	cmp	r6, #0
 80044ec:	d17a      	bne.n	80045e4 <_dtoa_r+0x4c4>
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1d3      	bne.n	800449a <_dtoa_r+0x37a>
 80044f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 8082 	beq.w	80045fe <_dtoa_r+0x4de>
 80044fa:	4b91      	ldr	r3, [pc, #580]	; (8004740 <_dtoa_r+0x620>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	4650      	mov	r0, sl
 8004500:	4659      	mov	r1, fp
 8004502:	f7fc faf3 	bl	8000aec <__aeabi_dcmplt>
 8004506:	2800      	cmp	r0, #0
 8004508:	d079      	beq.n	80045fe <_dtoa_r+0x4de>
 800450a:	9b03      	ldr	r3, [sp, #12]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d076      	beq.n	80045fe <_dtoa_r+0x4de>
 8004510:	9b02      	ldr	r3, [sp, #8]
 8004512:	2b00      	cmp	r3, #0
 8004514:	dd36      	ble.n	8004584 <_dtoa_r+0x464>
 8004516:	9b00      	ldr	r3, [sp, #0]
 8004518:	4650      	mov	r0, sl
 800451a:	4659      	mov	r1, fp
 800451c:	1e5f      	subs	r7, r3, #1
 800451e:	2200      	movs	r2, #0
 8004520:	4b88      	ldr	r3, [pc, #544]	; (8004744 <_dtoa_r+0x624>)
 8004522:	f7fc f871 	bl	8000608 <__aeabi_dmul>
 8004526:	9e02      	ldr	r6, [sp, #8]
 8004528:	4682      	mov	sl, r0
 800452a:	468b      	mov	fp, r1
 800452c:	3501      	adds	r5, #1
 800452e:	4628      	mov	r0, r5
 8004530:	f7fc f800 	bl	8000534 <__aeabi_i2d>
 8004534:	4652      	mov	r2, sl
 8004536:	465b      	mov	r3, fp
 8004538:	f7fc f866 	bl	8000608 <__aeabi_dmul>
 800453c:	4b82      	ldr	r3, [pc, #520]	; (8004748 <_dtoa_r+0x628>)
 800453e:	2200      	movs	r2, #0
 8004540:	f7fb feac 	bl	800029c <__adddf3>
 8004544:	46d0      	mov	r8, sl
 8004546:	46d9      	mov	r9, fp
 8004548:	4682      	mov	sl, r0
 800454a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800454e:	2e00      	cmp	r6, #0
 8004550:	d158      	bne.n	8004604 <_dtoa_r+0x4e4>
 8004552:	4b7e      	ldr	r3, [pc, #504]	; (800474c <_dtoa_r+0x62c>)
 8004554:	2200      	movs	r2, #0
 8004556:	4640      	mov	r0, r8
 8004558:	4649      	mov	r1, r9
 800455a:	f7fb fe9d 	bl	8000298 <__aeabi_dsub>
 800455e:	4652      	mov	r2, sl
 8004560:	465b      	mov	r3, fp
 8004562:	4680      	mov	r8, r0
 8004564:	4689      	mov	r9, r1
 8004566:	f7fc fadf 	bl	8000b28 <__aeabi_dcmpgt>
 800456a:	2800      	cmp	r0, #0
 800456c:	f040 8295 	bne.w	8004a9a <_dtoa_r+0x97a>
 8004570:	4652      	mov	r2, sl
 8004572:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8004576:	4640      	mov	r0, r8
 8004578:	4649      	mov	r1, r9
 800457a:	f7fc fab7 	bl	8000aec <__aeabi_dcmplt>
 800457e:	2800      	cmp	r0, #0
 8004580:	f040 8289 	bne.w	8004a96 <_dtoa_r+0x976>
 8004584:	ec5b ab19 	vmov	sl, fp, d9
 8004588:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800458a:	2b00      	cmp	r3, #0
 800458c:	f2c0 8148 	blt.w	8004820 <_dtoa_r+0x700>
 8004590:	9a00      	ldr	r2, [sp, #0]
 8004592:	2a0e      	cmp	r2, #14
 8004594:	f300 8144 	bgt.w	8004820 <_dtoa_r+0x700>
 8004598:	4b67      	ldr	r3, [pc, #412]	; (8004738 <_dtoa_r+0x618>)
 800459a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800459e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80045a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f280 80d5 	bge.w	8004754 <_dtoa_r+0x634>
 80045aa:	9b03      	ldr	r3, [sp, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f300 80d1 	bgt.w	8004754 <_dtoa_r+0x634>
 80045b2:	f040 826f 	bne.w	8004a94 <_dtoa_r+0x974>
 80045b6:	4b65      	ldr	r3, [pc, #404]	; (800474c <_dtoa_r+0x62c>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	4640      	mov	r0, r8
 80045bc:	4649      	mov	r1, r9
 80045be:	f7fc f823 	bl	8000608 <__aeabi_dmul>
 80045c2:	4652      	mov	r2, sl
 80045c4:	465b      	mov	r3, fp
 80045c6:	f7fc faa5 	bl	8000b14 <__aeabi_dcmpge>
 80045ca:	9e03      	ldr	r6, [sp, #12]
 80045cc:	4637      	mov	r7, r6
 80045ce:	2800      	cmp	r0, #0
 80045d0:	f040 8245 	bne.w	8004a5e <_dtoa_r+0x93e>
 80045d4:	9d01      	ldr	r5, [sp, #4]
 80045d6:	2331      	movs	r3, #49	; 0x31
 80045d8:	f805 3b01 	strb.w	r3, [r5], #1
 80045dc:	9b00      	ldr	r3, [sp, #0]
 80045de:	3301      	adds	r3, #1
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	e240      	b.n	8004a66 <_dtoa_r+0x946>
 80045e4:	07f2      	lsls	r2, r6, #31
 80045e6:	d505      	bpl.n	80045f4 <_dtoa_r+0x4d4>
 80045e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045ec:	f7fc f80c 	bl	8000608 <__aeabi_dmul>
 80045f0:	3501      	adds	r5, #1
 80045f2:	2301      	movs	r3, #1
 80045f4:	1076      	asrs	r6, r6, #1
 80045f6:	3708      	adds	r7, #8
 80045f8:	e777      	b.n	80044ea <_dtoa_r+0x3ca>
 80045fa:	2502      	movs	r5, #2
 80045fc:	e779      	b.n	80044f2 <_dtoa_r+0x3d2>
 80045fe:	9f00      	ldr	r7, [sp, #0]
 8004600:	9e03      	ldr	r6, [sp, #12]
 8004602:	e794      	b.n	800452e <_dtoa_r+0x40e>
 8004604:	9901      	ldr	r1, [sp, #4]
 8004606:	4b4c      	ldr	r3, [pc, #304]	; (8004738 <_dtoa_r+0x618>)
 8004608:	4431      	add	r1, r6
 800460a:	910d      	str	r1, [sp, #52]	; 0x34
 800460c:	9908      	ldr	r1, [sp, #32]
 800460e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004612:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004616:	2900      	cmp	r1, #0
 8004618:	d043      	beq.n	80046a2 <_dtoa_r+0x582>
 800461a:	494d      	ldr	r1, [pc, #308]	; (8004750 <_dtoa_r+0x630>)
 800461c:	2000      	movs	r0, #0
 800461e:	f7fc f91d 	bl	800085c <__aeabi_ddiv>
 8004622:	4652      	mov	r2, sl
 8004624:	465b      	mov	r3, fp
 8004626:	f7fb fe37 	bl	8000298 <__aeabi_dsub>
 800462a:	9d01      	ldr	r5, [sp, #4]
 800462c:	4682      	mov	sl, r0
 800462e:	468b      	mov	fp, r1
 8004630:	4649      	mov	r1, r9
 8004632:	4640      	mov	r0, r8
 8004634:	f7fc fa98 	bl	8000b68 <__aeabi_d2iz>
 8004638:	4606      	mov	r6, r0
 800463a:	f7fb ff7b 	bl	8000534 <__aeabi_i2d>
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	4640      	mov	r0, r8
 8004644:	4649      	mov	r1, r9
 8004646:	f7fb fe27 	bl	8000298 <__aeabi_dsub>
 800464a:	3630      	adds	r6, #48	; 0x30
 800464c:	f805 6b01 	strb.w	r6, [r5], #1
 8004650:	4652      	mov	r2, sl
 8004652:	465b      	mov	r3, fp
 8004654:	4680      	mov	r8, r0
 8004656:	4689      	mov	r9, r1
 8004658:	f7fc fa48 	bl	8000aec <__aeabi_dcmplt>
 800465c:	2800      	cmp	r0, #0
 800465e:	d163      	bne.n	8004728 <_dtoa_r+0x608>
 8004660:	4642      	mov	r2, r8
 8004662:	464b      	mov	r3, r9
 8004664:	4936      	ldr	r1, [pc, #216]	; (8004740 <_dtoa_r+0x620>)
 8004666:	2000      	movs	r0, #0
 8004668:	f7fb fe16 	bl	8000298 <__aeabi_dsub>
 800466c:	4652      	mov	r2, sl
 800466e:	465b      	mov	r3, fp
 8004670:	f7fc fa3c 	bl	8000aec <__aeabi_dcmplt>
 8004674:	2800      	cmp	r0, #0
 8004676:	f040 80b5 	bne.w	80047e4 <_dtoa_r+0x6c4>
 800467a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800467c:	429d      	cmp	r5, r3
 800467e:	d081      	beq.n	8004584 <_dtoa_r+0x464>
 8004680:	4b30      	ldr	r3, [pc, #192]	; (8004744 <_dtoa_r+0x624>)
 8004682:	2200      	movs	r2, #0
 8004684:	4650      	mov	r0, sl
 8004686:	4659      	mov	r1, fp
 8004688:	f7fb ffbe 	bl	8000608 <__aeabi_dmul>
 800468c:	4b2d      	ldr	r3, [pc, #180]	; (8004744 <_dtoa_r+0x624>)
 800468e:	4682      	mov	sl, r0
 8004690:	468b      	mov	fp, r1
 8004692:	4640      	mov	r0, r8
 8004694:	4649      	mov	r1, r9
 8004696:	2200      	movs	r2, #0
 8004698:	f7fb ffb6 	bl	8000608 <__aeabi_dmul>
 800469c:	4680      	mov	r8, r0
 800469e:	4689      	mov	r9, r1
 80046a0:	e7c6      	b.n	8004630 <_dtoa_r+0x510>
 80046a2:	4650      	mov	r0, sl
 80046a4:	4659      	mov	r1, fp
 80046a6:	f7fb ffaf 	bl	8000608 <__aeabi_dmul>
 80046aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046ac:	9d01      	ldr	r5, [sp, #4]
 80046ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80046b0:	4682      	mov	sl, r0
 80046b2:	468b      	mov	fp, r1
 80046b4:	4649      	mov	r1, r9
 80046b6:	4640      	mov	r0, r8
 80046b8:	f7fc fa56 	bl	8000b68 <__aeabi_d2iz>
 80046bc:	4606      	mov	r6, r0
 80046be:	f7fb ff39 	bl	8000534 <__aeabi_i2d>
 80046c2:	3630      	adds	r6, #48	; 0x30
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4640      	mov	r0, r8
 80046ca:	4649      	mov	r1, r9
 80046cc:	f7fb fde4 	bl	8000298 <__aeabi_dsub>
 80046d0:	f805 6b01 	strb.w	r6, [r5], #1
 80046d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046d6:	429d      	cmp	r5, r3
 80046d8:	4680      	mov	r8, r0
 80046da:	4689      	mov	r9, r1
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	d124      	bne.n	800472c <_dtoa_r+0x60c>
 80046e2:	4b1b      	ldr	r3, [pc, #108]	; (8004750 <_dtoa_r+0x630>)
 80046e4:	4650      	mov	r0, sl
 80046e6:	4659      	mov	r1, fp
 80046e8:	f7fb fdd8 	bl	800029c <__adddf3>
 80046ec:	4602      	mov	r2, r0
 80046ee:	460b      	mov	r3, r1
 80046f0:	4640      	mov	r0, r8
 80046f2:	4649      	mov	r1, r9
 80046f4:	f7fc fa18 	bl	8000b28 <__aeabi_dcmpgt>
 80046f8:	2800      	cmp	r0, #0
 80046fa:	d173      	bne.n	80047e4 <_dtoa_r+0x6c4>
 80046fc:	4652      	mov	r2, sl
 80046fe:	465b      	mov	r3, fp
 8004700:	4913      	ldr	r1, [pc, #76]	; (8004750 <_dtoa_r+0x630>)
 8004702:	2000      	movs	r0, #0
 8004704:	f7fb fdc8 	bl	8000298 <__aeabi_dsub>
 8004708:	4602      	mov	r2, r0
 800470a:	460b      	mov	r3, r1
 800470c:	4640      	mov	r0, r8
 800470e:	4649      	mov	r1, r9
 8004710:	f7fc f9ec 	bl	8000aec <__aeabi_dcmplt>
 8004714:	2800      	cmp	r0, #0
 8004716:	f43f af35 	beq.w	8004584 <_dtoa_r+0x464>
 800471a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800471c:	1e6b      	subs	r3, r5, #1
 800471e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004720:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8004724:	2b30      	cmp	r3, #48	; 0x30
 8004726:	d0f8      	beq.n	800471a <_dtoa_r+0x5fa>
 8004728:	9700      	str	r7, [sp, #0]
 800472a:	e049      	b.n	80047c0 <_dtoa_r+0x6a0>
 800472c:	4b05      	ldr	r3, [pc, #20]	; (8004744 <_dtoa_r+0x624>)
 800472e:	f7fb ff6b 	bl	8000608 <__aeabi_dmul>
 8004732:	4680      	mov	r8, r0
 8004734:	4689      	mov	r9, r1
 8004736:	e7bd      	b.n	80046b4 <_dtoa_r+0x594>
 8004738:	08005fb0 	.word	0x08005fb0
 800473c:	08005f88 	.word	0x08005f88
 8004740:	3ff00000 	.word	0x3ff00000
 8004744:	40240000 	.word	0x40240000
 8004748:	401c0000 	.word	0x401c0000
 800474c:	40140000 	.word	0x40140000
 8004750:	3fe00000 	.word	0x3fe00000
 8004754:	9d01      	ldr	r5, [sp, #4]
 8004756:	4656      	mov	r6, sl
 8004758:	465f      	mov	r7, fp
 800475a:	4642      	mov	r2, r8
 800475c:	464b      	mov	r3, r9
 800475e:	4630      	mov	r0, r6
 8004760:	4639      	mov	r1, r7
 8004762:	f7fc f87b 	bl	800085c <__aeabi_ddiv>
 8004766:	f7fc f9ff 	bl	8000b68 <__aeabi_d2iz>
 800476a:	4682      	mov	sl, r0
 800476c:	f7fb fee2 	bl	8000534 <__aeabi_i2d>
 8004770:	4642      	mov	r2, r8
 8004772:	464b      	mov	r3, r9
 8004774:	f7fb ff48 	bl	8000608 <__aeabi_dmul>
 8004778:	4602      	mov	r2, r0
 800477a:	460b      	mov	r3, r1
 800477c:	4630      	mov	r0, r6
 800477e:	4639      	mov	r1, r7
 8004780:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8004784:	f7fb fd88 	bl	8000298 <__aeabi_dsub>
 8004788:	f805 6b01 	strb.w	r6, [r5], #1
 800478c:	9e01      	ldr	r6, [sp, #4]
 800478e:	9f03      	ldr	r7, [sp, #12]
 8004790:	1bae      	subs	r6, r5, r6
 8004792:	42b7      	cmp	r7, r6
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	d135      	bne.n	8004806 <_dtoa_r+0x6e6>
 800479a:	f7fb fd7f 	bl	800029c <__adddf3>
 800479e:	4642      	mov	r2, r8
 80047a0:	464b      	mov	r3, r9
 80047a2:	4606      	mov	r6, r0
 80047a4:	460f      	mov	r7, r1
 80047a6:	f7fc f9bf 	bl	8000b28 <__aeabi_dcmpgt>
 80047aa:	b9d0      	cbnz	r0, 80047e2 <_dtoa_r+0x6c2>
 80047ac:	4642      	mov	r2, r8
 80047ae:	464b      	mov	r3, r9
 80047b0:	4630      	mov	r0, r6
 80047b2:	4639      	mov	r1, r7
 80047b4:	f7fc f990 	bl	8000ad8 <__aeabi_dcmpeq>
 80047b8:	b110      	cbz	r0, 80047c0 <_dtoa_r+0x6a0>
 80047ba:	f01a 0f01 	tst.w	sl, #1
 80047be:	d110      	bne.n	80047e2 <_dtoa_r+0x6c2>
 80047c0:	4620      	mov	r0, r4
 80047c2:	ee18 1a10 	vmov	r1, s16
 80047c6:	f000 fbd3 	bl	8004f70 <_Bfree>
 80047ca:	2300      	movs	r3, #0
 80047cc:	9800      	ldr	r0, [sp, #0]
 80047ce:	702b      	strb	r3, [r5, #0]
 80047d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80047d2:	3001      	adds	r0, #1
 80047d4:	6018      	str	r0, [r3, #0]
 80047d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80047d8:	2b00      	cmp	r3, #0
 80047da:	f43f acf1 	beq.w	80041c0 <_dtoa_r+0xa0>
 80047de:	601d      	str	r5, [r3, #0]
 80047e0:	e4ee      	b.n	80041c0 <_dtoa_r+0xa0>
 80047e2:	9f00      	ldr	r7, [sp, #0]
 80047e4:	462b      	mov	r3, r5
 80047e6:	461d      	mov	r5, r3
 80047e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80047ec:	2a39      	cmp	r2, #57	; 0x39
 80047ee:	d106      	bne.n	80047fe <_dtoa_r+0x6de>
 80047f0:	9a01      	ldr	r2, [sp, #4]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d1f7      	bne.n	80047e6 <_dtoa_r+0x6c6>
 80047f6:	9901      	ldr	r1, [sp, #4]
 80047f8:	2230      	movs	r2, #48	; 0x30
 80047fa:	3701      	adds	r7, #1
 80047fc:	700a      	strb	r2, [r1, #0]
 80047fe:	781a      	ldrb	r2, [r3, #0]
 8004800:	3201      	adds	r2, #1
 8004802:	701a      	strb	r2, [r3, #0]
 8004804:	e790      	b.n	8004728 <_dtoa_r+0x608>
 8004806:	4ba6      	ldr	r3, [pc, #664]	; (8004aa0 <_dtoa_r+0x980>)
 8004808:	2200      	movs	r2, #0
 800480a:	f7fb fefd 	bl	8000608 <__aeabi_dmul>
 800480e:	2200      	movs	r2, #0
 8004810:	2300      	movs	r3, #0
 8004812:	4606      	mov	r6, r0
 8004814:	460f      	mov	r7, r1
 8004816:	f7fc f95f 	bl	8000ad8 <__aeabi_dcmpeq>
 800481a:	2800      	cmp	r0, #0
 800481c:	d09d      	beq.n	800475a <_dtoa_r+0x63a>
 800481e:	e7cf      	b.n	80047c0 <_dtoa_r+0x6a0>
 8004820:	9a08      	ldr	r2, [sp, #32]
 8004822:	2a00      	cmp	r2, #0
 8004824:	f000 80d7 	beq.w	80049d6 <_dtoa_r+0x8b6>
 8004828:	9a06      	ldr	r2, [sp, #24]
 800482a:	2a01      	cmp	r2, #1
 800482c:	f300 80ba 	bgt.w	80049a4 <_dtoa_r+0x884>
 8004830:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004832:	2a00      	cmp	r2, #0
 8004834:	f000 80b2 	beq.w	800499c <_dtoa_r+0x87c>
 8004838:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800483c:	9e07      	ldr	r6, [sp, #28]
 800483e:	9d04      	ldr	r5, [sp, #16]
 8004840:	9a04      	ldr	r2, [sp, #16]
 8004842:	441a      	add	r2, r3
 8004844:	9204      	str	r2, [sp, #16]
 8004846:	9a05      	ldr	r2, [sp, #20]
 8004848:	2101      	movs	r1, #1
 800484a:	441a      	add	r2, r3
 800484c:	4620      	mov	r0, r4
 800484e:	9205      	str	r2, [sp, #20]
 8004850:	f000 fc46 	bl	80050e0 <__i2b>
 8004854:	4607      	mov	r7, r0
 8004856:	2d00      	cmp	r5, #0
 8004858:	dd0c      	ble.n	8004874 <_dtoa_r+0x754>
 800485a:	9b05      	ldr	r3, [sp, #20]
 800485c:	2b00      	cmp	r3, #0
 800485e:	dd09      	ble.n	8004874 <_dtoa_r+0x754>
 8004860:	42ab      	cmp	r3, r5
 8004862:	9a04      	ldr	r2, [sp, #16]
 8004864:	bfa8      	it	ge
 8004866:	462b      	movge	r3, r5
 8004868:	1ad2      	subs	r2, r2, r3
 800486a:	9204      	str	r2, [sp, #16]
 800486c:	9a05      	ldr	r2, [sp, #20]
 800486e:	1aed      	subs	r5, r5, r3
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	9305      	str	r3, [sp, #20]
 8004874:	9b07      	ldr	r3, [sp, #28]
 8004876:	b31b      	cbz	r3, 80048c0 <_dtoa_r+0x7a0>
 8004878:	9b08      	ldr	r3, [sp, #32]
 800487a:	2b00      	cmp	r3, #0
 800487c:	f000 80af 	beq.w	80049de <_dtoa_r+0x8be>
 8004880:	2e00      	cmp	r6, #0
 8004882:	dd13      	ble.n	80048ac <_dtoa_r+0x78c>
 8004884:	4639      	mov	r1, r7
 8004886:	4632      	mov	r2, r6
 8004888:	4620      	mov	r0, r4
 800488a:	f000 fce9 	bl	8005260 <__pow5mult>
 800488e:	ee18 2a10 	vmov	r2, s16
 8004892:	4601      	mov	r1, r0
 8004894:	4607      	mov	r7, r0
 8004896:	4620      	mov	r0, r4
 8004898:	f000 fc38 	bl	800510c <__multiply>
 800489c:	ee18 1a10 	vmov	r1, s16
 80048a0:	4680      	mov	r8, r0
 80048a2:	4620      	mov	r0, r4
 80048a4:	f000 fb64 	bl	8004f70 <_Bfree>
 80048a8:	ee08 8a10 	vmov	s16, r8
 80048ac:	9b07      	ldr	r3, [sp, #28]
 80048ae:	1b9a      	subs	r2, r3, r6
 80048b0:	d006      	beq.n	80048c0 <_dtoa_r+0x7a0>
 80048b2:	ee18 1a10 	vmov	r1, s16
 80048b6:	4620      	mov	r0, r4
 80048b8:	f000 fcd2 	bl	8005260 <__pow5mult>
 80048bc:	ee08 0a10 	vmov	s16, r0
 80048c0:	2101      	movs	r1, #1
 80048c2:	4620      	mov	r0, r4
 80048c4:	f000 fc0c 	bl	80050e0 <__i2b>
 80048c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	4606      	mov	r6, r0
 80048ce:	f340 8088 	ble.w	80049e2 <_dtoa_r+0x8c2>
 80048d2:	461a      	mov	r2, r3
 80048d4:	4601      	mov	r1, r0
 80048d6:	4620      	mov	r0, r4
 80048d8:	f000 fcc2 	bl	8005260 <__pow5mult>
 80048dc:	9b06      	ldr	r3, [sp, #24]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	4606      	mov	r6, r0
 80048e2:	f340 8081 	ble.w	80049e8 <_dtoa_r+0x8c8>
 80048e6:	f04f 0800 	mov.w	r8, #0
 80048ea:	6933      	ldr	r3, [r6, #16]
 80048ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80048f0:	6918      	ldr	r0, [r3, #16]
 80048f2:	f000 fba5 	bl	8005040 <__hi0bits>
 80048f6:	f1c0 0020 	rsb	r0, r0, #32
 80048fa:	9b05      	ldr	r3, [sp, #20]
 80048fc:	4418      	add	r0, r3
 80048fe:	f010 001f 	ands.w	r0, r0, #31
 8004902:	f000 8092 	beq.w	8004a2a <_dtoa_r+0x90a>
 8004906:	f1c0 0320 	rsb	r3, r0, #32
 800490a:	2b04      	cmp	r3, #4
 800490c:	f340 808a 	ble.w	8004a24 <_dtoa_r+0x904>
 8004910:	f1c0 001c 	rsb	r0, r0, #28
 8004914:	9b04      	ldr	r3, [sp, #16]
 8004916:	4403      	add	r3, r0
 8004918:	9304      	str	r3, [sp, #16]
 800491a:	9b05      	ldr	r3, [sp, #20]
 800491c:	4403      	add	r3, r0
 800491e:	4405      	add	r5, r0
 8004920:	9305      	str	r3, [sp, #20]
 8004922:	9b04      	ldr	r3, [sp, #16]
 8004924:	2b00      	cmp	r3, #0
 8004926:	dd07      	ble.n	8004938 <_dtoa_r+0x818>
 8004928:	ee18 1a10 	vmov	r1, s16
 800492c:	461a      	mov	r2, r3
 800492e:	4620      	mov	r0, r4
 8004930:	f000 fcf0 	bl	8005314 <__lshift>
 8004934:	ee08 0a10 	vmov	s16, r0
 8004938:	9b05      	ldr	r3, [sp, #20]
 800493a:	2b00      	cmp	r3, #0
 800493c:	dd05      	ble.n	800494a <_dtoa_r+0x82a>
 800493e:	4631      	mov	r1, r6
 8004940:	461a      	mov	r2, r3
 8004942:	4620      	mov	r0, r4
 8004944:	f000 fce6 	bl	8005314 <__lshift>
 8004948:	4606      	mov	r6, r0
 800494a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800494c:	2b00      	cmp	r3, #0
 800494e:	d06e      	beq.n	8004a2e <_dtoa_r+0x90e>
 8004950:	ee18 0a10 	vmov	r0, s16
 8004954:	4631      	mov	r1, r6
 8004956:	f000 fd4d 	bl	80053f4 <__mcmp>
 800495a:	2800      	cmp	r0, #0
 800495c:	da67      	bge.n	8004a2e <_dtoa_r+0x90e>
 800495e:	9b00      	ldr	r3, [sp, #0]
 8004960:	3b01      	subs	r3, #1
 8004962:	ee18 1a10 	vmov	r1, s16
 8004966:	9300      	str	r3, [sp, #0]
 8004968:	220a      	movs	r2, #10
 800496a:	2300      	movs	r3, #0
 800496c:	4620      	mov	r0, r4
 800496e:	f000 fb21 	bl	8004fb4 <__multadd>
 8004972:	9b08      	ldr	r3, [sp, #32]
 8004974:	ee08 0a10 	vmov	s16, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 81b1 	beq.w	8004ce0 <_dtoa_r+0xbc0>
 800497e:	2300      	movs	r3, #0
 8004980:	4639      	mov	r1, r7
 8004982:	220a      	movs	r2, #10
 8004984:	4620      	mov	r0, r4
 8004986:	f000 fb15 	bl	8004fb4 <__multadd>
 800498a:	9b02      	ldr	r3, [sp, #8]
 800498c:	2b00      	cmp	r3, #0
 800498e:	4607      	mov	r7, r0
 8004990:	f300 808e 	bgt.w	8004ab0 <_dtoa_r+0x990>
 8004994:	9b06      	ldr	r3, [sp, #24]
 8004996:	2b02      	cmp	r3, #2
 8004998:	dc51      	bgt.n	8004a3e <_dtoa_r+0x91e>
 800499a:	e089      	b.n	8004ab0 <_dtoa_r+0x990>
 800499c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800499e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80049a2:	e74b      	b.n	800483c <_dtoa_r+0x71c>
 80049a4:	9b03      	ldr	r3, [sp, #12]
 80049a6:	1e5e      	subs	r6, r3, #1
 80049a8:	9b07      	ldr	r3, [sp, #28]
 80049aa:	42b3      	cmp	r3, r6
 80049ac:	bfbf      	itttt	lt
 80049ae:	9b07      	ldrlt	r3, [sp, #28]
 80049b0:	9607      	strlt	r6, [sp, #28]
 80049b2:	1af2      	sublt	r2, r6, r3
 80049b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80049b6:	bfb6      	itet	lt
 80049b8:	189b      	addlt	r3, r3, r2
 80049ba:	1b9e      	subge	r6, r3, r6
 80049bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80049be:	9b03      	ldr	r3, [sp, #12]
 80049c0:	bfb8      	it	lt
 80049c2:	2600      	movlt	r6, #0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	bfb7      	itett	lt
 80049c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80049cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80049d0:	1a9d      	sublt	r5, r3, r2
 80049d2:	2300      	movlt	r3, #0
 80049d4:	e734      	b.n	8004840 <_dtoa_r+0x720>
 80049d6:	9e07      	ldr	r6, [sp, #28]
 80049d8:	9d04      	ldr	r5, [sp, #16]
 80049da:	9f08      	ldr	r7, [sp, #32]
 80049dc:	e73b      	b.n	8004856 <_dtoa_r+0x736>
 80049de:	9a07      	ldr	r2, [sp, #28]
 80049e0:	e767      	b.n	80048b2 <_dtoa_r+0x792>
 80049e2:	9b06      	ldr	r3, [sp, #24]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	dc18      	bgt.n	8004a1a <_dtoa_r+0x8fa>
 80049e8:	f1ba 0f00 	cmp.w	sl, #0
 80049ec:	d115      	bne.n	8004a1a <_dtoa_r+0x8fa>
 80049ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80049f2:	b993      	cbnz	r3, 8004a1a <_dtoa_r+0x8fa>
 80049f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80049f8:	0d1b      	lsrs	r3, r3, #20
 80049fa:	051b      	lsls	r3, r3, #20
 80049fc:	b183      	cbz	r3, 8004a20 <_dtoa_r+0x900>
 80049fe:	9b04      	ldr	r3, [sp, #16]
 8004a00:	3301      	adds	r3, #1
 8004a02:	9304      	str	r3, [sp, #16]
 8004a04:	9b05      	ldr	r3, [sp, #20]
 8004a06:	3301      	adds	r3, #1
 8004a08:	9305      	str	r3, [sp, #20]
 8004a0a:	f04f 0801 	mov.w	r8, #1
 8004a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	f47f af6a 	bne.w	80048ea <_dtoa_r+0x7ca>
 8004a16:	2001      	movs	r0, #1
 8004a18:	e76f      	b.n	80048fa <_dtoa_r+0x7da>
 8004a1a:	f04f 0800 	mov.w	r8, #0
 8004a1e:	e7f6      	b.n	8004a0e <_dtoa_r+0x8ee>
 8004a20:	4698      	mov	r8, r3
 8004a22:	e7f4      	b.n	8004a0e <_dtoa_r+0x8ee>
 8004a24:	f43f af7d 	beq.w	8004922 <_dtoa_r+0x802>
 8004a28:	4618      	mov	r0, r3
 8004a2a:	301c      	adds	r0, #28
 8004a2c:	e772      	b.n	8004914 <_dtoa_r+0x7f4>
 8004a2e:	9b03      	ldr	r3, [sp, #12]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	dc37      	bgt.n	8004aa4 <_dtoa_r+0x984>
 8004a34:	9b06      	ldr	r3, [sp, #24]
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	dd34      	ble.n	8004aa4 <_dtoa_r+0x984>
 8004a3a:	9b03      	ldr	r3, [sp, #12]
 8004a3c:	9302      	str	r3, [sp, #8]
 8004a3e:	9b02      	ldr	r3, [sp, #8]
 8004a40:	b96b      	cbnz	r3, 8004a5e <_dtoa_r+0x93e>
 8004a42:	4631      	mov	r1, r6
 8004a44:	2205      	movs	r2, #5
 8004a46:	4620      	mov	r0, r4
 8004a48:	f000 fab4 	bl	8004fb4 <__multadd>
 8004a4c:	4601      	mov	r1, r0
 8004a4e:	4606      	mov	r6, r0
 8004a50:	ee18 0a10 	vmov	r0, s16
 8004a54:	f000 fcce 	bl	80053f4 <__mcmp>
 8004a58:	2800      	cmp	r0, #0
 8004a5a:	f73f adbb 	bgt.w	80045d4 <_dtoa_r+0x4b4>
 8004a5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a60:	9d01      	ldr	r5, [sp, #4]
 8004a62:	43db      	mvns	r3, r3
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	f04f 0800 	mov.w	r8, #0
 8004a6a:	4631      	mov	r1, r6
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	f000 fa7f 	bl	8004f70 <_Bfree>
 8004a72:	2f00      	cmp	r7, #0
 8004a74:	f43f aea4 	beq.w	80047c0 <_dtoa_r+0x6a0>
 8004a78:	f1b8 0f00 	cmp.w	r8, #0
 8004a7c:	d005      	beq.n	8004a8a <_dtoa_r+0x96a>
 8004a7e:	45b8      	cmp	r8, r7
 8004a80:	d003      	beq.n	8004a8a <_dtoa_r+0x96a>
 8004a82:	4641      	mov	r1, r8
 8004a84:	4620      	mov	r0, r4
 8004a86:	f000 fa73 	bl	8004f70 <_Bfree>
 8004a8a:	4639      	mov	r1, r7
 8004a8c:	4620      	mov	r0, r4
 8004a8e:	f000 fa6f 	bl	8004f70 <_Bfree>
 8004a92:	e695      	b.n	80047c0 <_dtoa_r+0x6a0>
 8004a94:	2600      	movs	r6, #0
 8004a96:	4637      	mov	r7, r6
 8004a98:	e7e1      	b.n	8004a5e <_dtoa_r+0x93e>
 8004a9a:	9700      	str	r7, [sp, #0]
 8004a9c:	4637      	mov	r7, r6
 8004a9e:	e599      	b.n	80045d4 <_dtoa_r+0x4b4>
 8004aa0:	40240000 	.word	0x40240000
 8004aa4:	9b08      	ldr	r3, [sp, #32]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	f000 80ca 	beq.w	8004c40 <_dtoa_r+0xb20>
 8004aac:	9b03      	ldr	r3, [sp, #12]
 8004aae:	9302      	str	r3, [sp, #8]
 8004ab0:	2d00      	cmp	r5, #0
 8004ab2:	dd05      	ble.n	8004ac0 <_dtoa_r+0x9a0>
 8004ab4:	4639      	mov	r1, r7
 8004ab6:	462a      	mov	r2, r5
 8004ab8:	4620      	mov	r0, r4
 8004aba:	f000 fc2b 	bl	8005314 <__lshift>
 8004abe:	4607      	mov	r7, r0
 8004ac0:	f1b8 0f00 	cmp.w	r8, #0
 8004ac4:	d05b      	beq.n	8004b7e <_dtoa_r+0xa5e>
 8004ac6:	6879      	ldr	r1, [r7, #4]
 8004ac8:	4620      	mov	r0, r4
 8004aca:	f000 fa11 	bl	8004ef0 <_Balloc>
 8004ace:	4605      	mov	r5, r0
 8004ad0:	b928      	cbnz	r0, 8004ade <_dtoa_r+0x9be>
 8004ad2:	4b87      	ldr	r3, [pc, #540]	; (8004cf0 <_dtoa_r+0xbd0>)
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004ada:	f7ff bb3b 	b.w	8004154 <_dtoa_r+0x34>
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	3202      	adds	r2, #2
 8004ae2:	0092      	lsls	r2, r2, #2
 8004ae4:	f107 010c 	add.w	r1, r7, #12
 8004ae8:	300c      	adds	r0, #12
 8004aea:	f000 f9e7 	bl	8004ebc <memcpy>
 8004aee:	2201      	movs	r2, #1
 8004af0:	4629      	mov	r1, r5
 8004af2:	4620      	mov	r0, r4
 8004af4:	f000 fc0e 	bl	8005314 <__lshift>
 8004af8:	9b01      	ldr	r3, [sp, #4]
 8004afa:	f103 0901 	add.w	r9, r3, #1
 8004afe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8004b02:	4413      	add	r3, r2
 8004b04:	9305      	str	r3, [sp, #20]
 8004b06:	f00a 0301 	and.w	r3, sl, #1
 8004b0a:	46b8      	mov	r8, r7
 8004b0c:	9304      	str	r3, [sp, #16]
 8004b0e:	4607      	mov	r7, r0
 8004b10:	4631      	mov	r1, r6
 8004b12:	ee18 0a10 	vmov	r0, s16
 8004b16:	f7ff fa77 	bl	8004008 <quorem>
 8004b1a:	4641      	mov	r1, r8
 8004b1c:	9002      	str	r0, [sp, #8]
 8004b1e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004b22:	ee18 0a10 	vmov	r0, s16
 8004b26:	f000 fc65 	bl	80053f4 <__mcmp>
 8004b2a:	463a      	mov	r2, r7
 8004b2c:	9003      	str	r0, [sp, #12]
 8004b2e:	4631      	mov	r1, r6
 8004b30:	4620      	mov	r0, r4
 8004b32:	f000 fc7b 	bl	800542c <__mdiff>
 8004b36:	68c2      	ldr	r2, [r0, #12]
 8004b38:	f109 3bff 	add.w	fp, r9, #4294967295
 8004b3c:	4605      	mov	r5, r0
 8004b3e:	bb02      	cbnz	r2, 8004b82 <_dtoa_r+0xa62>
 8004b40:	4601      	mov	r1, r0
 8004b42:	ee18 0a10 	vmov	r0, s16
 8004b46:	f000 fc55 	bl	80053f4 <__mcmp>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	4629      	mov	r1, r5
 8004b4e:	4620      	mov	r0, r4
 8004b50:	9207      	str	r2, [sp, #28]
 8004b52:	f000 fa0d 	bl	8004f70 <_Bfree>
 8004b56:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004b5a:	ea43 0102 	orr.w	r1, r3, r2
 8004b5e:	9b04      	ldr	r3, [sp, #16]
 8004b60:	430b      	orrs	r3, r1
 8004b62:	464d      	mov	r5, r9
 8004b64:	d10f      	bne.n	8004b86 <_dtoa_r+0xa66>
 8004b66:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004b6a:	d02a      	beq.n	8004bc2 <_dtoa_r+0xaa2>
 8004b6c:	9b03      	ldr	r3, [sp, #12]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	dd02      	ble.n	8004b78 <_dtoa_r+0xa58>
 8004b72:	9b02      	ldr	r3, [sp, #8]
 8004b74:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8004b78:	f88b a000 	strb.w	sl, [fp]
 8004b7c:	e775      	b.n	8004a6a <_dtoa_r+0x94a>
 8004b7e:	4638      	mov	r0, r7
 8004b80:	e7ba      	b.n	8004af8 <_dtoa_r+0x9d8>
 8004b82:	2201      	movs	r2, #1
 8004b84:	e7e2      	b.n	8004b4c <_dtoa_r+0xa2c>
 8004b86:	9b03      	ldr	r3, [sp, #12]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	db04      	blt.n	8004b96 <_dtoa_r+0xa76>
 8004b8c:	9906      	ldr	r1, [sp, #24]
 8004b8e:	430b      	orrs	r3, r1
 8004b90:	9904      	ldr	r1, [sp, #16]
 8004b92:	430b      	orrs	r3, r1
 8004b94:	d122      	bne.n	8004bdc <_dtoa_r+0xabc>
 8004b96:	2a00      	cmp	r2, #0
 8004b98:	ddee      	ble.n	8004b78 <_dtoa_r+0xa58>
 8004b9a:	ee18 1a10 	vmov	r1, s16
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	f000 fbb7 	bl	8005314 <__lshift>
 8004ba6:	4631      	mov	r1, r6
 8004ba8:	ee08 0a10 	vmov	s16, r0
 8004bac:	f000 fc22 	bl	80053f4 <__mcmp>
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	dc03      	bgt.n	8004bbc <_dtoa_r+0xa9c>
 8004bb4:	d1e0      	bne.n	8004b78 <_dtoa_r+0xa58>
 8004bb6:	f01a 0f01 	tst.w	sl, #1
 8004bba:	d0dd      	beq.n	8004b78 <_dtoa_r+0xa58>
 8004bbc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004bc0:	d1d7      	bne.n	8004b72 <_dtoa_r+0xa52>
 8004bc2:	2339      	movs	r3, #57	; 0x39
 8004bc4:	f88b 3000 	strb.w	r3, [fp]
 8004bc8:	462b      	mov	r3, r5
 8004bca:	461d      	mov	r5, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8004bd2:	2a39      	cmp	r2, #57	; 0x39
 8004bd4:	d071      	beq.n	8004cba <_dtoa_r+0xb9a>
 8004bd6:	3201      	adds	r2, #1
 8004bd8:	701a      	strb	r2, [r3, #0]
 8004bda:	e746      	b.n	8004a6a <_dtoa_r+0x94a>
 8004bdc:	2a00      	cmp	r2, #0
 8004bde:	dd07      	ble.n	8004bf0 <_dtoa_r+0xad0>
 8004be0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8004be4:	d0ed      	beq.n	8004bc2 <_dtoa_r+0xaa2>
 8004be6:	f10a 0301 	add.w	r3, sl, #1
 8004bea:	f88b 3000 	strb.w	r3, [fp]
 8004bee:	e73c      	b.n	8004a6a <_dtoa_r+0x94a>
 8004bf0:	9b05      	ldr	r3, [sp, #20]
 8004bf2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8004bf6:	4599      	cmp	r9, r3
 8004bf8:	d047      	beq.n	8004c8a <_dtoa_r+0xb6a>
 8004bfa:	ee18 1a10 	vmov	r1, s16
 8004bfe:	2300      	movs	r3, #0
 8004c00:	220a      	movs	r2, #10
 8004c02:	4620      	mov	r0, r4
 8004c04:	f000 f9d6 	bl	8004fb4 <__multadd>
 8004c08:	45b8      	cmp	r8, r7
 8004c0a:	ee08 0a10 	vmov	s16, r0
 8004c0e:	f04f 0300 	mov.w	r3, #0
 8004c12:	f04f 020a 	mov.w	r2, #10
 8004c16:	4641      	mov	r1, r8
 8004c18:	4620      	mov	r0, r4
 8004c1a:	d106      	bne.n	8004c2a <_dtoa_r+0xb0a>
 8004c1c:	f000 f9ca 	bl	8004fb4 <__multadd>
 8004c20:	4680      	mov	r8, r0
 8004c22:	4607      	mov	r7, r0
 8004c24:	f109 0901 	add.w	r9, r9, #1
 8004c28:	e772      	b.n	8004b10 <_dtoa_r+0x9f0>
 8004c2a:	f000 f9c3 	bl	8004fb4 <__multadd>
 8004c2e:	4639      	mov	r1, r7
 8004c30:	4680      	mov	r8, r0
 8004c32:	2300      	movs	r3, #0
 8004c34:	220a      	movs	r2, #10
 8004c36:	4620      	mov	r0, r4
 8004c38:	f000 f9bc 	bl	8004fb4 <__multadd>
 8004c3c:	4607      	mov	r7, r0
 8004c3e:	e7f1      	b.n	8004c24 <_dtoa_r+0xb04>
 8004c40:	9b03      	ldr	r3, [sp, #12]
 8004c42:	9302      	str	r3, [sp, #8]
 8004c44:	9d01      	ldr	r5, [sp, #4]
 8004c46:	ee18 0a10 	vmov	r0, s16
 8004c4a:	4631      	mov	r1, r6
 8004c4c:	f7ff f9dc 	bl	8004008 <quorem>
 8004c50:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8004c54:	9b01      	ldr	r3, [sp, #4]
 8004c56:	f805 ab01 	strb.w	sl, [r5], #1
 8004c5a:	1aea      	subs	r2, r5, r3
 8004c5c:	9b02      	ldr	r3, [sp, #8]
 8004c5e:	4293      	cmp	r3, r2
 8004c60:	dd09      	ble.n	8004c76 <_dtoa_r+0xb56>
 8004c62:	ee18 1a10 	vmov	r1, s16
 8004c66:	2300      	movs	r3, #0
 8004c68:	220a      	movs	r2, #10
 8004c6a:	4620      	mov	r0, r4
 8004c6c:	f000 f9a2 	bl	8004fb4 <__multadd>
 8004c70:	ee08 0a10 	vmov	s16, r0
 8004c74:	e7e7      	b.n	8004c46 <_dtoa_r+0xb26>
 8004c76:	9b02      	ldr	r3, [sp, #8]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	bfc8      	it	gt
 8004c7c:	461d      	movgt	r5, r3
 8004c7e:	9b01      	ldr	r3, [sp, #4]
 8004c80:	bfd8      	it	le
 8004c82:	2501      	movle	r5, #1
 8004c84:	441d      	add	r5, r3
 8004c86:	f04f 0800 	mov.w	r8, #0
 8004c8a:	ee18 1a10 	vmov	r1, s16
 8004c8e:	2201      	movs	r2, #1
 8004c90:	4620      	mov	r0, r4
 8004c92:	f000 fb3f 	bl	8005314 <__lshift>
 8004c96:	4631      	mov	r1, r6
 8004c98:	ee08 0a10 	vmov	s16, r0
 8004c9c:	f000 fbaa 	bl	80053f4 <__mcmp>
 8004ca0:	2800      	cmp	r0, #0
 8004ca2:	dc91      	bgt.n	8004bc8 <_dtoa_r+0xaa8>
 8004ca4:	d102      	bne.n	8004cac <_dtoa_r+0xb8c>
 8004ca6:	f01a 0f01 	tst.w	sl, #1
 8004caa:	d18d      	bne.n	8004bc8 <_dtoa_r+0xaa8>
 8004cac:	462b      	mov	r3, r5
 8004cae:	461d      	mov	r5, r3
 8004cb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004cb4:	2a30      	cmp	r2, #48	; 0x30
 8004cb6:	d0fa      	beq.n	8004cae <_dtoa_r+0xb8e>
 8004cb8:	e6d7      	b.n	8004a6a <_dtoa_r+0x94a>
 8004cba:	9a01      	ldr	r2, [sp, #4]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d184      	bne.n	8004bca <_dtoa_r+0xaaa>
 8004cc0:	9b00      	ldr	r3, [sp, #0]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	2331      	movs	r3, #49	; 0x31
 8004cc8:	7013      	strb	r3, [r2, #0]
 8004cca:	e6ce      	b.n	8004a6a <_dtoa_r+0x94a>
 8004ccc:	4b09      	ldr	r3, [pc, #36]	; (8004cf4 <_dtoa_r+0xbd4>)
 8004cce:	f7ff ba95 	b.w	80041fc <_dtoa_r+0xdc>
 8004cd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f47f aa6e 	bne.w	80041b6 <_dtoa_r+0x96>
 8004cda:	4b07      	ldr	r3, [pc, #28]	; (8004cf8 <_dtoa_r+0xbd8>)
 8004cdc:	f7ff ba8e 	b.w	80041fc <_dtoa_r+0xdc>
 8004ce0:	9b02      	ldr	r3, [sp, #8]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	dcae      	bgt.n	8004c44 <_dtoa_r+0xb24>
 8004ce6:	9b06      	ldr	r3, [sp, #24]
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	f73f aea8 	bgt.w	8004a3e <_dtoa_r+0x91e>
 8004cee:	e7a9      	b.n	8004c44 <_dtoa_r+0xb24>
 8004cf0:	08005f17 	.word	0x08005f17
 8004cf4:	08005e74 	.word	0x08005e74
 8004cf8:	08005e98 	.word	0x08005e98

08004cfc <__sflush_r>:
 8004cfc:	898a      	ldrh	r2, [r1, #12]
 8004cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d02:	4605      	mov	r5, r0
 8004d04:	0710      	lsls	r0, r2, #28
 8004d06:	460c      	mov	r4, r1
 8004d08:	d458      	bmi.n	8004dbc <__sflush_r+0xc0>
 8004d0a:	684b      	ldr	r3, [r1, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	dc05      	bgt.n	8004d1c <__sflush_r+0x20>
 8004d10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	dc02      	bgt.n	8004d1c <__sflush_r+0x20>
 8004d16:	2000      	movs	r0, #0
 8004d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d1e:	2e00      	cmp	r6, #0
 8004d20:	d0f9      	beq.n	8004d16 <__sflush_r+0x1a>
 8004d22:	2300      	movs	r3, #0
 8004d24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d28:	682f      	ldr	r7, [r5, #0]
 8004d2a:	602b      	str	r3, [r5, #0]
 8004d2c:	d032      	beq.n	8004d94 <__sflush_r+0x98>
 8004d2e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d30:	89a3      	ldrh	r3, [r4, #12]
 8004d32:	075a      	lsls	r2, r3, #29
 8004d34:	d505      	bpl.n	8004d42 <__sflush_r+0x46>
 8004d36:	6863      	ldr	r3, [r4, #4]
 8004d38:	1ac0      	subs	r0, r0, r3
 8004d3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d3c:	b10b      	cbz	r3, 8004d42 <__sflush_r+0x46>
 8004d3e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d40:	1ac0      	subs	r0, r0, r3
 8004d42:	2300      	movs	r3, #0
 8004d44:	4602      	mov	r2, r0
 8004d46:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d48:	6a21      	ldr	r1, [r4, #32]
 8004d4a:	4628      	mov	r0, r5
 8004d4c:	47b0      	blx	r6
 8004d4e:	1c43      	adds	r3, r0, #1
 8004d50:	89a3      	ldrh	r3, [r4, #12]
 8004d52:	d106      	bne.n	8004d62 <__sflush_r+0x66>
 8004d54:	6829      	ldr	r1, [r5, #0]
 8004d56:	291d      	cmp	r1, #29
 8004d58:	d82c      	bhi.n	8004db4 <__sflush_r+0xb8>
 8004d5a:	4a2a      	ldr	r2, [pc, #168]	; (8004e04 <__sflush_r+0x108>)
 8004d5c:	40ca      	lsrs	r2, r1
 8004d5e:	07d6      	lsls	r6, r2, #31
 8004d60:	d528      	bpl.n	8004db4 <__sflush_r+0xb8>
 8004d62:	2200      	movs	r2, #0
 8004d64:	6062      	str	r2, [r4, #4]
 8004d66:	04d9      	lsls	r1, r3, #19
 8004d68:	6922      	ldr	r2, [r4, #16]
 8004d6a:	6022      	str	r2, [r4, #0]
 8004d6c:	d504      	bpl.n	8004d78 <__sflush_r+0x7c>
 8004d6e:	1c42      	adds	r2, r0, #1
 8004d70:	d101      	bne.n	8004d76 <__sflush_r+0x7a>
 8004d72:	682b      	ldr	r3, [r5, #0]
 8004d74:	b903      	cbnz	r3, 8004d78 <__sflush_r+0x7c>
 8004d76:	6560      	str	r0, [r4, #84]	; 0x54
 8004d78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d7a:	602f      	str	r7, [r5, #0]
 8004d7c:	2900      	cmp	r1, #0
 8004d7e:	d0ca      	beq.n	8004d16 <__sflush_r+0x1a>
 8004d80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d84:	4299      	cmp	r1, r3
 8004d86:	d002      	beq.n	8004d8e <__sflush_r+0x92>
 8004d88:	4628      	mov	r0, r5
 8004d8a:	f000 fc4b 	bl	8005624 <_free_r>
 8004d8e:	2000      	movs	r0, #0
 8004d90:	6360      	str	r0, [r4, #52]	; 0x34
 8004d92:	e7c1      	b.n	8004d18 <__sflush_r+0x1c>
 8004d94:	6a21      	ldr	r1, [r4, #32]
 8004d96:	2301      	movs	r3, #1
 8004d98:	4628      	mov	r0, r5
 8004d9a:	47b0      	blx	r6
 8004d9c:	1c41      	adds	r1, r0, #1
 8004d9e:	d1c7      	bne.n	8004d30 <__sflush_r+0x34>
 8004da0:	682b      	ldr	r3, [r5, #0]
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0c4      	beq.n	8004d30 <__sflush_r+0x34>
 8004da6:	2b1d      	cmp	r3, #29
 8004da8:	d001      	beq.n	8004dae <__sflush_r+0xb2>
 8004daa:	2b16      	cmp	r3, #22
 8004dac:	d101      	bne.n	8004db2 <__sflush_r+0xb6>
 8004dae:	602f      	str	r7, [r5, #0]
 8004db0:	e7b1      	b.n	8004d16 <__sflush_r+0x1a>
 8004db2:	89a3      	ldrh	r3, [r4, #12]
 8004db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004db8:	81a3      	strh	r3, [r4, #12]
 8004dba:	e7ad      	b.n	8004d18 <__sflush_r+0x1c>
 8004dbc:	690f      	ldr	r7, [r1, #16]
 8004dbe:	2f00      	cmp	r7, #0
 8004dc0:	d0a9      	beq.n	8004d16 <__sflush_r+0x1a>
 8004dc2:	0793      	lsls	r3, r2, #30
 8004dc4:	680e      	ldr	r6, [r1, #0]
 8004dc6:	bf08      	it	eq
 8004dc8:	694b      	ldreq	r3, [r1, #20]
 8004dca:	600f      	str	r7, [r1, #0]
 8004dcc:	bf18      	it	ne
 8004dce:	2300      	movne	r3, #0
 8004dd0:	eba6 0807 	sub.w	r8, r6, r7
 8004dd4:	608b      	str	r3, [r1, #8]
 8004dd6:	f1b8 0f00 	cmp.w	r8, #0
 8004dda:	dd9c      	ble.n	8004d16 <__sflush_r+0x1a>
 8004ddc:	6a21      	ldr	r1, [r4, #32]
 8004dde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004de0:	4643      	mov	r3, r8
 8004de2:	463a      	mov	r2, r7
 8004de4:	4628      	mov	r0, r5
 8004de6:	47b0      	blx	r6
 8004de8:	2800      	cmp	r0, #0
 8004dea:	dc06      	bgt.n	8004dfa <__sflush_r+0xfe>
 8004dec:	89a3      	ldrh	r3, [r4, #12]
 8004dee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004df2:	81a3      	strh	r3, [r4, #12]
 8004df4:	f04f 30ff 	mov.w	r0, #4294967295
 8004df8:	e78e      	b.n	8004d18 <__sflush_r+0x1c>
 8004dfa:	4407      	add	r7, r0
 8004dfc:	eba8 0800 	sub.w	r8, r8, r0
 8004e00:	e7e9      	b.n	8004dd6 <__sflush_r+0xda>
 8004e02:	bf00      	nop
 8004e04:	20400001 	.word	0x20400001

08004e08 <_fflush_r>:
 8004e08:	b538      	push	{r3, r4, r5, lr}
 8004e0a:	690b      	ldr	r3, [r1, #16]
 8004e0c:	4605      	mov	r5, r0
 8004e0e:	460c      	mov	r4, r1
 8004e10:	b913      	cbnz	r3, 8004e18 <_fflush_r+0x10>
 8004e12:	2500      	movs	r5, #0
 8004e14:	4628      	mov	r0, r5
 8004e16:	bd38      	pop	{r3, r4, r5, pc}
 8004e18:	b118      	cbz	r0, 8004e22 <_fflush_r+0x1a>
 8004e1a:	6983      	ldr	r3, [r0, #24]
 8004e1c:	b90b      	cbnz	r3, 8004e22 <_fflush_r+0x1a>
 8004e1e:	f7fe fa99 	bl	8003354 <__sinit>
 8004e22:	4b14      	ldr	r3, [pc, #80]	; (8004e74 <_fflush_r+0x6c>)
 8004e24:	429c      	cmp	r4, r3
 8004e26:	d11b      	bne.n	8004e60 <_fflush_r+0x58>
 8004e28:	686c      	ldr	r4, [r5, #4]
 8004e2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0ef      	beq.n	8004e12 <_fflush_r+0xa>
 8004e32:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004e34:	07d0      	lsls	r0, r2, #31
 8004e36:	d404      	bmi.n	8004e42 <_fflush_r+0x3a>
 8004e38:	0599      	lsls	r1, r3, #22
 8004e3a:	d402      	bmi.n	8004e42 <_fflush_r+0x3a>
 8004e3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e3e:	f7fe fb4c 	bl	80034da <__retarget_lock_acquire_recursive>
 8004e42:	4628      	mov	r0, r5
 8004e44:	4621      	mov	r1, r4
 8004e46:	f7ff ff59 	bl	8004cfc <__sflush_r>
 8004e4a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e4c:	07da      	lsls	r2, r3, #31
 8004e4e:	4605      	mov	r5, r0
 8004e50:	d4e0      	bmi.n	8004e14 <_fflush_r+0xc>
 8004e52:	89a3      	ldrh	r3, [r4, #12]
 8004e54:	059b      	lsls	r3, r3, #22
 8004e56:	d4dd      	bmi.n	8004e14 <_fflush_r+0xc>
 8004e58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e5a:	f7fe fb3f 	bl	80034dc <__retarget_lock_release_recursive>
 8004e5e:	e7d9      	b.n	8004e14 <_fflush_r+0xc>
 8004e60:	4b05      	ldr	r3, [pc, #20]	; (8004e78 <_fflush_r+0x70>)
 8004e62:	429c      	cmp	r4, r3
 8004e64:	d101      	bne.n	8004e6a <_fflush_r+0x62>
 8004e66:	68ac      	ldr	r4, [r5, #8]
 8004e68:	e7df      	b.n	8004e2a <_fflush_r+0x22>
 8004e6a:	4b04      	ldr	r3, [pc, #16]	; (8004e7c <_fflush_r+0x74>)
 8004e6c:	429c      	cmp	r4, r3
 8004e6e:	bf08      	it	eq
 8004e70:	68ec      	ldreq	r4, [r5, #12]
 8004e72:	e7da      	b.n	8004e2a <_fflush_r+0x22>
 8004e74:	08005e20 	.word	0x08005e20
 8004e78:	08005e40 	.word	0x08005e40
 8004e7c:	08005e00 	.word	0x08005e00

08004e80 <_localeconv_r>:
 8004e80:	4800      	ldr	r0, [pc, #0]	; (8004e84 <_localeconv_r+0x4>)
 8004e82:	4770      	bx	lr
 8004e84:	20000168 	.word	0x20000168

08004e88 <_lseek_r>:
 8004e88:	b538      	push	{r3, r4, r5, lr}
 8004e8a:	4d07      	ldr	r5, [pc, #28]	; (8004ea8 <_lseek_r+0x20>)
 8004e8c:	4604      	mov	r4, r0
 8004e8e:	4608      	mov	r0, r1
 8004e90:	4611      	mov	r1, r2
 8004e92:	2200      	movs	r2, #0
 8004e94:	602a      	str	r2, [r5, #0]
 8004e96:	461a      	mov	r2, r3
 8004e98:	f7fd ffef 	bl	8002e7a <_lseek>
 8004e9c:	1c43      	adds	r3, r0, #1
 8004e9e:	d102      	bne.n	8004ea6 <_lseek_r+0x1e>
 8004ea0:	682b      	ldr	r3, [r5, #0]
 8004ea2:	b103      	cbz	r3, 8004ea6 <_lseek_r+0x1e>
 8004ea4:	6023      	str	r3, [r4, #0]
 8004ea6:	bd38      	pop	{r3, r4, r5, pc}
 8004ea8:	2000034c 	.word	0x2000034c

08004eac <malloc>:
 8004eac:	4b02      	ldr	r3, [pc, #8]	; (8004eb8 <malloc+0xc>)
 8004eae:	4601      	mov	r1, r0
 8004eb0:	6818      	ldr	r0, [r3, #0]
 8004eb2:	f7fe bb3d 	b.w	8003530 <_malloc_r>
 8004eb6:	bf00      	nop
 8004eb8:	20000014 	.word	0x20000014

08004ebc <memcpy>:
 8004ebc:	440a      	add	r2, r1
 8004ebe:	4291      	cmp	r1, r2
 8004ec0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ec4:	d100      	bne.n	8004ec8 <memcpy+0xc>
 8004ec6:	4770      	bx	lr
 8004ec8:	b510      	push	{r4, lr}
 8004eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ece:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ed2:	4291      	cmp	r1, r2
 8004ed4:	d1f9      	bne.n	8004eca <memcpy+0xe>
 8004ed6:	bd10      	pop	{r4, pc}

08004ed8 <__malloc_lock>:
 8004ed8:	4801      	ldr	r0, [pc, #4]	; (8004ee0 <__malloc_lock+0x8>)
 8004eda:	f7fe bafe 	b.w	80034da <__retarget_lock_acquire_recursive>
 8004ede:	bf00      	nop
 8004ee0:	20000340 	.word	0x20000340

08004ee4 <__malloc_unlock>:
 8004ee4:	4801      	ldr	r0, [pc, #4]	; (8004eec <__malloc_unlock+0x8>)
 8004ee6:	f7fe baf9 	b.w	80034dc <__retarget_lock_release_recursive>
 8004eea:	bf00      	nop
 8004eec:	20000340 	.word	0x20000340

08004ef0 <_Balloc>:
 8004ef0:	b570      	push	{r4, r5, r6, lr}
 8004ef2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004ef4:	4604      	mov	r4, r0
 8004ef6:	460d      	mov	r5, r1
 8004ef8:	b976      	cbnz	r6, 8004f18 <_Balloc+0x28>
 8004efa:	2010      	movs	r0, #16
 8004efc:	f7ff ffd6 	bl	8004eac <malloc>
 8004f00:	4602      	mov	r2, r0
 8004f02:	6260      	str	r0, [r4, #36]	; 0x24
 8004f04:	b920      	cbnz	r0, 8004f10 <_Balloc+0x20>
 8004f06:	4b18      	ldr	r3, [pc, #96]	; (8004f68 <_Balloc+0x78>)
 8004f08:	4818      	ldr	r0, [pc, #96]	; (8004f6c <_Balloc+0x7c>)
 8004f0a:	2166      	movs	r1, #102	; 0x66
 8004f0c:	f000 fe02 	bl	8005b14 <__assert_func>
 8004f10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f14:	6006      	str	r6, [r0, #0]
 8004f16:	60c6      	str	r6, [r0, #12]
 8004f18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004f1a:	68f3      	ldr	r3, [r6, #12]
 8004f1c:	b183      	cbz	r3, 8004f40 <_Balloc+0x50>
 8004f1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f20:	68db      	ldr	r3, [r3, #12]
 8004f22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004f26:	b9b8      	cbnz	r0, 8004f58 <_Balloc+0x68>
 8004f28:	2101      	movs	r1, #1
 8004f2a:	fa01 f605 	lsl.w	r6, r1, r5
 8004f2e:	1d72      	adds	r2, r6, #5
 8004f30:	0092      	lsls	r2, r2, #2
 8004f32:	4620      	mov	r0, r4
 8004f34:	f000 fb60 	bl	80055f8 <_calloc_r>
 8004f38:	b160      	cbz	r0, 8004f54 <_Balloc+0x64>
 8004f3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004f3e:	e00e      	b.n	8004f5e <_Balloc+0x6e>
 8004f40:	2221      	movs	r2, #33	; 0x21
 8004f42:	2104      	movs	r1, #4
 8004f44:	4620      	mov	r0, r4
 8004f46:	f000 fb57 	bl	80055f8 <_calloc_r>
 8004f4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f4c:	60f0      	str	r0, [r6, #12]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d1e4      	bne.n	8004f1e <_Balloc+0x2e>
 8004f54:	2000      	movs	r0, #0
 8004f56:	bd70      	pop	{r4, r5, r6, pc}
 8004f58:	6802      	ldr	r2, [r0, #0]
 8004f5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004f5e:	2300      	movs	r3, #0
 8004f60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004f64:	e7f7      	b.n	8004f56 <_Balloc+0x66>
 8004f66:	bf00      	nop
 8004f68:	08005ea5 	.word	0x08005ea5
 8004f6c:	08005f28 	.word	0x08005f28

08004f70 <_Bfree>:
 8004f70:	b570      	push	{r4, r5, r6, lr}
 8004f72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004f74:	4605      	mov	r5, r0
 8004f76:	460c      	mov	r4, r1
 8004f78:	b976      	cbnz	r6, 8004f98 <_Bfree+0x28>
 8004f7a:	2010      	movs	r0, #16
 8004f7c:	f7ff ff96 	bl	8004eac <malloc>
 8004f80:	4602      	mov	r2, r0
 8004f82:	6268      	str	r0, [r5, #36]	; 0x24
 8004f84:	b920      	cbnz	r0, 8004f90 <_Bfree+0x20>
 8004f86:	4b09      	ldr	r3, [pc, #36]	; (8004fac <_Bfree+0x3c>)
 8004f88:	4809      	ldr	r0, [pc, #36]	; (8004fb0 <_Bfree+0x40>)
 8004f8a:	218a      	movs	r1, #138	; 0x8a
 8004f8c:	f000 fdc2 	bl	8005b14 <__assert_func>
 8004f90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004f94:	6006      	str	r6, [r0, #0]
 8004f96:	60c6      	str	r6, [r0, #12]
 8004f98:	b13c      	cbz	r4, 8004faa <_Bfree+0x3a>
 8004f9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004f9c:	6862      	ldr	r2, [r4, #4]
 8004f9e:	68db      	ldr	r3, [r3, #12]
 8004fa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004fa4:	6021      	str	r1, [r4, #0]
 8004fa6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004faa:	bd70      	pop	{r4, r5, r6, pc}
 8004fac:	08005ea5 	.word	0x08005ea5
 8004fb0:	08005f28 	.word	0x08005f28

08004fb4 <__multadd>:
 8004fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fb8:	690d      	ldr	r5, [r1, #16]
 8004fba:	4607      	mov	r7, r0
 8004fbc:	460c      	mov	r4, r1
 8004fbe:	461e      	mov	r6, r3
 8004fc0:	f101 0c14 	add.w	ip, r1, #20
 8004fc4:	2000      	movs	r0, #0
 8004fc6:	f8dc 3000 	ldr.w	r3, [ip]
 8004fca:	b299      	uxth	r1, r3
 8004fcc:	fb02 6101 	mla	r1, r2, r1, r6
 8004fd0:	0c1e      	lsrs	r6, r3, #16
 8004fd2:	0c0b      	lsrs	r3, r1, #16
 8004fd4:	fb02 3306 	mla	r3, r2, r6, r3
 8004fd8:	b289      	uxth	r1, r1
 8004fda:	3001      	adds	r0, #1
 8004fdc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004fe0:	4285      	cmp	r5, r0
 8004fe2:	f84c 1b04 	str.w	r1, [ip], #4
 8004fe6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004fea:	dcec      	bgt.n	8004fc6 <__multadd+0x12>
 8004fec:	b30e      	cbz	r6, 8005032 <__multadd+0x7e>
 8004fee:	68a3      	ldr	r3, [r4, #8]
 8004ff0:	42ab      	cmp	r3, r5
 8004ff2:	dc19      	bgt.n	8005028 <__multadd+0x74>
 8004ff4:	6861      	ldr	r1, [r4, #4]
 8004ff6:	4638      	mov	r0, r7
 8004ff8:	3101      	adds	r1, #1
 8004ffa:	f7ff ff79 	bl	8004ef0 <_Balloc>
 8004ffe:	4680      	mov	r8, r0
 8005000:	b928      	cbnz	r0, 800500e <__multadd+0x5a>
 8005002:	4602      	mov	r2, r0
 8005004:	4b0c      	ldr	r3, [pc, #48]	; (8005038 <__multadd+0x84>)
 8005006:	480d      	ldr	r0, [pc, #52]	; (800503c <__multadd+0x88>)
 8005008:	21b5      	movs	r1, #181	; 0xb5
 800500a:	f000 fd83 	bl	8005b14 <__assert_func>
 800500e:	6922      	ldr	r2, [r4, #16]
 8005010:	3202      	adds	r2, #2
 8005012:	f104 010c 	add.w	r1, r4, #12
 8005016:	0092      	lsls	r2, r2, #2
 8005018:	300c      	adds	r0, #12
 800501a:	f7ff ff4f 	bl	8004ebc <memcpy>
 800501e:	4621      	mov	r1, r4
 8005020:	4638      	mov	r0, r7
 8005022:	f7ff ffa5 	bl	8004f70 <_Bfree>
 8005026:	4644      	mov	r4, r8
 8005028:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800502c:	3501      	adds	r5, #1
 800502e:	615e      	str	r6, [r3, #20]
 8005030:	6125      	str	r5, [r4, #16]
 8005032:	4620      	mov	r0, r4
 8005034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005038:	08005f17 	.word	0x08005f17
 800503c:	08005f28 	.word	0x08005f28

08005040 <__hi0bits>:
 8005040:	0c03      	lsrs	r3, r0, #16
 8005042:	041b      	lsls	r3, r3, #16
 8005044:	b9d3      	cbnz	r3, 800507c <__hi0bits+0x3c>
 8005046:	0400      	lsls	r0, r0, #16
 8005048:	2310      	movs	r3, #16
 800504a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800504e:	bf04      	itt	eq
 8005050:	0200      	lsleq	r0, r0, #8
 8005052:	3308      	addeq	r3, #8
 8005054:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005058:	bf04      	itt	eq
 800505a:	0100      	lsleq	r0, r0, #4
 800505c:	3304      	addeq	r3, #4
 800505e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005062:	bf04      	itt	eq
 8005064:	0080      	lsleq	r0, r0, #2
 8005066:	3302      	addeq	r3, #2
 8005068:	2800      	cmp	r0, #0
 800506a:	db05      	blt.n	8005078 <__hi0bits+0x38>
 800506c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005070:	f103 0301 	add.w	r3, r3, #1
 8005074:	bf08      	it	eq
 8005076:	2320      	moveq	r3, #32
 8005078:	4618      	mov	r0, r3
 800507a:	4770      	bx	lr
 800507c:	2300      	movs	r3, #0
 800507e:	e7e4      	b.n	800504a <__hi0bits+0xa>

08005080 <__lo0bits>:
 8005080:	6803      	ldr	r3, [r0, #0]
 8005082:	f013 0207 	ands.w	r2, r3, #7
 8005086:	4601      	mov	r1, r0
 8005088:	d00b      	beq.n	80050a2 <__lo0bits+0x22>
 800508a:	07da      	lsls	r2, r3, #31
 800508c:	d423      	bmi.n	80050d6 <__lo0bits+0x56>
 800508e:	0798      	lsls	r0, r3, #30
 8005090:	bf49      	itett	mi
 8005092:	085b      	lsrmi	r3, r3, #1
 8005094:	089b      	lsrpl	r3, r3, #2
 8005096:	2001      	movmi	r0, #1
 8005098:	600b      	strmi	r3, [r1, #0]
 800509a:	bf5c      	itt	pl
 800509c:	600b      	strpl	r3, [r1, #0]
 800509e:	2002      	movpl	r0, #2
 80050a0:	4770      	bx	lr
 80050a2:	b298      	uxth	r0, r3
 80050a4:	b9a8      	cbnz	r0, 80050d2 <__lo0bits+0x52>
 80050a6:	0c1b      	lsrs	r3, r3, #16
 80050a8:	2010      	movs	r0, #16
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	b90a      	cbnz	r2, 80050b2 <__lo0bits+0x32>
 80050ae:	3008      	adds	r0, #8
 80050b0:	0a1b      	lsrs	r3, r3, #8
 80050b2:	071a      	lsls	r2, r3, #28
 80050b4:	bf04      	itt	eq
 80050b6:	091b      	lsreq	r3, r3, #4
 80050b8:	3004      	addeq	r0, #4
 80050ba:	079a      	lsls	r2, r3, #30
 80050bc:	bf04      	itt	eq
 80050be:	089b      	lsreq	r3, r3, #2
 80050c0:	3002      	addeq	r0, #2
 80050c2:	07da      	lsls	r2, r3, #31
 80050c4:	d403      	bmi.n	80050ce <__lo0bits+0x4e>
 80050c6:	085b      	lsrs	r3, r3, #1
 80050c8:	f100 0001 	add.w	r0, r0, #1
 80050cc:	d005      	beq.n	80050da <__lo0bits+0x5a>
 80050ce:	600b      	str	r3, [r1, #0]
 80050d0:	4770      	bx	lr
 80050d2:	4610      	mov	r0, r2
 80050d4:	e7e9      	b.n	80050aa <__lo0bits+0x2a>
 80050d6:	2000      	movs	r0, #0
 80050d8:	4770      	bx	lr
 80050da:	2020      	movs	r0, #32
 80050dc:	4770      	bx	lr
	...

080050e0 <__i2b>:
 80050e0:	b510      	push	{r4, lr}
 80050e2:	460c      	mov	r4, r1
 80050e4:	2101      	movs	r1, #1
 80050e6:	f7ff ff03 	bl	8004ef0 <_Balloc>
 80050ea:	4602      	mov	r2, r0
 80050ec:	b928      	cbnz	r0, 80050fa <__i2b+0x1a>
 80050ee:	4b05      	ldr	r3, [pc, #20]	; (8005104 <__i2b+0x24>)
 80050f0:	4805      	ldr	r0, [pc, #20]	; (8005108 <__i2b+0x28>)
 80050f2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80050f6:	f000 fd0d 	bl	8005b14 <__assert_func>
 80050fa:	2301      	movs	r3, #1
 80050fc:	6144      	str	r4, [r0, #20]
 80050fe:	6103      	str	r3, [r0, #16]
 8005100:	bd10      	pop	{r4, pc}
 8005102:	bf00      	nop
 8005104:	08005f17 	.word	0x08005f17
 8005108:	08005f28 	.word	0x08005f28

0800510c <__multiply>:
 800510c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005110:	4691      	mov	r9, r2
 8005112:	690a      	ldr	r2, [r1, #16]
 8005114:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005118:	429a      	cmp	r2, r3
 800511a:	bfb8      	it	lt
 800511c:	460b      	movlt	r3, r1
 800511e:	460c      	mov	r4, r1
 8005120:	bfbc      	itt	lt
 8005122:	464c      	movlt	r4, r9
 8005124:	4699      	movlt	r9, r3
 8005126:	6927      	ldr	r7, [r4, #16]
 8005128:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800512c:	68a3      	ldr	r3, [r4, #8]
 800512e:	6861      	ldr	r1, [r4, #4]
 8005130:	eb07 060a 	add.w	r6, r7, sl
 8005134:	42b3      	cmp	r3, r6
 8005136:	b085      	sub	sp, #20
 8005138:	bfb8      	it	lt
 800513a:	3101      	addlt	r1, #1
 800513c:	f7ff fed8 	bl	8004ef0 <_Balloc>
 8005140:	b930      	cbnz	r0, 8005150 <__multiply+0x44>
 8005142:	4602      	mov	r2, r0
 8005144:	4b44      	ldr	r3, [pc, #272]	; (8005258 <__multiply+0x14c>)
 8005146:	4845      	ldr	r0, [pc, #276]	; (800525c <__multiply+0x150>)
 8005148:	f240 115d 	movw	r1, #349	; 0x15d
 800514c:	f000 fce2 	bl	8005b14 <__assert_func>
 8005150:	f100 0514 	add.w	r5, r0, #20
 8005154:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005158:	462b      	mov	r3, r5
 800515a:	2200      	movs	r2, #0
 800515c:	4543      	cmp	r3, r8
 800515e:	d321      	bcc.n	80051a4 <__multiply+0x98>
 8005160:	f104 0314 	add.w	r3, r4, #20
 8005164:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005168:	f109 0314 	add.w	r3, r9, #20
 800516c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005170:	9202      	str	r2, [sp, #8]
 8005172:	1b3a      	subs	r2, r7, r4
 8005174:	3a15      	subs	r2, #21
 8005176:	f022 0203 	bic.w	r2, r2, #3
 800517a:	3204      	adds	r2, #4
 800517c:	f104 0115 	add.w	r1, r4, #21
 8005180:	428f      	cmp	r7, r1
 8005182:	bf38      	it	cc
 8005184:	2204      	movcc	r2, #4
 8005186:	9201      	str	r2, [sp, #4]
 8005188:	9a02      	ldr	r2, [sp, #8]
 800518a:	9303      	str	r3, [sp, #12]
 800518c:	429a      	cmp	r2, r3
 800518e:	d80c      	bhi.n	80051aa <__multiply+0x9e>
 8005190:	2e00      	cmp	r6, #0
 8005192:	dd03      	ble.n	800519c <__multiply+0x90>
 8005194:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005198:	2b00      	cmp	r3, #0
 800519a:	d05a      	beq.n	8005252 <__multiply+0x146>
 800519c:	6106      	str	r6, [r0, #16]
 800519e:	b005      	add	sp, #20
 80051a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051a4:	f843 2b04 	str.w	r2, [r3], #4
 80051a8:	e7d8      	b.n	800515c <__multiply+0x50>
 80051aa:	f8b3 a000 	ldrh.w	sl, [r3]
 80051ae:	f1ba 0f00 	cmp.w	sl, #0
 80051b2:	d024      	beq.n	80051fe <__multiply+0xf2>
 80051b4:	f104 0e14 	add.w	lr, r4, #20
 80051b8:	46a9      	mov	r9, r5
 80051ba:	f04f 0c00 	mov.w	ip, #0
 80051be:	f85e 2b04 	ldr.w	r2, [lr], #4
 80051c2:	f8d9 1000 	ldr.w	r1, [r9]
 80051c6:	fa1f fb82 	uxth.w	fp, r2
 80051ca:	b289      	uxth	r1, r1
 80051cc:	fb0a 110b 	mla	r1, sl, fp, r1
 80051d0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80051d4:	f8d9 2000 	ldr.w	r2, [r9]
 80051d8:	4461      	add	r1, ip
 80051da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80051de:	fb0a c20b 	mla	r2, sl, fp, ip
 80051e2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80051e6:	b289      	uxth	r1, r1
 80051e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80051ec:	4577      	cmp	r7, lr
 80051ee:	f849 1b04 	str.w	r1, [r9], #4
 80051f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80051f6:	d8e2      	bhi.n	80051be <__multiply+0xb2>
 80051f8:	9a01      	ldr	r2, [sp, #4]
 80051fa:	f845 c002 	str.w	ip, [r5, r2]
 80051fe:	9a03      	ldr	r2, [sp, #12]
 8005200:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005204:	3304      	adds	r3, #4
 8005206:	f1b9 0f00 	cmp.w	r9, #0
 800520a:	d020      	beq.n	800524e <__multiply+0x142>
 800520c:	6829      	ldr	r1, [r5, #0]
 800520e:	f104 0c14 	add.w	ip, r4, #20
 8005212:	46ae      	mov	lr, r5
 8005214:	f04f 0a00 	mov.w	sl, #0
 8005218:	f8bc b000 	ldrh.w	fp, [ip]
 800521c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005220:	fb09 220b 	mla	r2, r9, fp, r2
 8005224:	4492      	add	sl, r2
 8005226:	b289      	uxth	r1, r1
 8005228:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800522c:	f84e 1b04 	str.w	r1, [lr], #4
 8005230:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005234:	f8be 1000 	ldrh.w	r1, [lr]
 8005238:	0c12      	lsrs	r2, r2, #16
 800523a:	fb09 1102 	mla	r1, r9, r2, r1
 800523e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005242:	4567      	cmp	r7, ip
 8005244:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005248:	d8e6      	bhi.n	8005218 <__multiply+0x10c>
 800524a:	9a01      	ldr	r2, [sp, #4]
 800524c:	50a9      	str	r1, [r5, r2]
 800524e:	3504      	adds	r5, #4
 8005250:	e79a      	b.n	8005188 <__multiply+0x7c>
 8005252:	3e01      	subs	r6, #1
 8005254:	e79c      	b.n	8005190 <__multiply+0x84>
 8005256:	bf00      	nop
 8005258:	08005f17 	.word	0x08005f17
 800525c:	08005f28 	.word	0x08005f28

08005260 <__pow5mult>:
 8005260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005264:	4615      	mov	r5, r2
 8005266:	f012 0203 	ands.w	r2, r2, #3
 800526a:	4606      	mov	r6, r0
 800526c:	460f      	mov	r7, r1
 800526e:	d007      	beq.n	8005280 <__pow5mult+0x20>
 8005270:	4c25      	ldr	r4, [pc, #148]	; (8005308 <__pow5mult+0xa8>)
 8005272:	3a01      	subs	r2, #1
 8005274:	2300      	movs	r3, #0
 8005276:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800527a:	f7ff fe9b 	bl	8004fb4 <__multadd>
 800527e:	4607      	mov	r7, r0
 8005280:	10ad      	asrs	r5, r5, #2
 8005282:	d03d      	beq.n	8005300 <__pow5mult+0xa0>
 8005284:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005286:	b97c      	cbnz	r4, 80052a8 <__pow5mult+0x48>
 8005288:	2010      	movs	r0, #16
 800528a:	f7ff fe0f 	bl	8004eac <malloc>
 800528e:	4602      	mov	r2, r0
 8005290:	6270      	str	r0, [r6, #36]	; 0x24
 8005292:	b928      	cbnz	r0, 80052a0 <__pow5mult+0x40>
 8005294:	4b1d      	ldr	r3, [pc, #116]	; (800530c <__pow5mult+0xac>)
 8005296:	481e      	ldr	r0, [pc, #120]	; (8005310 <__pow5mult+0xb0>)
 8005298:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800529c:	f000 fc3a 	bl	8005b14 <__assert_func>
 80052a0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80052a4:	6004      	str	r4, [r0, #0]
 80052a6:	60c4      	str	r4, [r0, #12]
 80052a8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80052ac:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80052b0:	b94c      	cbnz	r4, 80052c6 <__pow5mult+0x66>
 80052b2:	f240 2171 	movw	r1, #625	; 0x271
 80052b6:	4630      	mov	r0, r6
 80052b8:	f7ff ff12 	bl	80050e0 <__i2b>
 80052bc:	2300      	movs	r3, #0
 80052be:	f8c8 0008 	str.w	r0, [r8, #8]
 80052c2:	4604      	mov	r4, r0
 80052c4:	6003      	str	r3, [r0, #0]
 80052c6:	f04f 0900 	mov.w	r9, #0
 80052ca:	07eb      	lsls	r3, r5, #31
 80052cc:	d50a      	bpl.n	80052e4 <__pow5mult+0x84>
 80052ce:	4639      	mov	r1, r7
 80052d0:	4622      	mov	r2, r4
 80052d2:	4630      	mov	r0, r6
 80052d4:	f7ff ff1a 	bl	800510c <__multiply>
 80052d8:	4639      	mov	r1, r7
 80052da:	4680      	mov	r8, r0
 80052dc:	4630      	mov	r0, r6
 80052de:	f7ff fe47 	bl	8004f70 <_Bfree>
 80052e2:	4647      	mov	r7, r8
 80052e4:	106d      	asrs	r5, r5, #1
 80052e6:	d00b      	beq.n	8005300 <__pow5mult+0xa0>
 80052e8:	6820      	ldr	r0, [r4, #0]
 80052ea:	b938      	cbnz	r0, 80052fc <__pow5mult+0x9c>
 80052ec:	4622      	mov	r2, r4
 80052ee:	4621      	mov	r1, r4
 80052f0:	4630      	mov	r0, r6
 80052f2:	f7ff ff0b 	bl	800510c <__multiply>
 80052f6:	6020      	str	r0, [r4, #0]
 80052f8:	f8c0 9000 	str.w	r9, [r0]
 80052fc:	4604      	mov	r4, r0
 80052fe:	e7e4      	b.n	80052ca <__pow5mult+0x6a>
 8005300:	4638      	mov	r0, r7
 8005302:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005306:	bf00      	nop
 8005308:	08006078 	.word	0x08006078
 800530c:	08005ea5 	.word	0x08005ea5
 8005310:	08005f28 	.word	0x08005f28

08005314 <__lshift>:
 8005314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005318:	460c      	mov	r4, r1
 800531a:	6849      	ldr	r1, [r1, #4]
 800531c:	6923      	ldr	r3, [r4, #16]
 800531e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005322:	68a3      	ldr	r3, [r4, #8]
 8005324:	4607      	mov	r7, r0
 8005326:	4691      	mov	r9, r2
 8005328:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800532c:	f108 0601 	add.w	r6, r8, #1
 8005330:	42b3      	cmp	r3, r6
 8005332:	db0b      	blt.n	800534c <__lshift+0x38>
 8005334:	4638      	mov	r0, r7
 8005336:	f7ff fddb 	bl	8004ef0 <_Balloc>
 800533a:	4605      	mov	r5, r0
 800533c:	b948      	cbnz	r0, 8005352 <__lshift+0x3e>
 800533e:	4602      	mov	r2, r0
 8005340:	4b2a      	ldr	r3, [pc, #168]	; (80053ec <__lshift+0xd8>)
 8005342:	482b      	ldr	r0, [pc, #172]	; (80053f0 <__lshift+0xdc>)
 8005344:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005348:	f000 fbe4 	bl	8005b14 <__assert_func>
 800534c:	3101      	adds	r1, #1
 800534e:	005b      	lsls	r3, r3, #1
 8005350:	e7ee      	b.n	8005330 <__lshift+0x1c>
 8005352:	2300      	movs	r3, #0
 8005354:	f100 0114 	add.w	r1, r0, #20
 8005358:	f100 0210 	add.w	r2, r0, #16
 800535c:	4618      	mov	r0, r3
 800535e:	4553      	cmp	r3, sl
 8005360:	db37      	blt.n	80053d2 <__lshift+0xbe>
 8005362:	6920      	ldr	r0, [r4, #16]
 8005364:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005368:	f104 0314 	add.w	r3, r4, #20
 800536c:	f019 091f 	ands.w	r9, r9, #31
 8005370:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005374:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005378:	d02f      	beq.n	80053da <__lshift+0xc6>
 800537a:	f1c9 0e20 	rsb	lr, r9, #32
 800537e:	468a      	mov	sl, r1
 8005380:	f04f 0c00 	mov.w	ip, #0
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	fa02 f209 	lsl.w	r2, r2, r9
 800538a:	ea42 020c 	orr.w	r2, r2, ip
 800538e:	f84a 2b04 	str.w	r2, [sl], #4
 8005392:	f853 2b04 	ldr.w	r2, [r3], #4
 8005396:	4298      	cmp	r0, r3
 8005398:	fa22 fc0e 	lsr.w	ip, r2, lr
 800539c:	d8f2      	bhi.n	8005384 <__lshift+0x70>
 800539e:	1b03      	subs	r3, r0, r4
 80053a0:	3b15      	subs	r3, #21
 80053a2:	f023 0303 	bic.w	r3, r3, #3
 80053a6:	3304      	adds	r3, #4
 80053a8:	f104 0215 	add.w	r2, r4, #21
 80053ac:	4290      	cmp	r0, r2
 80053ae:	bf38      	it	cc
 80053b0:	2304      	movcc	r3, #4
 80053b2:	f841 c003 	str.w	ip, [r1, r3]
 80053b6:	f1bc 0f00 	cmp.w	ip, #0
 80053ba:	d001      	beq.n	80053c0 <__lshift+0xac>
 80053bc:	f108 0602 	add.w	r6, r8, #2
 80053c0:	3e01      	subs	r6, #1
 80053c2:	4638      	mov	r0, r7
 80053c4:	612e      	str	r6, [r5, #16]
 80053c6:	4621      	mov	r1, r4
 80053c8:	f7ff fdd2 	bl	8004f70 <_Bfree>
 80053cc:	4628      	mov	r0, r5
 80053ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80053d6:	3301      	adds	r3, #1
 80053d8:	e7c1      	b.n	800535e <__lshift+0x4a>
 80053da:	3904      	subs	r1, #4
 80053dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80053e0:	f841 2f04 	str.w	r2, [r1, #4]!
 80053e4:	4298      	cmp	r0, r3
 80053e6:	d8f9      	bhi.n	80053dc <__lshift+0xc8>
 80053e8:	e7ea      	b.n	80053c0 <__lshift+0xac>
 80053ea:	bf00      	nop
 80053ec:	08005f17 	.word	0x08005f17
 80053f0:	08005f28 	.word	0x08005f28

080053f4 <__mcmp>:
 80053f4:	b530      	push	{r4, r5, lr}
 80053f6:	6902      	ldr	r2, [r0, #16]
 80053f8:	690c      	ldr	r4, [r1, #16]
 80053fa:	1b12      	subs	r2, r2, r4
 80053fc:	d10e      	bne.n	800541c <__mcmp+0x28>
 80053fe:	f100 0314 	add.w	r3, r0, #20
 8005402:	3114      	adds	r1, #20
 8005404:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005408:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800540c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005410:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005414:	42a5      	cmp	r5, r4
 8005416:	d003      	beq.n	8005420 <__mcmp+0x2c>
 8005418:	d305      	bcc.n	8005426 <__mcmp+0x32>
 800541a:	2201      	movs	r2, #1
 800541c:	4610      	mov	r0, r2
 800541e:	bd30      	pop	{r4, r5, pc}
 8005420:	4283      	cmp	r3, r0
 8005422:	d3f3      	bcc.n	800540c <__mcmp+0x18>
 8005424:	e7fa      	b.n	800541c <__mcmp+0x28>
 8005426:	f04f 32ff 	mov.w	r2, #4294967295
 800542a:	e7f7      	b.n	800541c <__mcmp+0x28>

0800542c <__mdiff>:
 800542c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005430:	460c      	mov	r4, r1
 8005432:	4606      	mov	r6, r0
 8005434:	4611      	mov	r1, r2
 8005436:	4620      	mov	r0, r4
 8005438:	4690      	mov	r8, r2
 800543a:	f7ff ffdb 	bl	80053f4 <__mcmp>
 800543e:	1e05      	subs	r5, r0, #0
 8005440:	d110      	bne.n	8005464 <__mdiff+0x38>
 8005442:	4629      	mov	r1, r5
 8005444:	4630      	mov	r0, r6
 8005446:	f7ff fd53 	bl	8004ef0 <_Balloc>
 800544a:	b930      	cbnz	r0, 800545a <__mdiff+0x2e>
 800544c:	4b3a      	ldr	r3, [pc, #232]	; (8005538 <__mdiff+0x10c>)
 800544e:	4602      	mov	r2, r0
 8005450:	f240 2132 	movw	r1, #562	; 0x232
 8005454:	4839      	ldr	r0, [pc, #228]	; (800553c <__mdiff+0x110>)
 8005456:	f000 fb5d 	bl	8005b14 <__assert_func>
 800545a:	2301      	movs	r3, #1
 800545c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005460:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005464:	bfa4      	itt	ge
 8005466:	4643      	movge	r3, r8
 8005468:	46a0      	movge	r8, r4
 800546a:	4630      	mov	r0, r6
 800546c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8005470:	bfa6      	itte	ge
 8005472:	461c      	movge	r4, r3
 8005474:	2500      	movge	r5, #0
 8005476:	2501      	movlt	r5, #1
 8005478:	f7ff fd3a 	bl	8004ef0 <_Balloc>
 800547c:	b920      	cbnz	r0, 8005488 <__mdiff+0x5c>
 800547e:	4b2e      	ldr	r3, [pc, #184]	; (8005538 <__mdiff+0x10c>)
 8005480:	4602      	mov	r2, r0
 8005482:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005486:	e7e5      	b.n	8005454 <__mdiff+0x28>
 8005488:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800548c:	6926      	ldr	r6, [r4, #16]
 800548e:	60c5      	str	r5, [r0, #12]
 8005490:	f104 0914 	add.w	r9, r4, #20
 8005494:	f108 0514 	add.w	r5, r8, #20
 8005498:	f100 0e14 	add.w	lr, r0, #20
 800549c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80054a0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80054a4:	f108 0210 	add.w	r2, r8, #16
 80054a8:	46f2      	mov	sl, lr
 80054aa:	2100      	movs	r1, #0
 80054ac:	f859 3b04 	ldr.w	r3, [r9], #4
 80054b0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80054b4:	fa1f f883 	uxth.w	r8, r3
 80054b8:	fa11 f18b 	uxtah	r1, r1, fp
 80054bc:	0c1b      	lsrs	r3, r3, #16
 80054be:	eba1 0808 	sub.w	r8, r1, r8
 80054c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80054c6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80054ca:	fa1f f888 	uxth.w	r8, r8
 80054ce:	1419      	asrs	r1, r3, #16
 80054d0:	454e      	cmp	r6, r9
 80054d2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80054d6:	f84a 3b04 	str.w	r3, [sl], #4
 80054da:	d8e7      	bhi.n	80054ac <__mdiff+0x80>
 80054dc:	1b33      	subs	r3, r6, r4
 80054de:	3b15      	subs	r3, #21
 80054e0:	f023 0303 	bic.w	r3, r3, #3
 80054e4:	3304      	adds	r3, #4
 80054e6:	3415      	adds	r4, #21
 80054e8:	42a6      	cmp	r6, r4
 80054ea:	bf38      	it	cc
 80054ec:	2304      	movcc	r3, #4
 80054ee:	441d      	add	r5, r3
 80054f0:	4473      	add	r3, lr
 80054f2:	469e      	mov	lr, r3
 80054f4:	462e      	mov	r6, r5
 80054f6:	4566      	cmp	r6, ip
 80054f8:	d30e      	bcc.n	8005518 <__mdiff+0xec>
 80054fa:	f10c 0203 	add.w	r2, ip, #3
 80054fe:	1b52      	subs	r2, r2, r5
 8005500:	f022 0203 	bic.w	r2, r2, #3
 8005504:	3d03      	subs	r5, #3
 8005506:	45ac      	cmp	ip, r5
 8005508:	bf38      	it	cc
 800550a:	2200      	movcc	r2, #0
 800550c:	441a      	add	r2, r3
 800550e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8005512:	b17b      	cbz	r3, 8005534 <__mdiff+0x108>
 8005514:	6107      	str	r7, [r0, #16]
 8005516:	e7a3      	b.n	8005460 <__mdiff+0x34>
 8005518:	f856 8b04 	ldr.w	r8, [r6], #4
 800551c:	fa11 f288 	uxtah	r2, r1, r8
 8005520:	1414      	asrs	r4, r2, #16
 8005522:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005526:	b292      	uxth	r2, r2
 8005528:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800552c:	f84e 2b04 	str.w	r2, [lr], #4
 8005530:	1421      	asrs	r1, r4, #16
 8005532:	e7e0      	b.n	80054f6 <__mdiff+0xca>
 8005534:	3f01      	subs	r7, #1
 8005536:	e7ea      	b.n	800550e <__mdiff+0xe2>
 8005538:	08005f17 	.word	0x08005f17
 800553c:	08005f28 	.word	0x08005f28

08005540 <__d2b>:
 8005540:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005544:	4689      	mov	r9, r1
 8005546:	2101      	movs	r1, #1
 8005548:	ec57 6b10 	vmov	r6, r7, d0
 800554c:	4690      	mov	r8, r2
 800554e:	f7ff fccf 	bl	8004ef0 <_Balloc>
 8005552:	4604      	mov	r4, r0
 8005554:	b930      	cbnz	r0, 8005564 <__d2b+0x24>
 8005556:	4602      	mov	r2, r0
 8005558:	4b25      	ldr	r3, [pc, #148]	; (80055f0 <__d2b+0xb0>)
 800555a:	4826      	ldr	r0, [pc, #152]	; (80055f4 <__d2b+0xb4>)
 800555c:	f240 310a 	movw	r1, #778	; 0x30a
 8005560:	f000 fad8 	bl	8005b14 <__assert_func>
 8005564:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8005568:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800556c:	bb35      	cbnz	r5, 80055bc <__d2b+0x7c>
 800556e:	2e00      	cmp	r6, #0
 8005570:	9301      	str	r3, [sp, #4]
 8005572:	d028      	beq.n	80055c6 <__d2b+0x86>
 8005574:	4668      	mov	r0, sp
 8005576:	9600      	str	r6, [sp, #0]
 8005578:	f7ff fd82 	bl	8005080 <__lo0bits>
 800557c:	9900      	ldr	r1, [sp, #0]
 800557e:	b300      	cbz	r0, 80055c2 <__d2b+0x82>
 8005580:	9a01      	ldr	r2, [sp, #4]
 8005582:	f1c0 0320 	rsb	r3, r0, #32
 8005586:	fa02 f303 	lsl.w	r3, r2, r3
 800558a:	430b      	orrs	r3, r1
 800558c:	40c2      	lsrs	r2, r0
 800558e:	6163      	str	r3, [r4, #20]
 8005590:	9201      	str	r2, [sp, #4]
 8005592:	9b01      	ldr	r3, [sp, #4]
 8005594:	61a3      	str	r3, [r4, #24]
 8005596:	2b00      	cmp	r3, #0
 8005598:	bf14      	ite	ne
 800559a:	2202      	movne	r2, #2
 800559c:	2201      	moveq	r2, #1
 800559e:	6122      	str	r2, [r4, #16]
 80055a0:	b1d5      	cbz	r5, 80055d8 <__d2b+0x98>
 80055a2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80055a6:	4405      	add	r5, r0
 80055a8:	f8c9 5000 	str.w	r5, [r9]
 80055ac:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80055b0:	f8c8 0000 	str.w	r0, [r8]
 80055b4:	4620      	mov	r0, r4
 80055b6:	b003      	add	sp, #12
 80055b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80055bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055c0:	e7d5      	b.n	800556e <__d2b+0x2e>
 80055c2:	6161      	str	r1, [r4, #20]
 80055c4:	e7e5      	b.n	8005592 <__d2b+0x52>
 80055c6:	a801      	add	r0, sp, #4
 80055c8:	f7ff fd5a 	bl	8005080 <__lo0bits>
 80055cc:	9b01      	ldr	r3, [sp, #4]
 80055ce:	6163      	str	r3, [r4, #20]
 80055d0:	2201      	movs	r2, #1
 80055d2:	6122      	str	r2, [r4, #16]
 80055d4:	3020      	adds	r0, #32
 80055d6:	e7e3      	b.n	80055a0 <__d2b+0x60>
 80055d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80055dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80055e0:	f8c9 0000 	str.w	r0, [r9]
 80055e4:	6918      	ldr	r0, [r3, #16]
 80055e6:	f7ff fd2b 	bl	8005040 <__hi0bits>
 80055ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80055ee:	e7df      	b.n	80055b0 <__d2b+0x70>
 80055f0:	08005f17 	.word	0x08005f17
 80055f4:	08005f28 	.word	0x08005f28

080055f8 <_calloc_r>:
 80055f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055fa:	fba1 2402 	umull	r2, r4, r1, r2
 80055fe:	b94c      	cbnz	r4, 8005614 <_calloc_r+0x1c>
 8005600:	4611      	mov	r1, r2
 8005602:	9201      	str	r2, [sp, #4]
 8005604:	f7fd ff94 	bl	8003530 <_malloc_r>
 8005608:	9a01      	ldr	r2, [sp, #4]
 800560a:	4605      	mov	r5, r0
 800560c:	b930      	cbnz	r0, 800561c <_calloc_r+0x24>
 800560e:	4628      	mov	r0, r5
 8005610:	b003      	add	sp, #12
 8005612:	bd30      	pop	{r4, r5, pc}
 8005614:	220c      	movs	r2, #12
 8005616:	6002      	str	r2, [r0, #0]
 8005618:	2500      	movs	r5, #0
 800561a:	e7f8      	b.n	800560e <_calloc_r+0x16>
 800561c:	4621      	mov	r1, r4
 800561e:	f7fd ff5e 	bl	80034de <memset>
 8005622:	e7f4      	b.n	800560e <_calloc_r+0x16>

08005624 <_free_r>:
 8005624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005626:	2900      	cmp	r1, #0
 8005628:	d044      	beq.n	80056b4 <_free_r+0x90>
 800562a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800562e:	9001      	str	r0, [sp, #4]
 8005630:	2b00      	cmp	r3, #0
 8005632:	f1a1 0404 	sub.w	r4, r1, #4
 8005636:	bfb8      	it	lt
 8005638:	18e4      	addlt	r4, r4, r3
 800563a:	f7ff fc4d 	bl	8004ed8 <__malloc_lock>
 800563e:	4a1e      	ldr	r2, [pc, #120]	; (80056b8 <_free_r+0x94>)
 8005640:	9801      	ldr	r0, [sp, #4]
 8005642:	6813      	ldr	r3, [r2, #0]
 8005644:	b933      	cbnz	r3, 8005654 <_free_r+0x30>
 8005646:	6063      	str	r3, [r4, #4]
 8005648:	6014      	str	r4, [r2, #0]
 800564a:	b003      	add	sp, #12
 800564c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005650:	f7ff bc48 	b.w	8004ee4 <__malloc_unlock>
 8005654:	42a3      	cmp	r3, r4
 8005656:	d908      	bls.n	800566a <_free_r+0x46>
 8005658:	6825      	ldr	r5, [r4, #0]
 800565a:	1961      	adds	r1, r4, r5
 800565c:	428b      	cmp	r3, r1
 800565e:	bf01      	itttt	eq
 8005660:	6819      	ldreq	r1, [r3, #0]
 8005662:	685b      	ldreq	r3, [r3, #4]
 8005664:	1949      	addeq	r1, r1, r5
 8005666:	6021      	streq	r1, [r4, #0]
 8005668:	e7ed      	b.n	8005646 <_free_r+0x22>
 800566a:	461a      	mov	r2, r3
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	b10b      	cbz	r3, 8005674 <_free_r+0x50>
 8005670:	42a3      	cmp	r3, r4
 8005672:	d9fa      	bls.n	800566a <_free_r+0x46>
 8005674:	6811      	ldr	r1, [r2, #0]
 8005676:	1855      	adds	r5, r2, r1
 8005678:	42a5      	cmp	r5, r4
 800567a:	d10b      	bne.n	8005694 <_free_r+0x70>
 800567c:	6824      	ldr	r4, [r4, #0]
 800567e:	4421      	add	r1, r4
 8005680:	1854      	adds	r4, r2, r1
 8005682:	42a3      	cmp	r3, r4
 8005684:	6011      	str	r1, [r2, #0]
 8005686:	d1e0      	bne.n	800564a <_free_r+0x26>
 8005688:	681c      	ldr	r4, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	6053      	str	r3, [r2, #4]
 800568e:	4421      	add	r1, r4
 8005690:	6011      	str	r1, [r2, #0]
 8005692:	e7da      	b.n	800564a <_free_r+0x26>
 8005694:	d902      	bls.n	800569c <_free_r+0x78>
 8005696:	230c      	movs	r3, #12
 8005698:	6003      	str	r3, [r0, #0]
 800569a:	e7d6      	b.n	800564a <_free_r+0x26>
 800569c:	6825      	ldr	r5, [r4, #0]
 800569e:	1961      	adds	r1, r4, r5
 80056a0:	428b      	cmp	r3, r1
 80056a2:	bf04      	itt	eq
 80056a4:	6819      	ldreq	r1, [r3, #0]
 80056a6:	685b      	ldreq	r3, [r3, #4]
 80056a8:	6063      	str	r3, [r4, #4]
 80056aa:	bf04      	itt	eq
 80056ac:	1949      	addeq	r1, r1, r5
 80056ae:	6021      	streq	r1, [r4, #0]
 80056b0:	6054      	str	r4, [r2, #4]
 80056b2:	e7ca      	b.n	800564a <_free_r+0x26>
 80056b4:	b003      	add	sp, #12
 80056b6:	bd30      	pop	{r4, r5, pc}
 80056b8:	20000344 	.word	0x20000344

080056bc <__sfputc_r>:
 80056bc:	6893      	ldr	r3, [r2, #8]
 80056be:	3b01      	subs	r3, #1
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	b410      	push	{r4}
 80056c4:	6093      	str	r3, [r2, #8]
 80056c6:	da08      	bge.n	80056da <__sfputc_r+0x1e>
 80056c8:	6994      	ldr	r4, [r2, #24]
 80056ca:	42a3      	cmp	r3, r4
 80056cc:	db01      	blt.n	80056d2 <__sfputc_r+0x16>
 80056ce:	290a      	cmp	r1, #10
 80056d0:	d103      	bne.n	80056da <__sfputc_r+0x1e>
 80056d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056d6:	f000 b95d 	b.w	8005994 <__swbuf_r>
 80056da:	6813      	ldr	r3, [r2, #0]
 80056dc:	1c58      	adds	r0, r3, #1
 80056de:	6010      	str	r0, [r2, #0]
 80056e0:	7019      	strb	r1, [r3, #0]
 80056e2:	4608      	mov	r0, r1
 80056e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056e8:	4770      	bx	lr

080056ea <__sfputs_r>:
 80056ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ec:	4606      	mov	r6, r0
 80056ee:	460f      	mov	r7, r1
 80056f0:	4614      	mov	r4, r2
 80056f2:	18d5      	adds	r5, r2, r3
 80056f4:	42ac      	cmp	r4, r5
 80056f6:	d101      	bne.n	80056fc <__sfputs_r+0x12>
 80056f8:	2000      	movs	r0, #0
 80056fa:	e007      	b.n	800570c <__sfputs_r+0x22>
 80056fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005700:	463a      	mov	r2, r7
 8005702:	4630      	mov	r0, r6
 8005704:	f7ff ffda 	bl	80056bc <__sfputc_r>
 8005708:	1c43      	adds	r3, r0, #1
 800570a:	d1f3      	bne.n	80056f4 <__sfputs_r+0xa>
 800570c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005710 <_vfiprintf_r>:
 8005710:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005714:	460d      	mov	r5, r1
 8005716:	b09d      	sub	sp, #116	; 0x74
 8005718:	4614      	mov	r4, r2
 800571a:	4698      	mov	r8, r3
 800571c:	4606      	mov	r6, r0
 800571e:	b118      	cbz	r0, 8005728 <_vfiprintf_r+0x18>
 8005720:	6983      	ldr	r3, [r0, #24]
 8005722:	b90b      	cbnz	r3, 8005728 <_vfiprintf_r+0x18>
 8005724:	f7fd fe16 	bl	8003354 <__sinit>
 8005728:	4b89      	ldr	r3, [pc, #548]	; (8005950 <_vfiprintf_r+0x240>)
 800572a:	429d      	cmp	r5, r3
 800572c:	d11b      	bne.n	8005766 <_vfiprintf_r+0x56>
 800572e:	6875      	ldr	r5, [r6, #4]
 8005730:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005732:	07d9      	lsls	r1, r3, #31
 8005734:	d405      	bmi.n	8005742 <_vfiprintf_r+0x32>
 8005736:	89ab      	ldrh	r3, [r5, #12]
 8005738:	059a      	lsls	r2, r3, #22
 800573a:	d402      	bmi.n	8005742 <_vfiprintf_r+0x32>
 800573c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800573e:	f7fd fecc 	bl	80034da <__retarget_lock_acquire_recursive>
 8005742:	89ab      	ldrh	r3, [r5, #12]
 8005744:	071b      	lsls	r3, r3, #28
 8005746:	d501      	bpl.n	800574c <_vfiprintf_r+0x3c>
 8005748:	692b      	ldr	r3, [r5, #16]
 800574a:	b9eb      	cbnz	r3, 8005788 <_vfiprintf_r+0x78>
 800574c:	4629      	mov	r1, r5
 800574e:	4630      	mov	r0, r6
 8005750:	f000 f972 	bl	8005a38 <__swsetup_r>
 8005754:	b1c0      	cbz	r0, 8005788 <_vfiprintf_r+0x78>
 8005756:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005758:	07dc      	lsls	r4, r3, #31
 800575a:	d50e      	bpl.n	800577a <_vfiprintf_r+0x6a>
 800575c:	f04f 30ff 	mov.w	r0, #4294967295
 8005760:	b01d      	add	sp, #116	; 0x74
 8005762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005766:	4b7b      	ldr	r3, [pc, #492]	; (8005954 <_vfiprintf_r+0x244>)
 8005768:	429d      	cmp	r5, r3
 800576a:	d101      	bne.n	8005770 <_vfiprintf_r+0x60>
 800576c:	68b5      	ldr	r5, [r6, #8]
 800576e:	e7df      	b.n	8005730 <_vfiprintf_r+0x20>
 8005770:	4b79      	ldr	r3, [pc, #484]	; (8005958 <_vfiprintf_r+0x248>)
 8005772:	429d      	cmp	r5, r3
 8005774:	bf08      	it	eq
 8005776:	68f5      	ldreq	r5, [r6, #12]
 8005778:	e7da      	b.n	8005730 <_vfiprintf_r+0x20>
 800577a:	89ab      	ldrh	r3, [r5, #12]
 800577c:	0598      	lsls	r0, r3, #22
 800577e:	d4ed      	bmi.n	800575c <_vfiprintf_r+0x4c>
 8005780:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005782:	f7fd feab 	bl	80034dc <__retarget_lock_release_recursive>
 8005786:	e7e9      	b.n	800575c <_vfiprintf_r+0x4c>
 8005788:	2300      	movs	r3, #0
 800578a:	9309      	str	r3, [sp, #36]	; 0x24
 800578c:	2320      	movs	r3, #32
 800578e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005792:	f8cd 800c 	str.w	r8, [sp, #12]
 8005796:	2330      	movs	r3, #48	; 0x30
 8005798:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800595c <_vfiprintf_r+0x24c>
 800579c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80057a0:	f04f 0901 	mov.w	r9, #1
 80057a4:	4623      	mov	r3, r4
 80057a6:	469a      	mov	sl, r3
 80057a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057ac:	b10a      	cbz	r2, 80057b2 <_vfiprintf_r+0xa2>
 80057ae:	2a25      	cmp	r2, #37	; 0x25
 80057b0:	d1f9      	bne.n	80057a6 <_vfiprintf_r+0x96>
 80057b2:	ebba 0b04 	subs.w	fp, sl, r4
 80057b6:	d00b      	beq.n	80057d0 <_vfiprintf_r+0xc0>
 80057b8:	465b      	mov	r3, fp
 80057ba:	4622      	mov	r2, r4
 80057bc:	4629      	mov	r1, r5
 80057be:	4630      	mov	r0, r6
 80057c0:	f7ff ff93 	bl	80056ea <__sfputs_r>
 80057c4:	3001      	adds	r0, #1
 80057c6:	f000 80aa 	beq.w	800591e <_vfiprintf_r+0x20e>
 80057ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80057cc:	445a      	add	r2, fp
 80057ce:	9209      	str	r2, [sp, #36]	; 0x24
 80057d0:	f89a 3000 	ldrb.w	r3, [sl]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	f000 80a2 	beq.w	800591e <_vfiprintf_r+0x20e>
 80057da:	2300      	movs	r3, #0
 80057dc:	f04f 32ff 	mov.w	r2, #4294967295
 80057e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057e4:	f10a 0a01 	add.w	sl, sl, #1
 80057e8:	9304      	str	r3, [sp, #16]
 80057ea:	9307      	str	r3, [sp, #28]
 80057ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80057f0:	931a      	str	r3, [sp, #104]	; 0x68
 80057f2:	4654      	mov	r4, sl
 80057f4:	2205      	movs	r2, #5
 80057f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057fa:	4858      	ldr	r0, [pc, #352]	; (800595c <_vfiprintf_r+0x24c>)
 80057fc:	f7fa fcf8 	bl	80001f0 <memchr>
 8005800:	9a04      	ldr	r2, [sp, #16]
 8005802:	b9d8      	cbnz	r0, 800583c <_vfiprintf_r+0x12c>
 8005804:	06d1      	lsls	r1, r2, #27
 8005806:	bf44      	itt	mi
 8005808:	2320      	movmi	r3, #32
 800580a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800580e:	0713      	lsls	r3, r2, #28
 8005810:	bf44      	itt	mi
 8005812:	232b      	movmi	r3, #43	; 0x2b
 8005814:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005818:	f89a 3000 	ldrb.w	r3, [sl]
 800581c:	2b2a      	cmp	r3, #42	; 0x2a
 800581e:	d015      	beq.n	800584c <_vfiprintf_r+0x13c>
 8005820:	9a07      	ldr	r2, [sp, #28]
 8005822:	4654      	mov	r4, sl
 8005824:	2000      	movs	r0, #0
 8005826:	f04f 0c0a 	mov.w	ip, #10
 800582a:	4621      	mov	r1, r4
 800582c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005830:	3b30      	subs	r3, #48	; 0x30
 8005832:	2b09      	cmp	r3, #9
 8005834:	d94e      	bls.n	80058d4 <_vfiprintf_r+0x1c4>
 8005836:	b1b0      	cbz	r0, 8005866 <_vfiprintf_r+0x156>
 8005838:	9207      	str	r2, [sp, #28]
 800583a:	e014      	b.n	8005866 <_vfiprintf_r+0x156>
 800583c:	eba0 0308 	sub.w	r3, r0, r8
 8005840:	fa09 f303 	lsl.w	r3, r9, r3
 8005844:	4313      	orrs	r3, r2
 8005846:	9304      	str	r3, [sp, #16]
 8005848:	46a2      	mov	sl, r4
 800584a:	e7d2      	b.n	80057f2 <_vfiprintf_r+0xe2>
 800584c:	9b03      	ldr	r3, [sp, #12]
 800584e:	1d19      	adds	r1, r3, #4
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	9103      	str	r1, [sp, #12]
 8005854:	2b00      	cmp	r3, #0
 8005856:	bfbb      	ittet	lt
 8005858:	425b      	neglt	r3, r3
 800585a:	f042 0202 	orrlt.w	r2, r2, #2
 800585e:	9307      	strge	r3, [sp, #28]
 8005860:	9307      	strlt	r3, [sp, #28]
 8005862:	bfb8      	it	lt
 8005864:	9204      	strlt	r2, [sp, #16]
 8005866:	7823      	ldrb	r3, [r4, #0]
 8005868:	2b2e      	cmp	r3, #46	; 0x2e
 800586a:	d10c      	bne.n	8005886 <_vfiprintf_r+0x176>
 800586c:	7863      	ldrb	r3, [r4, #1]
 800586e:	2b2a      	cmp	r3, #42	; 0x2a
 8005870:	d135      	bne.n	80058de <_vfiprintf_r+0x1ce>
 8005872:	9b03      	ldr	r3, [sp, #12]
 8005874:	1d1a      	adds	r2, r3, #4
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	9203      	str	r2, [sp, #12]
 800587a:	2b00      	cmp	r3, #0
 800587c:	bfb8      	it	lt
 800587e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005882:	3402      	adds	r4, #2
 8005884:	9305      	str	r3, [sp, #20]
 8005886:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800596c <_vfiprintf_r+0x25c>
 800588a:	7821      	ldrb	r1, [r4, #0]
 800588c:	2203      	movs	r2, #3
 800588e:	4650      	mov	r0, sl
 8005890:	f7fa fcae 	bl	80001f0 <memchr>
 8005894:	b140      	cbz	r0, 80058a8 <_vfiprintf_r+0x198>
 8005896:	2340      	movs	r3, #64	; 0x40
 8005898:	eba0 000a 	sub.w	r0, r0, sl
 800589c:	fa03 f000 	lsl.w	r0, r3, r0
 80058a0:	9b04      	ldr	r3, [sp, #16]
 80058a2:	4303      	orrs	r3, r0
 80058a4:	3401      	adds	r4, #1
 80058a6:	9304      	str	r3, [sp, #16]
 80058a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058ac:	482c      	ldr	r0, [pc, #176]	; (8005960 <_vfiprintf_r+0x250>)
 80058ae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80058b2:	2206      	movs	r2, #6
 80058b4:	f7fa fc9c 	bl	80001f0 <memchr>
 80058b8:	2800      	cmp	r0, #0
 80058ba:	d03f      	beq.n	800593c <_vfiprintf_r+0x22c>
 80058bc:	4b29      	ldr	r3, [pc, #164]	; (8005964 <_vfiprintf_r+0x254>)
 80058be:	bb1b      	cbnz	r3, 8005908 <_vfiprintf_r+0x1f8>
 80058c0:	9b03      	ldr	r3, [sp, #12]
 80058c2:	3307      	adds	r3, #7
 80058c4:	f023 0307 	bic.w	r3, r3, #7
 80058c8:	3308      	adds	r3, #8
 80058ca:	9303      	str	r3, [sp, #12]
 80058cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058ce:	443b      	add	r3, r7
 80058d0:	9309      	str	r3, [sp, #36]	; 0x24
 80058d2:	e767      	b.n	80057a4 <_vfiprintf_r+0x94>
 80058d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80058d8:	460c      	mov	r4, r1
 80058da:	2001      	movs	r0, #1
 80058dc:	e7a5      	b.n	800582a <_vfiprintf_r+0x11a>
 80058de:	2300      	movs	r3, #0
 80058e0:	3401      	adds	r4, #1
 80058e2:	9305      	str	r3, [sp, #20]
 80058e4:	4619      	mov	r1, r3
 80058e6:	f04f 0c0a 	mov.w	ip, #10
 80058ea:	4620      	mov	r0, r4
 80058ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058f0:	3a30      	subs	r2, #48	; 0x30
 80058f2:	2a09      	cmp	r2, #9
 80058f4:	d903      	bls.n	80058fe <_vfiprintf_r+0x1ee>
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0c5      	beq.n	8005886 <_vfiprintf_r+0x176>
 80058fa:	9105      	str	r1, [sp, #20]
 80058fc:	e7c3      	b.n	8005886 <_vfiprintf_r+0x176>
 80058fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8005902:	4604      	mov	r4, r0
 8005904:	2301      	movs	r3, #1
 8005906:	e7f0      	b.n	80058ea <_vfiprintf_r+0x1da>
 8005908:	ab03      	add	r3, sp, #12
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	462a      	mov	r2, r5
 800590e:	4b16      	ldr	r3, [pc, #88]	; (8005968 <_vfiprintf_r+0x258>)
 8005910:	a904      	add	r1, sp, #16
 8005912:	4630      	mov	r0, r6
 8005914:	f7fd ff20 	bl	8003758 <_printf_float>
 8005918:	4607      	mov	r7, r0
 800591a:	1c78      	adds	r0, r7, #1
 800591c:	d1d6      	bne.n	80058cc <_vfiprintf_r+0x1bc>
 800591e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005920:	07d9      	lsls	r1, r3, #31
 8005922:	d405      	bmi.n	8005930 <_vfiprintf_r+0x220>
 8005924:	89ab      	ldrh	r3, [r5, #12]
 8005926:	059a      	lsls	r2, r3, #22
 8005928:	d402      	bmi.n	8005930 <_vfiprintf_r+0x220>
 800592a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800592c:	f7fd fdd6 	bl	80034dc <__retarget_lock_release_recursive>
 8005930:	89ab      	ldrh	r3, [r5, #12]
 8005932:	065b      	lsls	r3, r3, #25
 8005934:	f53f af12 	bmi.w	800575c <_vfiprintf_r+0x4c>
 8005938:	9809      	ldr	r0, [sp, #36]	; 0x24
 800593a:	e711      	b.n	8005760 <_vfiprintf_r+0x50>
 800593c:	ab03      	add	r3, sp, #12
 800593e:	9300      	str	r3, [sp, #0]
 8005940:	462a      	mov	r2, r5
 8005942:	4b09      	ldr	r3, [pc, #36]	; (8005968 <_vfiprintf_r+0x258>)
 8005944:	a904      	add	r1, sp, #16
 8005946:	4630      	mov	r0, r6
 8005948:	f7fe f9aa 	bl	8003ca0 <_printf_i>
 800594c:	e7e4      	b.n	8005918 <_vfiprintf_r+0x208>
 800594e:	bf00      	nop
 8005950:	08005e20 	.word	0x08005e20
 8005954:	08005e40 	.word	0x08005e40
 8005958:	08005e00 	.word	0x08005e00
 800595c:	08006084 	.word	0x08006084
 8005960:	0800608e 	.word	0x0800608e
 8005964:	08003759 	.word	0x08003759
 8005968:	080056eb 	.word	0x080056eb
 800596c:	0800608a 	.word	0x0800608a

08005970 <_read_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	4d07      	ldr	r5, [pc, #28]	; (8005990 <_read_r+0x20>)
 8005974:	4604      	mov	r4, r0
 8005976:	4608      	mov	r0, r1
 8005978:	4611      	mov	r1, r2
 800597a:	2200      	movs	r2, #0
 800597c:	602a      	str	r2, [r5, #0]
 800597e:	461a      	mov	r2, r3
 8005980:	f7fd fa23 	bl	8002dca <_read>
 8005984:	1c43      	adds	r3, r0, #1
 8005986:	d102      	bne.n	800598e <_read_r+0x1e>
 8005988:	682b      	ldr	r3, [r5, #0]
 800598a:	b103      	cbz	r3, 800598e <_read_r+0x1e>
 800598c:	6023      	str	r3, [r4, #0]
 800598e:	bd38      	pop	{r3, r4, r5, pc}
 8005990:	2000034c 	.word	0x2000034c

08005994 <__swbuf_r>:
 8005994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005996:	460e      	mov	r6, r1
 8005998:	4614      	mov	r4, r2
 800599a:	4605      	mov	r5, r0
 800599c:	b118      	cbz	r0, 80059a6 <__swbuf_r+0x12>
 800599e:	6983      	ldr	r3, [r0, #24]
 80059a0:	b90b      	cbnz	r3, 80059a6 <__swbuf_r+0x12>
 80059a2:	f7fd fcd7 	bl	8003354 <__sinit>
 80059a6:	4b21      	ldr	r3, [pc, #132]	; (8005a2c <__swbuf_r+0x98>)
 80059a8:	429c      	cmp	r4, r3
 80059aa:	d12b      	bne.n	8005a04 <__swbuf_r+0x70>
 80059ac:	686c      	ldr	r4, [r5, #4]
 80059ae:	69a3      	ldr	r3, [r4, #24]
 80059b0:	60a3      	str	r3, [r4, #8]
 80059b2:	89a3      	ldrh	r3, [r4, #12]
 80059b4:	071a      	lsls	r2, r3, #28
 80059b6:	d52f      	bpl.n	8005a18 <__swbuf_r+0x84>
 80059b8:	6923      	ldr	r3, [r4, #16]
 80059ba:	b36b      	cbz	r3, 8005a18 <__swbuf_r+0x84>
 80059bc:	6923      	ldr	r3, [r4, #16]
 80059be:	6820      	ldr	r0, [r4, #0]
 80059c0:	1ac0      	subs	r0, r0, r3
 80059c2:	6963      	ldr	r3, [r4, #20]
 80059c4:	b2f6      	uxtb	r6, r6
 80059c6:	4283      	cmp	r3, r0
 80059c8:	4637      	mov	r7, r6
 80059ca:	dc04      	bgt.n	80059d6 <__swbuf_r+0x42>
 80059cc:	4621      	mov	r1, r4
 80059ce:	4628      	mov	r0, r5
 80059d0:	f7ff fa1a 	bl	8004e08 <_fflush_r>
 80059d4:	bb30      	cbnz	r0, 8005a24 <__swbuf_r+0x90>
 80059d6:	68a3      	ldr	r3, [r4, #8]
 80059d8:	3b01      	subs	r3, #1
 80059da:	60a3      	str	r3, [r4, #8]
 80059dc:	6823      	ldr	r3, [r4, #0]
 80059de:	1c5a      	adds	r2, r3, #1
 80059e0:	6022      	str	r2, [r4, #0]
 80059e2:	701e      	strb	r6, [r3, #0]
 80059e4:	6963      	ldr	r3, [r4, #20]
 80059e6:	3001      	adds	r0, #1
 80059e8:	4283      	cmp	r3, r0
 80059ea:	d004      	beq.n	80059f6 <__swbuf_r+0x62>
 80059ec:	89a3      	ldrh	r3, [r4, #12]
 80059ee:	07db      	lsls	r3, r3, #31
 80059f0:	d506      	bpl.n	8005a00 <__swbuf_r+0x6c>
 80059f2:	2e0a      	cmp	r6, #10
 80059f4:	d104      	bne.n	8005a00 <__swbuf_r+0x6c>
 80059f6:	4621      	mov	r1, r4
 80059f8:	4628      	mov	r0, r5
 80059fa:	f7ff fa05 	bl	8004e08 <_fflush_r>
 80059fe:	b988      	cbnz	r0, 8005a24 <__swbuf_r+0x90>
 8005a00:	4638      	mov	r0, r7
 8005a02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a04:	4b0a      	ldr	r3, [pc, #40]	; (8005a30 <__swbuf_r+0x9c>)
 8005a06:	429c      	cmp	r4, r3
 8005a08:	d101      	bne.n	8005a0e <__swbuf_r+0x7a>
 8005a0a:	68ac      	ldr	r4, [r5, #8]
 8005a0c:	e7cf      	b.n	80059ae <__swbuf_r+0x1a>
 8005a0e:	4b09      	ldr	r3, [pc, #36]	; (8005a34 <__swbuf_r+0xa0>)
 8005a10:	429c      	cmp	r4, r3
 8005a12:	bf08      	it	eq
 8005a14:	68ec      	ldreq	r4, [r5, #12]
 8005a16:	e7ca      	b.n	80059ae <__swbuf_r+0x1a>
 8005a18:	4621      	mov	r1, r4
 8005a1a:	4628      	mov	r0, r5
 8005a1c:	f000 f80c 	bl	8005a38 <__swsetup_r>
 8005a20:	2800      	cmp	r0, #0
 8005a22:	d0cb      	beq.n	80059bc <__swbuf_r+0x28>
 8005a24:	f04f 37ff 	mov.w	r7, #4294967295
 8005a28:	e7ea      	b.n	8005a00 <__swbuf_r+0x6c>
 8005a2a:	bf00      	nop
 8005a2c:	08005e20 	.word	0x08005e20
 8005a30:	08005e40 	.word	0x08005e40
 8005a34:	08005e00 	.word	0x08005e00

08005a38 <__swsetup_r>:
 8005a38:	4b32      	ldr	r3, [pc, #200]	; (8005b04 <__swsetup_r+0xcc>)
 8005a3a:	b570      	push	{r4, r5, r6, lr}
 8005a3c:	681d      	ldr	r5, [r3, #0]
 8005a3e:	4606      	mov	r6, r0
 8005a40:	460c      	mov	r4, r1
 8005a42:	b125      	cbz	r5, 8005a4e <__swsetup_r+0x16>
 8005a44:	69ab      	ldr	r3, [r5, #24]
 8005a46:	b913      	cbnz	r3, 8005a4e <__swsetup_r+0x16>
 8005a48:	4628      	mov	r0, r5
 8005a4a:	f7fd fc83 	bl	8003354 <__sinit>
 8005a4e:	4b2e      	ldr	r3, [pc, #184]	; (8005b08 <__swsetup_r+0xd0>)
 8005a50:	429c      	cmp	r4, r3
 8005a52:	d10f      	bne.n	8005a74 <__swsetup_r+0x3c>
 8005a54:	686c      	ldr	r4, [r5, #4]
 8005a56:	89a3      	ldrh	r3, [r4, #12]
 8005a58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005a5c:	0719      	lsls	r1, r3, #28
 8005a5e:	d42c      	bmi.n	8005aba <__swsetup_r+0x82>
 8005a60:	06dd      	lsls	r5, r3, #27
 8005a62:	d411      	bmi.n	8005a88 <__swsetup_r+0x50>
 8005a64:	2309      	movs	r3, #9
 8005a66:	6033      	str	r3, [r6, #0]
 8005a68:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005a6c:	81a3      	strh	r3, [r4, #12]
 8005a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a72:	e03e      	b.n	8005af2 <__swsetup_r+0xba>
 8005a74:	4b25      	ldr	r3, [pc, #148]	; (8005b0c <__swsetup_r+0xd4>)
 8005a76:	429c      	cmp	r4, r3
 8005a78:	d101      	bne.n	8005a7e <__swsetup_r+0x46>
 8005a7a:	68ac      	ldr	r4, [r5, #8]
 8005a7c:	e7eb      	b.n	8005a56 <__swsetup_r+0x1e>
 8005a7e:	4b24      	ldr	r3, [pc, #144]	; (8005b10 <__swsetup_r+0xd8>)
 8005a80:	429c      	cmp	r4, r3
 8005a82:	bf08      	it	eq
 8005a84:	68ec      	ldreq	r4, [r5, #12]
 8005a86:	e7e6      	b.n	8005a56 <__swsetup_r+0x1e>
 8005a88:	0758      	lsls	r0, r3, #29
 8005a8a:	d512      	bpl.n	8005ab2 <__swsetup_r+0x7a>
 8005a8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005a8e:	b141      	cbz	r1, 8005aa2 <__swsetup_r+0x6a>
 8005a90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a94:	4299      	cmp	r1, r3
 8005a96:	d002      	beq.n	8005a9e <__swsetup_r+0x66>
 8005a98:	4630      	mov	r0, r6
 8005a9a:	f7ff fdc3 	bl	8005624 <_free_r>
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	6363      	str	r3, [r4, #52]	; 0x34
 8005aa2:	89a3      	ldrh	r3, [r4, #12]
 8005aa4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005aa8:	81a3      	strh	r3, [r4, #12]
 8005aaa:	2300      	movs	r3, #0
 8005aac:	6063      	str	r3, [r4, #4]
 8005aae:	6923      	ldr	r3, [r4, #16]
 8005ab0:	6023      	str	r3, [r4, #0]
 8005ab2:	89a3      	ldrh	r3, [r4, #12]
 8005ab4:	f043 0308 	orr.w	r3, r3, #8
 8005ab8:	81a3      	strh	r3, [r4, #12]
 8005aba:	6923      	ldr	r3, [r4, #16]
 8005abc:	b94b      	cbnz	r3, 8005ad2 <__swsetup_r+0x9a>
 8005abe:	89a3      	ldrh	r3, [r4, #12]
 8005ac0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ac8:	d003      	beq.n	8005ad2 <__swsetup_r+0x9a>
 8005aca:	4621      	mov	r1, r4
 8005acc:	4630      	mov	r0, r6
 8005ace:	f000 f877 	bl	8005bc0 <__smakebuf_r>
 8005ad2:	89a0      	ldrh	r0, [r4, #12]
 8005ad4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ad8:	f010 0301 	ands.w	r3, r0, #1
 8005adc:	d00a      	beq.n	8005af4 <__swsetup_r+0xbc>
 8005ade:	2300      	movs	r3, #0
 8005ae0:	60a3      	str	r3, [r4, #8]
 8005ae2:	6963      	ldr	r3, [r4, #20]
 8005ae4:	425b      	negs	r3, r3
 8005ae6:	61a3      	str	r3, [r4, #24]
 8005ae8:	6923      	ldr	r3, [r4, #16]
 8005aea:	b943      	cbnz	r3, 8005afe <__swsetup_r+0xc6>
 8005aec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005af0:	d1ba      	bne.n	8005a68 <__swsetup_r+0x30>
 8005af2:	bd70      	pop	{r4, r5, r6, pc}
 8005af4:	0781      	lsls	r1, r0, #30
 8005af6:	bf58      	it	pl
 8005af8:	6963      	ldrpl	r3, [r4, #20]
 8005afa:	60a3      	str	r3, [r4, #8]
 8005afc:	e7f4      	b.n	8005ae8 <__swsetup_r+0xb0>
 8005afe:	2000      	movs	r0, #0
 8005b00:	e7f7      	b.n	8005af2 <__swsetup_r+0xba>
 8005b02:	bf00      	nop
 8005b04:	20000014 	.word	0x20000014
 8005b08:	08005e20 	.word	0x08005e20
 8005b0c:	08005e40 	.word	0x08005e40
 8005b10:	08005e00 	.word	0x08005e00

08005b14 <__assert_func>:
 8005b14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005b16:	4614      	mov	r4, r2
 8005b18:	461a      	mov	r2, r3
 8005b1a:	4b09      	ldr	r3, [pc, #36]	; (8005b40 <__assert_func+0x2c>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4605      	mov	r5, r0
 8005b20:	68d8      	ldr	r0, [r3, #12]
 8005b22:	b14c      	cbz	r4, 8005b38 <__assert_func+0x24>
 8005b24:	4b07      	ldr	r3, [pc, #28]	; (8005b44 <__assert_func+0x30>)
 8005b26:	9100      	str	r1, [sp, #0]
 8005b28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005b2c:	4906      	ldr	r1, [pc, #24]	; (8005b48 <__assert_func+0x34>)
 8005b2e:	462b      	mov	r3, r5
 8005b30:	f000 f80e 	bl	8005b50 <fiprintf>
 8005b34:	f000 f8a3 	bl	8005c7e <abort>
 8005b38:	4b04      	ldr	r3, [pc, #16]	; (8005b4c <__assert_func+0x38>)
 8005b3a:	461c      	mov	r4, r3
 8005b3c:	e7f3      	b.n	8005b26 <__assert_func+0x12>
 8005b3e:	bf00      	nop
 8005b40:	20000014 	.word	0x20000014
 8005b44:	08006095 	.word	0x08006095
 8005b48:	080060a2 	.word	0x080060a2
 8005b4c:	080060d0 	.word	0x080060d0

08005b50 <fiprintf>:
 8005b50:	b40e      	push	{r1, r2, r3}
 8005b52:	b503      	push	{r0, r1, lr}
 8005b54:	4601      	mov	r1, r0
 8005b56:	ab03      	add	r3, sp, #12
 8005b58:	4805      	ldr	r0, [pc, #20]	; (8005b70 <fiprintf+0x20>)
 8005b5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b5e:	6800      	ldr	r0, [r0, #0]
 8005b60:	9301      	str	r3, [sp, #4]
 8005b62:	f7ff fdd5 	bl	8005710 <_vfiprintf_r>
 8005b66:	b002      	add	sp, #8
 8005b68:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b6c:	b003      	add	sp, #12
 8005b6e:	4770      	bx	lr
 8005b70:	20000014 	.word	0x20000014

08005b74 <__swhatbuf_r>:
 8005b74:	b570      	push	{r4, r5, r6, lr}
 8005b76:	460e      	mov	r6, r1
 8005b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b7c:	2900      	cmp	r1, #0
 8005b7e:	b096      	sub	sp, #88	; 0x58
 8005b80:	4614      	mov	r4, r2
 8005b82:	461d      	mov	r5, r3
 8005b84:	da08      	bge.n	8005b98 <__swhatbuf_r+0x24>
 8005b86:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	602a      	str	r2, [r5, #0]
 8005b8e:	061a      	lsls	r2, r3, #24
 8005b90:	d410      	bmi.n	8005bb4 <__swhatbuf_r+0x40>
 8005b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b96:	e00e      	b.n	8005bb6 <__swhatbuf_r+0x42>
 8005b98:	466a      	mov	r2, sp
 8005b9a:	f000 f877 	bl	8005c8c <_fstat_r>
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	dbf1      	blt.n	8005b86 <__swhatbuf_r+0x12>
 8005ba2:	9a01      	ldr	r2, [sp, #4]
 8005ba4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005ba8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005bac:	425a      	negs	r2, r3
 8005bae:	415a      	adcs	r2, r3
 8005bb0:	602a      	str	r2, [r5, #0]
 8005bb2:	e7ee      	b.n	8005b92 <__swhatbuf_r+0x1e>
 8005bb4:	2340      	movs	r3, #64	; 0x40
 8005bb6:	2000      	movs	r0, #0
 8005bb8:	6023      	str	r3, [r4, #0]
 8005bba:	b016      	add	sp, #88	; 0x58
 8005bbc:	bd70      	pop	{r4, r5, r6, pc}
	...

08005bc0 <__smakebuf_r>:
 8005bc0:	898b      	ldrh	r3, [r1, #12]
 8005bc2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005bc4:	079d      	lsls	r5, r3, #30
 8005bc6:	4606      	mov	r6, r0
 8005bc8:	460c      	mov	r4, r1
 8005bca:	d507      	bpl.n	8005bdc <__smakebuf_r+0x1c>
 8005bcc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005bd0:	6023      	str	r3, [r4, #0]
 8005bd2:	6123      	str	r3, [r4, #16]
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	6163      	str	r3, [r4, #20]
 8005bd8:	b002      	add	sp, #8
 8005bda:	bd70      	pop	{r4, r5, r6, pc}
 8005bdc:	ab01      	add	r3, sp, #4
 8005bde:	466a      	mov	r2, sp
 8005be0:	f7ff ffc8 	bl	8005b74 <__swhatbuf_r>
 8005be4:	9900      	ldr	r1, [sp, #0]
 8005be6:	4605      	mov	r5, r0
 8005be8:	4630      	mov	r0, r6
 8005bea:	f7fd fca1 	bl	8003530 <_malloc_r>
 8005bee:	b948      	cbnz	r0, 8005c04 <__smakebuf_r+0x44>
 8005bf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bf4:	059a      	lsls	r2, r3, #22
 8005bf6:	d4ef      	bmi.n	8005bd8 <__smakebuf_r+0x18>
 8005bf8:	f023 0303 	bic.w	r3, r3, #3
 8005bfc:	f043 0302 	orr.w	r3, r3, #2
 8005c00:	81a3      	strh	r3, [r4, #12]
 8005c02:	e7e3      	b.n	8005bcc <__smakebuf_r+0xc>
 8005c04:	4b0d      	ldr	r3, [pc, #52]	; (8005c3c <__smakebuf_r+0x7c>)
 8005c06:	62b3      	str	r3, [r6, #40]	; 0x28
 8005c08:	89a3      	ldrh	r3, [r4, #12]
 8005c0a:	6020      	str	r0, [r4, #0]
 8005c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c10:	81a3      	strh	r3, [r4, #12]
 8005c12:	9b00      	ldr	r3, [sp, #0]
 8005c14:	6163      	str	r3, [r4, #20]
 8005c16:	9b01      	ldr	r3, [sp, #4]
 8005c18:	6120      	str	r0, [r4, #16]
 8005c1a:	b15b      	cbz	r3, 8005c34 <__smakebuf_r+0x74>
 8005c1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c20:	4630      	mov	r0, r6
 8005c22:	f000 f845 	bl	8005cb0 <_isatty_r>
 8005c26:	b128      	cbz	r0, 8005c34 <__smakebuf_r+0x74>
 8005c28:	89a3      	ldrh	r3, [r4, #12]
 8005c2a:	f023 0303 	bic.w	r3, r3, #3
 8005c2e:	f043 0301 	orr.w	r3, r3, #1
 8005c32:	81a3      	strh	r3, [r4, #12]
 8005c34:	89a0      	ldrh	r0, [r4, #12]
 8005c36:	4305      	orrs	r5, r0
 8005c38:	81a5      	strh	r5, [r4, #12]
 8005c3a:	e7cd      	b.n	8005bd8 <__smakebuf_r+0x18>
 8005c3c:	080032ed 	.word	0x080032ed

08005c40 <__ascii_mbtowc>:
 8005c40:	b082      	sub	sp, #8
 8005c42:	b901      	cbnz	r1, 8005c46 <__ascii_mbtowc+0x6>
 8005c44:	a901      	add	r1, sp, #4
 8005c46:	b142      	cbz	r2, 8005c5a <__ascii_mbtowc+0x1a>
 8005c48:	b14b      	cbz	r3, 8005c5e <__ascii_mbtowc+0x1e>
 8005c4a:	7813      	ldrb	r3, [r2, #0]
 8005c4c:	600b      	str	r3, [r1, #0]
 8005c4e:	7812      	ldrb	r2, [r2, #0]
 8005c50:	1e10      	subs	r0, r2, #0
 8005c52:	bf18      	it	ne
 8005c54:	2001      	movne	r0, #1
 8005c56:	b002      	add	sp, #8
 8005c58:	4770      	bx	lr
 8005c5a:	4610      	mov	r0, r2
 8005c5c:	e7fb      	b.n	8005c56 <__ascii_mbtowc+0x16>
 8005c5e:	f06f 0001 	mvn.w	r0, #1
 8005c62:	e7f8      	b.n	8005c56 <__ascii_mbtowc+0x16>

08005c64 <__ascii_wctomb>:
 8005c64:	b149      	cbz	r1, 8005c7a <__ascii_wctomb+0x16>
 8005c66:	2aff      	cmp	r2, #255	; 0xff
 8005c68:	bf85      	ittet	hi
 8005c6a:	238a      	movhi	r3, #138	; 0x8a
 8005c6c:	6003      	strhi	r3, [r0, #0]
 8005c6e:	700a      	strbls	r2, [r1, #0]
 8005c70:	f04f 30ff 	movhi.w	r0, #4294967295
 8005c74:	bf98      	it	ls
 8005c76:	2001      	movls	r0, #1
 8005c78:	4770      	bx	lr
 8005c7a:	4608      	mov	r0, r1
 8005c7c:	4770      	bx	lr

08005c7e <abort>:
 8005c7e:	b508      	push	{r3, lr}
 8005c80:	2006      	movs	r0, #6
 8005c82:	f000 f84d 	bl	8005d20 <raise>
 8005c86:	2001      	movs	r0, #1
 8005c88:	f000 f86e 	bl	8005d68 <_exit>

08005c8c <_fstat_r>:
 8005c8c:	b538      	push	{r3, r4, r5, lr}
 8005c8e:	4d07      	ldr	r5, [pc, #28]	; (8005cac <_fstat_r+0x20>)
 8005c90:	2300      	movs	r3, #0
 8005c92:	4604      	mov	r4, r0
 8005c94:	4608      	mov	r0, r1
 8005c96:	4611      	mov	r1, r2
 8005c98:	602b      	str	r3, [r5, #0]
 8005c9a:	f7fd f97a 	bl	8002f92 <_fstat>
 8005c9e:	1c43      	adds	r3, r0, #1
 8005ca0:	d102      	bne.n	8005ca8 <_fstat_r+0x1c>
 8005ca2:	682b      	ldr	r3, [r5, #0]
 8005ca4:	b103      	cbz	r3, 8005ca8 <_fstat_r+0x1c>
 8005ca6:	6023      	str	r3, [r4, #0]
 8005ca8:	bd38      	pop	{r3, r4, r5, pc}
 8005caa:	bf00      	nop
 8005cac:	2000034c 	.word	0x2000034c

08005cb0 <_isatty_r>:
 8005cb0:	b538      	push	{r3, r4, r5, lr}
 8005cb2:	4d06      	ldr	r5, [pc, #24]	; (8005ccc <_isatty_r+0x1c>)
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	4604      	mov	r4, r0
 8005cb8:	4608      	mov	r0, r1
 8005cba:	602b      	str	r3, [r5, #0]
 8005cbc:	f7fd fad0 	bl	8003260 <_isatty>
 8005cc0:	1c43      	adds	r3, r0, #1
 8005cc2:	d102      	bne.n	8005cca <_isatty_r+0x1a>
 8005cc4:	682b      	ldr	r3, [r5, #0]
 8005cc6:	b103      	cbz	r3, 8005cca <_isatty_r+0x1a>
 8005cc8:	6023      	str	r3, [r4, #0]
 8005cca:	bd38      	pop	{r3, r4, r5, pc}
 8005ccc:	2000034c 	.word	0x2000034c

08005cd0 <_raise_r>:
 8005cd0:	291f      	cmp	r1, #31
 8005cd2:	b538      	push	{r3, r4, r5, lr}
 8005cd4:	4604      	mov	r4, r0
 8005cd6:	460d      	mov	r5, r1
 8005cd8:	d904      	bls.n	8005ce4 <_raise_r+0x14>
 8005cda:	2316      	movs	r3, #22
 8005cdc:	6003      	str	r3, [r0, #0]
 8005cde:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce2:	bd38      	pop	{r3, r4, r5, pc}
 8005ce4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005ce6:	b112      	cbz	r2, 8005cee <_raise_r+0x1e>
 8005ce8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005cec:	b94b      	cbnz	r3, 8005d02 <_raise_r+0x32>
 8005cee:	4620      	mov	r0, r4
 8005cf0:	f000 f830 	bl	8005d54 <_getpid_r>
 8005cf4:	462a      	mov	r2, r5
 8005cf6:	4601      	mov	r1, r0
 8005cf8:	4620      	mov	r0, r4
 8005cfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cfe:	f000 b817 	b.w	8005d30 <_kill_r>
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d00a      	beq.n	8005d1c <_raise_r+0x4c>
 8005d06:	1c59      	adds	r1, r3, #1
 8005d08:	d103      	bne.n	8005d12 <_raise_r+0x42>
 8005d0a:	2316      	movs	r3, #22
 8005d0c:	6003      	str	r3, [r0, #0]
 8005d0e:	2001      	movs	r0, #1
 8005d10:	e7e7      	b.n	8005ce2 <_raise_r+0x12>
 8005d12:	2400      	movs	r4, #0
 8005d14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005d18:	4628      	mov	r0, r5
 8005d1a:	4798      	blx	r3
 8005d1c:	2000      	movs	r0, #0
 8005d1e:	e7e0      	b.n	8005ce2 <_raise_r+0x12>

08005d20 <raise>:
 8005d20:	4b02      	ldr	r3, [pc, #8]	; (8005d2c <raise+0xc>)
 8005d22:	4601      	mov	r1, r0
 8005d24:	6818      	ldr	r0, [r3, #0]
 8005d26:	f7ff bfd3 	b.w	8005cd0 <_raise_r>
 8005d2a:	bf00      	nop
 8005d2c:	20000014 	.word	0x20000014

08005d30 <_kill_r>:
 8005d30:	b538      	push	{r3, r4, r5, lr}
 8005d32:	4d07      	ldr	r5, [pc, #28]	; (8005d50 <_kill_r+0x20>)
 8005d34:	2300      	movs	r3, #0
 8005d36:	4604      	mov	r4, r0
 8005d38:	4608      	mov	r0, r1
 8005d3a:	4611      	mov	r1, r2
 8005d3c:	602b      	str	r3, [r5, #0]
 8005d3e:	f000 f80b 	bl	8005d58 <_kill>
 8005d42:	1c43      	adds	r3, r0, #1
 8005d44:	d102      	bne.n	8005d4c <_kill_r+0x1c>
 8005d46:	682b      	ldr	r3, [r5, #0]
 8005d48:	b103      	cbz	r3, 8005d4c <_kill_r+0x1c>
 8005d4a:	6023      	str	r3, [r4, #0]
 8005d4c:	bd38      	pop	{r3, r4, r5, pc}
 8005d4e:	bf00      	nop
 8005d50:	2000034c 	.word	0x2000034c

08005d54 <_getpid_r>:
 8005d54:	f7fd b8fa 	b.w	8002f4c <_getpid>

08005d58 <_kill>:
 8005d58:	4b02      	ldr	r3, [pc, #8]	; (8005d64 <_kill+0xc>)
 8005d5a:	2258      	movs	r2, #88	; 0x58
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8005d62:	4770      	bx	lr
 8005d64:	2000034c 	.word	0x2000034c

08005d68 <_exit>:
 8005d68:	e7fe      	b.n	8005d68 <_exit>
	...

08005d6c <_init>:
 8005d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d6e:	bf00      	nop
 8005d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d72:	bc08      	pop	{r3}
 8005d74:	469e      	mov	lr, r3
 8005d76:	4770      	bx	lr

08005d78 <_fini>:
 8005d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d7a:	bf00      	nop
 8005d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d7e:	bc08      	pop	{r3}
 8005d80:	469e      	mov	lr, r3
 8005d82:	4770      	bx	lr
